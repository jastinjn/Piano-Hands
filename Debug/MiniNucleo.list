
MiniNucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b9d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000554  0800bb70  0800bb70  0001bb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c0c4  0800c0c4  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c0c4  0800c0c4  0001c0c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c0cc  0800c0cc  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c0cc  0800c0cc  0001c0cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c0d0  0800c0d0  0001c0d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800c0d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  200001e8  0800c2b8  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000530  0800c2b8  00020530  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001685e  00000000  00000000  00020214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c69  00000000  00000000  00036a72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e8  00000000  00000000  000396e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d8  00000000  00000000  0003aac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000199a2  00000000  00000000  0003bda0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000180a3  00000000  00000000  00055742  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f895  00000000  00000000  0006d7e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010d07a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a8  00000000  00000000  0010d0cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e8 	.word	0x200001e8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800bb58 	.word	0x0800bb58

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001ec 	.word	0x200001ec
 80001dc:	0800bb58 	.word	0x0800bb58

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_uldivmod>:
 8000bf8:	b953      	cbnz	r3, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfa:	b94a      	cbnz	r2, 8000c10 <__aeabi_uldivmod+0x18>
 8000bfc:	2900      	cmp	r1, #0
 8000bfe:	bf08      	it	eq
 8000c00:	2800      	cmpeq	r0, #0
 8000c02:	bf1c      	itt	ne
 8000c04:	f04f 31ff 	movne.w	r1, #4294967295
 8000c08:	f04f 30ff 	movne.w	r0, #4294967295
 8000c0c:	f000 b974 	b.w	8000ef8 <__aeabi_idiv0>
 8000c10:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c14:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c18:	f000 f806 	bl	8000c28 <__udivmoddi4>
 8000c1c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c24:	b004      	add	sp, #16
 8000c26:	4770      	bx	lr

08000c28 <__udivmoddi4>:
 8000c28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c2c:	9d08      	ldr	r5, [sp, #32]
 8000c2e:	4604      	mov	r4, r0
 8000c30:	468e      	mov	lr, r1
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d14d      	bne.n	8000cd2 <__udivmoddi4+0xaa>
 8000c36:	428a      	cmp	r2, r1
 8000c38:	4694      	mov	ip, r2
 8000c3a:	d969      	bls.n	8000d10 <__udivmoddi4+0xe8>
 8000c3c:	fab2 f282 	clz	r2, r2
 8000c40:	b152      	cbz	r2, 8000c58 <__udivmoddi4+0x30>
 8000c42:	fa01 f302 	lsl.w	r3, r1, r2
 8000c46:	f1c2 0120 	rsb	r1, r2, #32
 8000c4a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c4e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c52:	ea41 0e03 	orr.w	lr, r1, r3
 8000c56:	4094      	lsls	r4, r2
 8000c58:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c5c:	0c21      	lsrs	r1, r4, #16
 8000c5e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c62:	fa1f f78c 	uxth.w	r7, ip
 8000c66:	fb08 e316 	mls	r3, r8, r6, lr
 8000c6a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c6e:	fb06 f107 	mul.w	r1, r6, r7
 8000c72:	4299      	cmp	r1, r3
 8000c74:	d90a      	bls.n	8000c8c <__udivmoddi4+0x64>
 8000c76:	eb1c 0303 	adds.w	r3, ip, r3
 8000c7a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c7e:	f080 811f 	bcs.w	8000ec0 <__udivmoddi4+0x298>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 811c 	bls.w	8000ec0 <__udivmoddi4+0x298>
 8000c88:	3e02      	subs	r6, #2
 8000c8a:	4463      	add	r3, ip
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c94:	fb08 3310 	mls	r3, r8, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 f707 	mul.w	r7, r0, r7
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	d90a      	bls.n	8000cba <__udivmoddi4+0x92>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cac:	f080 810a 	bcs.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb0:	42a7      	cmp	r7, r4
 8000cb2:	f240 8107 	bls.w	8000ec4 <__udivmoddi4+0x29c>
 8000cb6:	4464      	add	r4, ip
 8000cb8:	3802      	subs	r0, #2
 8000cba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cbe:	1be4      	subs	r4, r4, r7
 8000cc0:	2600      	movs	r6, #0
 8000cc2:	b11d      	cbz	r5, 8000ccc <__udivmoddi4+0xa4>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c5 4300 	strd	r4, r3, [r5]
 8000ccc:	4631      	mov	r1, r6
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xc2>
 8000cd6:	2d00      	cmp	r5, #0
 8000cd8:	f000 80ef 	beq.w	8000eba <__udivmoddi4+0x292>
 8000cdc:	2600      	movs	r6, #0
 8000cde:	e9c5 0100 	strd	r0, r1, [r5]
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	4631      	mov	r1, r6
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f683 	clz	r6, r3
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	d14a      	bne.n	8000d88 <__udivmoddi4+0x160>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd4>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80f9 	bhi.w	8000eee <__udivmoddi4+0x2c6>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	469e      	mov	lr, r3
 8000d06:	2d00      	cmp	r5, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa4>
 8000d0a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xec>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 8092 	bne.w	8000e42 <__udivmoddi4+0x21a>
 8000d1e:	eba1 010c 	sub.w	r1, r1, ip
 8000d22:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d26:	fa1f fe8c 	uxth.w	lr, ip
 8000d2a:	2601      	movs	r6, #1
 8000d2c:	0c20      	lsrs	r0, r4, #16
 8000d2e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d32:	fb07 1113 	mls	r1, r7, r3, r1
 8000d36:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d3a:	fb0e f003 	mul.w	r0, lr, r3
 8000d3e:	4288      	cmp	r0, r1
 8000d40:	d908      	bls.n	8000d54 <__udivmoddi4+0x12c>
 8000d42:	eb1c 0101 	adds.w	r1, ip, r1
 8000d46:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d4a:	d202      	bcs.n	8000d52 <__udivmoddi4+0x12a>
 8000d4c:	4288      	cmp	r0, r1
 8000d4e:	f200 80cb 	bhi.w	8000ee8 <__udivmoddi4+0x2c0>
 8000d52:	4643      	mov	r3, r8
 8000d54:	1a09      	subs	r1, r1, r0
 8000d56:	b2a4      	uxth	r4, r4
 8000d58:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d5c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d60:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d64:	fb0e fe00 	mul.w	lr, lr, r0
 8000d68:	45a6      	cmp	lr, r4
 8000d6a:	d908      	bls.n	8000d7e <__udivmoddi4+0x156>
 8000d6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d74:	d202      	bcs.n	8000d7c <__udivmoddi4+0x154>
 8000d76:	45a6      	cmp	lr, r4
 8000d78:	f200 80bb 	bhi.w	8000ef2 <__udivmoddi4+0x2ca>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	eba4 040e 	sub.w	r4, r4, lr
 8000d82:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d86:	e79c      	b.n	8000cc2 <__udivmoddi4+0x9a>
 8000d88:	f1c6 0720 	rsb	r7, r6, #32
 8000d8c:	40b3      	lsls	r3, r6
 8000d8e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d92:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d96:	fa20 f407 	lsr.w	r4, r0, r7
 8000d9a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d9e:	431c      	orrs	r4, r3
 8000da0:	40f9      	lsrs	r1, r7
 8000da2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000da6:	fa00 f306 	lsl.w	r3, r0, r6
 8000daa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dae:	0c20      	lsrs	r0, r4, #16
 8000db0:	fa1f fe8c 	uxth.w	lr, ip
 8000db4:	fb09 1118 	mls	r1, r9, r8, r1
 8000db8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dbc:	fb08 f00e 	mul.w	r0, r8, lr
 8000dc0:	4288      	cmp	r0, r1
 8000dc2:	fa02 f206 	lsl.w	r2, r2, r6
 8000dc6:	d90b      	bls.n	8000de0 <__udivmoddi4+0x1b8>
 8000dc8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dcc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dd0:	f080 8088 	bcs.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dd4:	4288      	cmp	r0, r1
 8000dd6:	f240 8085 	bls.w	8000ee4 <__udivmoddi4+0x2bc>
 8000dda:	f1a8 0802 	sub.w	r8, r8, #2
 8000dde:	4461      	add	r1, ip
 8000de0:	1a09      	subs	r1, r1, r0
 8000de2:	b2a4      	uxth	r4, r4
 8000de4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000de8:	fb09 1110 	mls	r1, r9, r0, r1
 8000dec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000df0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000df4:	458e      	cmp	lr, r1
 8000df6:	d908      	bls.n	8000e0a <__udivmoddi4+0x1e2>
 8000df8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dfc:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e00:	d26c      	bcs.n	8000edc <__udivmoddi4+0x2b4>
 8000e02:	458e      	cmp	lr, r1
 8000e04:	d96a      	bls.n	8000edc <__udivmoddi4+0x2b4>
 8000e06:	3802      	subs	r0, #2
 8000e08:	4461      	add	r1, ip
 8000e0a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e0e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e12:	eba1 010e 	sub.w	r1, r1, lr
 8000e16:	42a1      	cmp	r1, r4
 8000e18:	46c8      	mov	r8, r9
 8000e1a:	46a6      	mov	lr, r4
 8000e1c:	d356      	bcc.n	8000ecc <__udivmoddi4+0x2a4>
 8000e1e:	d053      	beq.n	8000ec8 <__udivmoddi4+0x2a0>
 8000e20:	b15d      	cbz	r5, 8000e3a <__udivmoddi4+0x212>
 8000e22:	ebb3 0208 	subs.w	r2, r3, r8
 8000e26:	eb61 010e 	sbc.w	r1, r1, lr
 8000e2a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e2e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e32:	40f1      	lsrs	r1, r6
 8000e34:	431f      	orrs	r7, r3
 8000e36:	e9c5 7100 	strd	r7, r1, [r5]
 8000e3a:	2600      	movs	r6, #0
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	f1c2 0320 	rsb	r3, r2, #32
 8000e46:	40d8      	lsrs	r0, r3
 8000e48:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e4c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e50:	4091      	lsls	r1, r2
 8000e52:	4301      	orrs	r1, r0
 8000e54:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e58:	fa1f fe8c 	uxth.w	lr, ip
 8000e5c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e60:	fb07 3610 	mls	r6, r7, r0, r3
 8000e64:	0c0b      	lsrs	r3, r1, #16
 8000e66:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e6a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e6e:	429e      	cmp	r6, r3
 8000e70:	fa04 f402 	lsl.w	r4, r4, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x260>
 8000e76:	eb1c 0303 	adds.w	r3, ip, r3
 8000e7a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e7e:	d22f      	bcs.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e80:	429e      	cmp	r6, r3
 8000e82:	d92d      	bls.n	8000ee0 <__udivmoddi4+0x2b8>
 8000e84:	3802      	subs	r0, #2
 8000e86:	4463      	add	r3, ip
 8000e88:	1b9b      	subs	r3, r3, r6
 8000e8a:	b289      	uxth	r1, r1
 8000e8c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e90:	fb07 3316 	mls	r3, r7, r6, r3
 8000e94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e98:	fb06 f30e 	mul.w	r3, r6, lr
 8000e9c:	428b      	cmp	r3, r1
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x28a>
 8000ea0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ea4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ea8:	d216      	bcs.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eaa:	428b      	cmp	r3, r1
 8000eac:	d914      	bls.n	8000ed8 <__udivmoddi4+0x2b0>
 8000eae:	3e02      	subs	r6, #2
 8000eb0:	4461      	add	r1, ip
 8000eb2:	1ac9      	subs	r1, r1, r3
 8000eb4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000eb8:	e738      	b.n	8000d2c <__udivmoddi4+0x104>
 8000eba:	462e      	mov	r6, r5
 8000ebc:	4628      	mov	r0, r5
 8000ebe:	e705      	b.n	8000ccc <__udivmoddi4+0xa4>
 8000ec0:	4606      	mov	r6, r0
 8000ec2:	e6e3      	b.n	8000c8c <__udivmoddi4+0x64>
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	e6f8      	b.n	8000cba <__udivmoddi4+0x92>
 8000ec8:	454b      	cmp	r3, r9
 8000eca:	d2a9      	bcs.n	8000e20 <__udivmoddi4+0x1f8>
 8000ecc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ed0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ed4:	3801      	subs	r0, #1
 8000ed6:	e7a3      	b.n	8000e20 <__udivmoddi4+0x1f8>
 8000ed8:	4646      	mov	r6, r8
 8000eda:	e7ea      	b.n	8000eb2 <__udivmoddi4+0x28a>
 8000edc:	4620      	mov	r0, r4
 8000ede:	e794      	b.n	8000e0a <__udivmoddi4+0x1e2>
 8000ee0:	4640      	mov	r0, r8
 8000ee2:	e7d1      	b.n	8000e88 <__udivmoddi4+0x260>
 8000ee4:	46d0      	mov	r8, sl
 8000ee6:	e77b      	b.n	8000de0 <__udivmoddi4+0x1b8>
 8000ee8:	3b02      	subs	r3, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	e732      	b.n	8000d54 <__udivmoddi4+0x12c>
 8000eee:	4630      	mov	r0, r6
 8000ef0:	e709      	b.n	8000d06 <__udivmoddi4+0xde>
 8000ef2:	4464      	add	r4, ip
 8000ef4:	3802      	subs	r0, #2
 8000ef6:	e742      	b.n	8000d7e <__udivmoddi4+0x156>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <lcd_instruction_send>:

#define LCD_ADDR 0x4E

// in 4 bit mode, the upper 4 bits are sent followed by lower 4 bits
// data in [7:4], [3] is backlight, [2] is enable,  [1] is R/W (1 for read, 0 for write), [0] is data/instruction (1 for data, 0 for instruction)
void lcd_instruction_send(I2C_HandleTypeDef *hi2c, uint8_t cmd){
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af02      	add	r7, sp, #8
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	70fb      	strb	r3, [r7, #3]

	uint8_t upper_half, lower_half;
	uint8_t send_data[4];
	upper_half = cmd & 0b11110000;
 8000f08:	78fb      	ldrb	r3, [r7, #3]
 8000f0a:	f023 030f 	bic.w	r3, r3, #15
 8000f0e:	73fb      	strb	r3, [r7, #15]
	lower_half = (cmd << 4) & 0b11110000;
 8000f10:	78fb      	ldrb	r3, [r7, #3]
 8000f12:	011b      	lsls	r3, r3, #4
 8000f14:	73bb      	strb	r3, [r7, #14]
	send_data[0] = upper_half | 0b1100;
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	f043 030c 	orr.w	r3, r3, #12
 8000f1c:	b2db      	uxtb	r3, r3
 8000f1e:	723b      	strb	r3, [r7, #8]
	send_data[1] = upper_half | 0b1000;  // enable pin low to complete send
 8000f20:	7bfb      	ldrb	r3, [r7, #15]
 8000f22:	f043 0308 	orr.w	r3, r3, #8
 8000f26:	b2db      	uxtb	r3, r3
 8000f28:	727b      	strb	r3, [r7, #9]
	send_data[2] = lower_half | 0b1100;
 8000f2a:	7bbb      	ldrb	r3, [r7, #14]
 8000f2c:	f043 030c 	orr.w	r3, r3, #12
 8000f30:	b2db      	uxtb	r3, r3
 8000f32:	72bb      	strb	r3, [r7, #10]
	send_data[3] = lower_half | 0b1000;  // enable pin low to complete send
 8000f34:	7bbb      	ldrb	r3, [r7, #14]
 8000f36:	f043 0308 	orr.w	r3, r3, #8
 8000f3a:	b2db      	uxtb	r3, r3
 8000f3c:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit (hi2c, LCD_ADDR,(uint8_t *) send_data, 4, 100);
 8000f3e:	f107 0208 	add.w	r2, r7, #8
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	2304      	movs	r3, #4
 8000f48:	214e      	movs	r1, #78	; 0x4e
 8000f4a:	6878      	ldr	r0, [r7, #4]
 8000f4c:	f003 faee 	bl	800452c <HAL_I2C_Master_Transmit>
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}

08000f58 <lcd_data_send>:

void lcd_data_send (I2C_HandleTypeDef *hi2c, char data){
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af02      	add	r7, sp, #8
 8000f5e:	6078      	str	r0, [r7, #4]
 8000f60:	460b      	mov	r3, r1
 8000f62:	70fb      	strb	r3, [r7, #3]

	uint8_t upper_half, lower_half;
	uint8_t send_data[4];
	upper_half = data & 0b11110000;
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	f023 030f 	bic.w	r3, r3, #15
 8000f6a:	73fb      	strb	r3, [r7, #15]
	lower_half = (data << 4) & 0b11110000;
 8000f6c:	78fb      	ldrb	r3, [r7, #3]
 8000f6e:	011b      	lsls	r3, r3, #4
 8000f70:	73bb      	strb	r3, [r7, #14]
	send_data[0] = upper_half | 0b1101;
 8000f72:	7bfb      	ldrb	r3, [r7, #15]
 8000f74:	f043 030d 	orr.w	r3, r3, #13
 8000f78:	b2db      	uxtb	r3, r3
 8000f7a:	723b      	strb	r3, [r7, #8]
	send_data[1] = upper_half | 0b1000;  // enable pin low to complete send
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	f043 0308 	orr.w	r3, r3, #8
 8000f82:	b2db      	uxtb	r3, r3
 8000f84:	727b      	strb	r3, [r7, #9]
	send_data[2] = lower_half | 0b1101;
 8000f86:	7bbb      	ldrb	r3, [r7, #14]
 8000f88:	f043 030d 	orr.w	r3, r3, #13
 8000f8c:	b2db      	uxtb	r3, r3
 8000f8e:	72bb      	strb	r3, [r7, #10]
	send_data[3] = lower_half | 0b1000;	 // enable pin low to complete send
 8000f90:	7bbb      	ldrb	r3, [r7, #14]
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	72fb      	strb	r3, [r7, #11]

	HAL_I2C_Master_Transmit (hi2c, LCD_ADDR, send_data, 4, 100);
 8000f9a:	f107 0208 	add.w	r2, r7, #8
 8000f9e:	2364      	movs	r3, #100	; 0x64
 8000fa0:	9300      	str	r3, [sp, #0]
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	214e      	movs	r1, #78	; 0x4e
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f003 fac0 	bl	800452c <HAL_I2C_Master_Transmit>
}
 8000fac:	bf00      	nop
 8000fae:	3710      	adds	r7, #16
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <lcd_send_string>:

void lcd_send_string (I2C_HandleTypeDef *hi2c, char *str)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
 8000fbc:	6039      	str	r1, [r7, #0]
	while (*str) lcd_data_send (hi2c, *str++);
 8000fbe:	e007      	b.n	8000fd0 <lcd_send_string+0x1c>
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	1c5a      	adds	r2, r3, #1
 8000fc4:	603a      	str	r2, [r7, #0]
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	4619      	mov	r1, r3
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffc4 	bl	8000f58 <lcd_data_send>
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d1f3      	bne.n	8000fc0 <lcd_send_string+0xc>
}
 8000fd8:	bf00      	nop
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <lcd_init>:

void lcd_init (I2C_HandleTypeDef *hi2c){
 8000fe2:	b580      	push	{r7, lr}
 8000fe4:	b082      	sub	sp, #8
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]

	// set into 4 bit mode
	lcd_instruction_send (hi2c, 0b00100000);
 8000fea:	2120      	movs	r1, #32
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ff85 	bl	8000efc <lcd_instruction_send>
	HAL_Delay(1);
 8000ff2:	2001      	movs	r0, #1
 8000ff4:	f001 fd90 	bl	8002b18 <HAL_Delay>
	// set function mode (2 line, 5x8 character size)
	lcd_instruction_send(hi2c, 0b00101000);
 8000ff8:	2128      	movs	r1, #40	; 0x28
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f7ff ff7e 	bl	8000efc <lcd_instruction_send>
	HAL_Delay(1);
 8001000:	2001      	movs	r0, #1
 8001002:	f001 fd89 	bl	8002b18 <HAL_Delay>
	// set entry mode (increment, no shift)
	lcd_instruction_send(hi2c, 0b00000110);
 8001006:	2106      	movs	r1, #6
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ff77 	bl	8000efc <lcd_instruction_send>
	HAL_Delay(1);
 800100e:	2001      	movs	r0, #1
 8001010:	f001 fd82 	bl	8002b18 <HAL_Delay>
	// clear display
	lcd_instruction_send(hi2c, 0b00000001);
 8001014:	2101      	movs	r1, #1
 8001016:	6878      	ldr	r0, [r7, #4]
 8001018:	f7ff ff70 	bl	8000efc <lcd_instruction_send>
	HAL_Delay(1);
 800101c:	2001      	movs	r0, #1
 800101e:	f001 fd7b 	bl	8002b18 <HAL_Delay>
	// turn on display
	lcd_instruction_send(hi2c, 0b00001100);
 8001022:	210c      	movs	r1, #12
 8001024:	6878      	ldr	r0, [r7, #4]
 8001026:	f7ff ff69 	bl	8000efc <lcd_instruction_send>
	HAL_Delay(1);
 800102a:	2001      	movs	r0, #1
 800102c:	f001 fd74 	bl	8002b18 <HAL_Delay>
}
 8001030:	bf00      	nop
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <lcd_set_pos>:

void lcd_clear(I2C_HandleTypeDef *hi2c){
	lcd_instruction_send(hi2c, 0b00000001);
}

void lcd_set_pos(I2C_HandleTypeDef *hi2c, int row, int col){
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]

	if (row) col += 64;
 8001044:	68bb      	ldr	r3, [r7, #8]
 8001046:	2b00      	cmp	r3, #0
 8001048:	d002      	beq.n	8001050 <lcd_set_pos+0x18>
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	3340      	adds	r3, #64	; 0x40
 800104e:	607b      	str	r3, [r7, #4]
	lcd_instruction_send(hi2c, col | 0b10000000);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	b25b      	sxtb	r3, r3
 8001054:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001058:	b25b      	sxtb	r3, r3
 800105a:	b2db      	uxtb	r3, r3
 800105c:	4619      	mov	r1, r3
 800105e:	68f8      	ldr	r0, [r7, #12]
 8001060:	f7ff ff4c 	bl	8000efc <lcd_instruction_send>
}
 8001064:	bf00      	nop
 8001066:	3710      	adds	r7, #16
 8001068:	46bd      	mov	sp, r7
 800106a:	bd80      	pop	{r7, pc}
 800106c:	0000      	movs	r0, r0
	...

08001070 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001070:	b5b0      	push	{r4, r5, r7, lr}
 8001072:	b0a8      	sub	sp, #160	; 0xa0
 8001074:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */


	int distance_gotten = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800107c:	f001 fcda 	bl	8002a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001080:	f000 fc0a 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001084:	f000 febe 	bl	8001e04 <MX_GPIO_Init>
  MX_DMA_Init();
 8001088:	f000 fe9c 	bl	8001dc4 <MX_DMA_Init>
  MX_ADC1_Init();
 800108c:	f000 fc6e 	bl	800196c <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8001090:	f000 fe44 	bl	8001d1c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8001094:	f000 fd58 	bl	8001b48 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001098:	f000 fcf2 	bl	8001a80 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 800109c:	f000 fe14 	bl	8001cc8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80010a0:	f000 fd1c 	bl	8001adc <MX_SPI2_Init>
  MX_TIM3_Init();
 80010a4:	f000 fdc2 	bl	8001c2c <MX_TIM3_Init>
  MX_USART6_UART_Init();
 80010a8:	f000 fe62 	bl	8001d70 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_1);
 80010ac:	2100      	movs	r1, #0
 80010ae:	4894      	ldr	r0, [pc, #592]	; (8001300 <main+0x290>)
 80010b0:	f006 fbf0 	bl	8007894 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 80010b4:	2100      	movs	r1, #0
 80010b6:	4893      	ldr	r0, [pc, #588]	; (8001304 <main+0x294>)
 80010b8:	f006 fc9c 	bl	80079f4 <HAL_TIM_PWM_Start_IT>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, 5);
 80010bc:	2205      	movs	r2, #5
 80010be:	4992      	ldr	r1, [pc, #584]	; (8001308 <main+0x298>)
 80010c0:	4892      	ldr	r0, [pc, #584]	; (800130c <main+0x29c>)
 80010c2:	f001 fea1 	bl	8002e08 <HAL_ADC_Start_DMA>
  lcd_init(&hi2c1);
 80010c6:	4892      	ldr	r0, [pc, #584]	; (8001310 <main+0x2a0>)
 80010c8:	f7ff ff8b 	bl	8000fe2 <lcd_init>
  lcd_send_string(&hi2c1, "READY");
 80010cc:	4991      	ldr	r1, [pc, #580]	; (8001314 <main+0x2a4>)
 80010ce:	4890      	ldr	r0, [pc, #576]	; (8001310 <main+0x2a0>)
 80010d0:	f7ff ff70 	bl	8000fb4 <lcd_send_string>
  lcd_set_pos(&hi2c1, 1, 0);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2101      	movs	r1, #1
 80010d8:	488d      	ldr	r0, [pc, #564]	; (8001310 <main+0x2a0>)
 80010da:	f7ff ffad 	bl	8001038 <lcd_set_pos>
  lcd_send_string(&hi2c1, "PIANO");
 80010de:	498e      	ldr	r1, [pc, #568]	; (8001318 <main+0x2a8>)
 80010e0:	488b      	ldr	r0, [pc, #556]	; (8001310 <main+0x2a0>)
 80010e2:	f7ff ff67 	bl	8000fb4 <lcd_send_string>
  changeInstrument(&huart1, 0);
 80010e6:	2100      	movs	r1, #0
 80010e8:	488c      	ldr	r0, [pc, #560]	; (800131c <main+0x2ac>)
 80010ea:	f000 ff9b 	bl	8002024 <changeInstrument>
  changeVolume(&huart1, 127);
 80010ee:	217f      	movs	r1, #127	; 0x7f
 80010f0:	488a      	ldr	r0, [pc, #552]	; (800131c <main+0x2ac>)
 80010f2:	f000 ff80 	bl	8001ff6 <changeVolume>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  uint8_t instrument_programs[] = {0, 25, 40, 56, 73};
 80010f6:	4a8a      	ldr	r2, [pc, #552]	; (8001320 <main+0x2b0>)
 80010f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80010fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001100:	6018      	str	r0, [r3, #0]
 8001102:	3304      	adds	r3, #4
 8001104:	7019      	strb	r1, [r3, #0]
  uint8_t white_keys[52] = {21, 23, 24, 26, 28, 29, 31, 33, 35, 36, 38, 40, 41, 43, 45, 47, 48, 50, 52, 53, 55, 57, 59, 60, 62, 64, 65, 67, 69, 71, 72, 74, 76, 77, 79, 81, 83, 84, 86, 88, 89, 91, 93, 95, 96, 98, 100, 101, 103, 105, 107, 108};
 8001106:	4b87      	ldr	r3, [pc, #540]	; (8001324 <main+0x2b4>)
 8001108:	f107 0448 	add.w	r4, r7, #72	; 0x48
 800110c:	461d      	mov	r5, r3
 800110e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001110:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001112:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001116:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001118:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800111a:	682b      	ldr	r3, [r5, #0]
 800111c:	6023      	str	r3, [r4, #0]
  char key_names[] = "AABCCDDEFFGG";
 800111e:	4b82      	ldr	r3, [pc, #520]	; (8001328 <main+0x2b8>)
 8001120:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8001124:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001126:	c407      	stmia	r4!, {r0, r1, r2}
 8001128:	7023      	strb	r3, [r4, #0]
  char key_accidents[] = " #  # #  # #";
 800112a:	4b80      	ldr	r3, [pc, #512]	; (800132c <main+0x2bc>)
 800112c:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8001130:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001132:	c407      	stmia	r4!, {r0, r1, r2}
 8001134:	7023      	strb	r3, [r4, #0]
  uint8_t semitone_offset[5] = {0,2,4,5,7};
 8001136:	4a7e      	ldr	r2, [pc, #504]	; (8001330 <main+0x2c0>)
 8001138:	f107 0320 	add.w	r3, r7, #32
 800113c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001140:	6018      	str	r0, [r3, #0]
 8001142:	3304      	adds	r3, #4
 8001144:	7019      	strb	r1, [r3, #0]
  uint8_t instrument = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint8_t mode = 0;
 800114c:	2300      	movs	r3, #0
 800114e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
  uint8_t PB5_prev = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95
  uint8_t PB5_curr = 0;
 8001158:	2300      	movs	r3, #0
 800115a:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
  uint8_t PB10_prev = 0;
 800115e:	2300      	movs	r3, #0
 8001160:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94
  uint8_t PB10_curr = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
  uint8_t prev_thumb_pos_mod = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93
  uint8_t thumb_pos_modified = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
  uint8_t last_played[]  = {0, 0, 0, 0, 0};
 8001176:	4a6f      	ldr	r2, [pc, #444]	; (8001334 <main+0x2c4>)
 8001178:	f107 0318 	add.w	r3, r7, #24
 800117c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001180:	6018      	str	r0, [r3, #0]
 8001182:	3304      	adds	r3, #4
 8001184:	7019      	strb	r1, [r3, #0]

    /* USER CODE BEGIN 3 */

	  // printf("adc_1: %d adc_2: %d adc_3: %d adc_4: %d adc_5: %d\n\r",adc_buffer[0],adc_buffer[1],adc_buffer[2],adc_buffer[3],adc_buffer[4]);

	  if (mode != 0) {
 8001186:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800118a:	2b00      	cmp	r3, #0
 800118c:	d071      	beq.n	8001272 <main+0x202>
		  if (read_pixy){
 800118e:	4b6a      	ldr	r3, [pc, #424]	; (8001338 <main+0x2c8>)
 8001190:	781b      	ldrb	r3, [r3, #0]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d02c      	beq.n	80011f0 <main+0x180>
			  distance_gotten = getDist(&hspi2);
 8001196:	4869      	ldr	r0, [pc, #420]	; (800133c <main+0x2cc>)
 8001198:	f000 ff5a 	bl	8002050 <getDist>
 800119c:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88

			  if (distance_gotten != -1) {
 80011a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80011a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011a8:	d01f      	beq.n	80011ea <main+0x17a>
				  // This is distance and should be used for distance calculation
				  distance = distance * .9 + (double)distance_gotten * .1;
 80011aa:	4b65      	ldr	r3, [pc, #404]	; (8001340 <main+0x2d0>)
 80011ac:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011b0:	a34d      	add	r3, pc, #308	; (adr r3, 80012e8 <main+0x278>)
 80011b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011b6:	f7ff fa27 	bl	8000608 <__aeabi_dmul>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	4614      	mov	r4, r2
 80011c0:	461d      	mov	r5, r3
 80011c2:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80011c6:	f7ff f9b5 	bl	8000534 <__aeabi_i2d>
 80011ca:	a349      	add	r3, pc, #292	; (adr r3, 80012f0 <main+0x280>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	f7ff fa1a 	bl	8000608 <__aeabi_dmul>
 80011d4:	4602      	mov	r2, r0
 80011d6:	460b      	mov	r3, r1
 80011d8:	4620      	mov	r0, r4
 80011da:	4629      	mov	r1, r5
 80011dc:	f7ff f85e 	bl	800029c <__adddf3>
 80011e0:	4602      	mov	r2, r0
 80011e2:	460b      	mov	r3, r1
 80011e4:	4956      	ldr	r1, [pc, #344]	; (8001340 <main+0x2d0>)
 80011e6:	e9c1 2300 	strd	r2, r3, [r1]
			  }
			  read_pixy = 0;
 80011ea:	4b53      	ldr	r3, [pc, #332]	; (8001338 <main+0x2c8>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
			  //printf("distance: %d/n/r");
		  }

		  if (ref_distance != 0.0) {
 80011f0:	4b54      	ldr	r3, [pc, #336]	; (8001344 <main+0x2d4>)
 80011f2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f6:	f04f 0200 	mov.w	r2, #0
 80011fa:	f04f 0300 	mov.w	r3, #0
 80011fe:	f7ff fc6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d12f      	bne.n	8001268 <main+0x1f8>
			  thumb_pos_modified = thumb_pos + (int)floor((ref_distance - distance) / 2.9);
 8001208:	4b4e      	ldr	r3, [pc, #312]	; (8001344 <main+0x2d4>)
 800120a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800120e:	4b4c      	ldr	r3, [pc, #304]	; (8001340 <main+0x2d0>)
 8001210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001214:	f7ff f840 	bl	8000298 <__aeabi_dsub>
 8001218:	4602      	mov	r2, r0
 800121a:	460b      	mov	r3, r1
 800121c:	4610      	mov	r0, r2
 800121e:	4619      	mov	r1, r3
 8001220:	a335      	add	r3, pc, #212	; (adr r3, 80012f8 <main+0x288>)
 8001222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001226:	f7ff fb19 	bl	800085c <__aeabi_ddiv>
 800122a:	4602      	mov	r2, r0
 800122c:	460b      	mov	r3, r1
 800122e:	ec43 2b17 	vmov	d7, r2, r3
 8001232:	eeb0 0a47 	vmov.f32	s0, s14
 8001236:	eef0 0a67 	vmov.f32	s1, s15
 800123a:	f00a fc0d 	bl	800ba58 <floor>
 800123e:	ec53 2b10 	vmov	r2, r3, d0
 8001242:	4610      	mov	r0, r2
 8001244:	4619      	mov	r1, r3
 8001246:	f7ff fc8f 	bl	8000b68 <__aeabi_d2iz>
 800124a:	4603      	mov	r3, r0
 800124c:	b2da      	uxtb	r2, r3
 800124e:	4b3e      	ldr	r3, [pc, #248]	; (8001348 <main+0x2d8>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
			  if (thumb_pos_modified > 47) thumb_pos_modified = 47;
 8001258:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 800125c:	2b2f      	cmp	r3, #47	; 0x2f
 800125e:	d90c      	bls.n	800127a <main+0x20a>
 8001260:	232f      	movs	r3, #47	; 0x2f
 8001262:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8001266:	e008      	b.n	800127a <main+0x20a>
			  if (thumb_pos_modified < 0) thumb_pos_modified = 0;
			  // printf("thumb_pos_modified: %d\n\r", thumb_pos_modified);
		  } else {
			  thumb_pos_modified = thumb_pos;
 8001268:	4b37      	ldr	r3, [pc, #220]	; (8001348 <main+0x2d8>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
 8001270:	e003      	b.n	800127a <main+0x20a>
		  }

	  } else {
		  thumb_pos_modified = thumb_pos;
 8001272:	4b35      	ldr	r3, [pc, #212]	; (8001348 <main+0x2d8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f887 3092 	strb.w	r3, [r7, #146]	; 0x92
	  }
	  if (prev_thumb_pos_mod != thumb_pos_modified) display_changed = 1;
 800127a:	f897 2093 	ldrb.w	r2, [r7, #147]	; 0x93
 800127e:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001282:	429a      	cmp	r2, r3
 8001284:	d002      	beq.n	800128c <main+0x21c>
 8001286:	4b31      	ldr	r3, [pc, #196]	; (800134c <main+0x2dc>)
 8001288:	2201      	movs	r2, #1
 800128a:	701a      	strb	r2, [r3, #0]
	  prev_thumb_pos_mod = thumb_pos_modified;
 800128c:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 8001290:	f887 3093 	strb.w	r3, [r7, #147]	; 0x93

	  if (display_changed){
 8001294:	4b2d      	ldr	r3, [pc, #180]	; (800134c <main+0x2dc>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80d8 	beq.w	800144e <main+0x3de>
		  char notes_display[21] = "                    ";
 800129e:	4b2c      	ldr	r3, [pc, #176]	; (8001350 <main+0x2e0>)
 80012a0:	463c      	mov	r4, r7
 80012a2:	461d      	mov	r5, r3
 80012a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012a8:	e895 0003 	ldmia.w	r5, {r0, r1}
 80012ac:	6020      	str	r0, [r4, #0]
 80012ae:	3404      	adds	r4, #4
 80012b0:	7021      	strb	r1, [r4, #0]

		  for (uint8_t i = 0; i < 5 ; ++i){
 80012b2:	2300      	movs	r3, #0
 80012b4:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 80012b8:	e0b7      	b.n	800142a <main+0x3ba>
			  uint8_t note_val;
			  if (mode == 2) note_val = white_keys[thumb_pos_modified] + semitone_offset[i];
 80012ba:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80012be:	2b02      	cmp	r3, #2
 80012c0:	d148      	bne.n	8001354 <main+0x2e4>
 80012c2:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80012c6:	3398      	adds	r3, #152	; 0x98
 80012c8:	443b      	add	r3, r7
 80012ca:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 80012ce:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 80012d2:	3398      	adds	r3, #152	; 0x98
 80012d4:	443b      	add	r3, r7
 80012d6:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 80012da:	4413      	add	r3, r2
 80012dc:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
 80012e0:	e043      	b.n	800136a <main+0x2fa>
 80012e2:	bf00      	nop
 80012e4:	f3af 8000 	nop.w
 80012e8:	cccccccd 	.word	0xcccccccd
 80012ec:	3feccccc 	.word	0x3feccccc
 80012f0:	9999999a 	.word	0x9999999a
 80012f4:	3fb99999 	.word	0x3fb99999
 80012f8:	33333333 	.word	0x33333333
 80012fc:	40073333 	.word	0x40073333
 8001300:	20000358 	.word	0x20000358
 8001304:	200003a0 	.word	0x200003a0
 8001308:	200004b4 	.word	0x200004b4
 800130c:	20000204 	.word	0x20000204
 8001310:	200002ac 	.word	0x200002ac
 8001314:	0800bb70 	.word	0x0800bb70
 8001318:	0800bb78 	.word	0x0800bb78
 800131c:	200003e8 	.word	0x200003e8
 8001320:	0800bc40 	.word	0x0800bc40
 8001324:	0800bc48 	.word	0x0800bc48
 8001328:	0800bc7c 	.word	0x0800bc7c
 800132c:	0800bc8c 	.word	0x0800bc8c
 8001330:	0800bc9c 	.word	0x0800bc9c
 8001334:	0800bca4 	.word	0x0800bca4
 8001338:	20000504 	.word	0x20000504
 800133c:	20000300 	.word	0x20000300
 8001340:	20000510 	.word	0x20000510
 8001344:	20000508 	.word	0x20000508
 8001348:	20000003 	.word	0x20000003
 800134c:	20000004 	.word	0x20000004
 8001350:	0800bcac 	.word	0x0800bcac
			  else note_val = white_keys[thumb_pos_modified+i];
 8001354:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8001358:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800135c:	4413      	add	r3, r2
 800135e:	3398      	adds	r3, #152	; 0x98
 8001360:	443b      	add	r3, r7
 8001362:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001366:	f887 3090 	strb.w	r3, [r7, #144]	; 0x90
			  char note = key_names[(note_val + 3) % 12];
 800136a:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 800136e:	1cd9      	adds	r1, r3, #3
 8001370:	4b9e      	ldr	r3, [pc, #632]	; (80015ec <main+0x57c>)
 8001372:	fb83 2301 	smull	r2, r3, r3, r1
 8001376:	105a      	asrs	r2, r3, #1
 8001378:	17cb      	asrs	r3, r1, #31
 800137a:	1ad2      	subs	r2, r2, r3
 800137c:	4613      	mov	r3, r2
 800137e:	005b      	lsls	r3, r3, #1
 8001380:	4413      	add	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	1aca      	subs	r2, r1, r3
 8001386:	f102 0398 	add.w	r3, r2, #152	; 0x98
 800138a:	443b      	add	r3, r7
 800138c:	f813 3c60 	ldrb.w	r3, [r3, #-96]
 8001390:	f887 3085 	strb.w	r3, [r7, #133]	; 0x85
			  char number = ((note_val / 12)-1) + '0';
 8001394:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001398:	4a95      	ldr	r2, [pc, #596]	; (80015f0 <main+0x580>)
 800139a:	fba2 2303 	umull	r2, r3, r2, r3
 800139e:	08db      	lsrs	r3, r3, #3
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	332f      	adds	r3, #47	; 0x2f
 80013a4:	f887 3084 	strb.w	r3, [r7, #132]	; 0x84
			  notes_display[3*i] = note;
 80013a8:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80013ac:	4613      	mov	r3, r2
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	4413      	add	r3, r2
 80013b2:	3398      	adds	r3, #152	; 0x98
 80013b4:	443b      	add	r3, r7
 80013b6:	f897 2085 	ldrb.w	r2, [r7, #133]	; 0x85
 80013ba:	f803 2c98 	strb.w	r2, [r3, #-152]
			  notes_display[3*i+1] = number;
 80013be:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 80013c2:	4613      	mov	r3, r2
 80013c4:	005b      	lsls	r3, r3, #1
 80013c6:	4413      	add	r3, r2
 80013c8:	3301      	adds	r3, #1
 80013ca:	3398      	adds	r3, #152	; 0x98
 80013cc:	443b      	add	r3, r7
 80013ce:	f897 2084 	ldrb.w	r2, [r7, #132]	; 0x84
 80013d2:	f803 2c98 	strb.w	r2, [r3, #-152]
			  char accident = key_accidents[(note_val + 3) % 12];
 80013d6:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80013da:	1cd9      	adds	r1, r3, #3
 80013dc:	4b83      	ldr	r3, [pc, #524]	; (80015ec <main+0x57c>)
 80013de:	fb83 2301 	smull	r2, r3, r3, r1
 80013e2:	105a      	asrs	r2, r3, #1
 80013e4:	17cb      	asrs	r3, r1, #31
 80013e6:	1ad2      	subs	r2, r2, r3
 80013e8:	4613      	mov	r3, r2
 80013ea:	005b      	lsls	r3, r3, #1
 80013ec:	4413      	add	r3, r2
 80013ee:	009b      	lsls	r3, r3, #2
 80013f0:	1aca      	subs	r2, r1, r3
 80013f2:	f102 0398 	add.w	r3, r2, #152	; 0x98
 80013f6:	443b      	add	r3, r7
 80013f8:	f813 3c70 	ldrb.w	r3, [r3, #-112]
 80013fc:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83
			  if (accident == '#') notes_display[3*i+1] = accident;
 8001400:	f897 3083 	ldrb.w	r3, [r7, #131]	; 0x83
 8001404:	2b23      	cmp	r3, #35	; 0x23
 8001406:	d10b      	bne.n	8001420 <main+0x3b0>
 8001408:	f897 2091 	ldrb.w	r2, [r7, #145]	; 0x91
 800140c:	4613      	mov	r3, r2
 800140e:	005b      	lsls	r3, r3, #1
 8001410:	4413      	add	r3, r2
 8001412:	3301      	adds	r3, #1
 8001414:	3398      	adds	r3, #152	; 0x98
 8001416:	443b      	add	r3, r7
 8001418:	f897 2083 	ldrb.w	r2, [r7, #131]	; 0x83
 800141c:	f803 2c98 	strb.w	r2, [r3, #-152]
		  for (uint8_t i = 0; i < 5 ; ++i){
 8001420:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 8001424:	3301      	adds	r3, #1
 8001426:	f887 3091 	strb.w	r3, [r7, #145]	; 0x91
 800142a:	f897 3091 	ldrb.w	r3, [r7, #145]	; 0x91
 800142e:	2b04      	cmp	r3, #4
 8001430:	f67f af43 	bls.w	80012ba <main+0x24a>
		  }

		  lcd_set_pos(&hi2c1, 0, 0);
 8001434:	2200      	movs	r2, #0
 8001436:	2100      	movs	r1, #0
 8001438:	486e      	ldr	r0, [pc, #440]	; (80015f4 <main+0x584>)
 800143a:	f7ff fdfd 	bl	8001038 <lcd_set_pos>
		  lcd_send_string(&hi2c1, notes_display);
 800143e:	463b      	mov	r3, r7
 8001440:	4619      	mov	r1, r3
 8001442:	486c      	ldr	r0, [pc, #432]	; (80015f4 <main+0x584>)
 8001444:	f7ff fdb6 	bl	8000fb4 <lcd_send_string>

		  display_changed = 0;
 8001448:	4b6b      	ldr	r3, [pc, #428]	; (80015f8 <main+0x588>)
 800144a:	2200      	movs	r2, #0
 800144c:	701a      	strb	r2, [r3, #0]
	  }

	  // check button 3, change instrument if pressed
	  PB5_curr = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_5);
 800144e:	2120      	movs	r1, #32
 8001450:	486a      	ldr	r0, [pc, #424]	; (80015fc <main+0x58c>)
 8001452:	f002 fed1 	bl	80041f8 <HAL_GPIO_ReadPin>
 8001456:	4603      	mov	r3, r0
 8001458:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87
	  if (PB5_curr && !PB5_prev) {
 800145c:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 8001460:	2b00      	cmp	r3, #0
 8001462:	d048      	beq.n	80014f6 <main+0x486>
 8001464:	f897 3095 	ldrb.w	r3, [r7, #149]	; 0x95
 8001468:	2b00      	cmp	r3, #0
 800146a:	d144      	bne.n	80014f6 <main+0x486>
		  instrument++;
 800146c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001470:	3301      	adds	r3, #1
 8001472:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		  if (instrument > 4) instrument = 0;
 8001476:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 800147a:	2b04      	cmp	r3, #4
 800147c:	d902      	bls.n	8001484 <main+0x414>
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
		  // send MIDI command
		  changeInstrument(&huart1, instrument_programs[instrument]);
 8001484:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8001488:	3398      	adds	r3, #152	; 0x98
 800148a:	443b      	add	r3, r7
 800148c:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8001490:	4619      	mov	r1, r3
 8001492:	485b      	ldr	r0, [pc, #364]	; (8001600 <main+0x590>)
 8001494:	f000 fdc6 	bl	8002024 <changeInstrument>
		  // display new instrument
		  lcd_set_pos(&hi2c1, 1, 0);
 8001498:	2200      	movs	r2, #0
 800149a:	2101      	movs	r1, #1
 800149c:	4855      	ldr	r0, [pc, #340]	; (80015f4 <main+0x584>)
 800149e:	f7ff fdcb 	bl	8001038 <lcd_set_pos>
		  switch (instrument) {
 80014a2:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 80014a6:	2b04      	cmp	r3, #4
 80014a8:	d826      	bhi.n	80014f8 <main+0x488>
 80014aa:	a201      	add	r2, pc, #4	; (adr r2, 80014b0 <main+0x440>)
 80014ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014b0:	080014c5 	.word	0x080014c5
 80014b4:	080014cf 	.word	0x080014cf
 80014b8:	080014d9 	.word	0x080014d9
 80014bc:	080014e3 	.word	0x080014e3
 80014c0:	080014ed 	.word	0x080014ed
		  case 0:
			  lcd_send_string(&hi2c1, "PIANO  ");
 80014c4:	494f      	ldr	r1, [pc, #316]	; (8001604 <main+0x594>)
 80014c6:	484b      	ldr	r0, [pc, #300]	; (80015f4 <main+0x584>)
 80014c8:	f7ff fd74 	bl	8000fb4 <lcd_send_string>
			  break;
 80014cc:	e014      	b.n	80014f8 <main+0x488>
		  case 1:
			  lcd_send_string(&hi2c1, "GUITAR ");
 80014ce:	494e      	ldr	r1, [pc, #312]	; (8001608 <main+0x598>)
 80014d0:	4848      	ldr	r0, [pc, #288]	; (80015f4 <main+0x584>)
 80014d2:	f7ff fd6f 	bl	8000fb4 <lcd_send_string>
			  break;
 80014d6:	e00f      	b.n	80014f8 <main+0x488>
		  case 2:
			  lcd_send_string(&hi2c1, "VIOLIN");
 80014d8:	494c      	ldr	r1, [pc, #304]	; (800160c <main+0x59c>)
 80014da:	4846      	ldr	r0, [pc, #280]	; (80015f4 <main+0x584>)
 80014dc:	f7ff fd6a 	bl	8000fb4 <lcd_send_string>
			  break;
 80014e0:	e00a      	b.n	80014f8 <main+0x488>
		  case 3:
			  lcd_send_string(&hi2c1, "TRUMPET");
 80014e2:	494b      	ldr	r1, [pc, #300]	; (8001610 <main+0x5a0>)
 80014e4:	4843      	ldr	r0, [pc, #268]	; (80015f4 <main+0x584>)
 80014e6:	f7ff fd65 	bl	8000fb4 <lcd_send_string>
			  break;
 80014ea:	e005      	b.n	80014f8 <main+0x488>
		  case 4:
			  lcd_send_string(&hi2c1, "FLUTE  ");
 80014ec:	4949      	ldr	r1, [pc, #292]	; (8001614 <main+0x5a4>)
 80014ee:	4841      	ldr	r0, [pc, #260]	; (80015f4 <main+0x584>)
 80014f0:	f7ff fd60 	bl	8000fb4 <lcd_send_string>
			  break;
 80014f4:	e000      	b.n	80014f8 <main+0x488>
		  }
	  }
 80014f6:	bf00      	nop
	  PB5_prev = PB5_curr;
 80014f8:	f897 3087 	ldrb.w	r3, [r7, #135]	; 0x87
 80014fc:	f887 3095 	strb.w	r3, [r7, #149]	; 0x95

	  PB10_curr = HAL_GPIO_ReadPin (GPIOB, GPIO_PIN_10);
 8001500:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001504:	483d      	ldr	r0, [pc, #244]	; (80015fc <main+0x58c>)
 8001506:	f002 fe77 	bl	80041f8 <HAL_GPIO_ReadPin>
 800150a:	4603      	mov	r3, r0
 800150c:	f887 3086 	strb.w	r3, [r7, #134]	; 0x86
	  	  if (PB10_curr && !PB10_prev) {
 8001510:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 8001514:	2b00      	cmp	r3, #0
 8001516:	d05f      	beq.n	80015d8 <main+0x568>
 8001518:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 800151c:	2b00      	cmp	r3, #0
 800151e:	d15b      	bne.n	80015d8 <main+0x568>
	  		  if (mode == 0 || ref_distance != 0.0){
 8001520:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001524:	2b00      	cmp	r3, #0
 8001526:	d00b      	beq.n	8001540 <main+0x4d0>
 8001528:	4b3b      	ldr	r3, [pc, #236]	; (8001618 <main+0x5a8>)
 800152a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800152e:	f04f 0200 	mov.w	r2, #0
 8001532:	f04f 0300 	mov.w	r3, #0
 8001536:	f7ff facf 	bl	8000ad8 <__aeabi_dcmpeq>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d119      	bne.n	8001574 <main+0x504>
	  			  mode++;
 8001540:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001544:	3301      	adds	r3, #1
 8001546:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	  			  if (mode > 2) mode = 0;
 800154a:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800154e:	2b02      	cmp	r3, #2
 8001550:	d902      	bls.n	8001558 <main+0x4e8>
 8001552:	2300      	movs	r3, #0
 8001554:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
	  			  printf("mode: %d\r\n", mode);
 8001558:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 800155c:	4619      	mov	r1, r3
 800155e:	482f      	ldr	r0, [pc, #188]	; (800161c <main+0x5ac>)
 8001560:	f008 f9b6 	bl	80098d0 <iprintf>
	  			  ref_distance = 0;
 8001564:	492c      	ldr	r1, [pc, #176]	; (8001618 <main+0x5a8>)
 8001566:	f04f 0200 	mov.w	r2, #0
 800156a:	f04f 0300 	mov.w	r3, #0
 800156e:	e9c1 2300 	strd	r2, r3, [r1]
 8001572:	e012      	b.n	800159a <main+0x52a>
	  		  }
	  		  else {
	  			ref_distance = distance + 1.5;
 8001574:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <main+0x5b0>)
 8001576:	e9d3 0100 	ldrd	r0, r1, [r3]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b29      	ldr	r3, [pc, #164]	; (8001624 <main+0x5b4>)
 8001580:	f7fe fe8c 	bl	800029c <__adddf3>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	4923      	ldr	r1, [pc, #140]	; (8001618 <main+0x5a8>)
 800158a:	e9c1 2300 	strd	r2, r3, [r1]
	  			printf("ref distance: %f\n\r", ref_distance);
 800158e:	4b22      	ldr	r3, [pc, #136]	; (8001618 <main+0x5a8>)
 8001590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001594:	4824      	ldr	r0, [pc, #144]	; (8001628 <main+0x5b8>)
 8001596:	f008 f99b 	bl	80098d0 <iprintf>
	  		  }

	  		  // print mode information
	  		  lcd_set_pos(&hi2c1, 1, 8);
 800159a:	2208      	movs	r2, #8
 800159c:	2101      	movs	r1, #1
 800159e:	4815      	ldr	r0, [pc, #84]	; (80015f4 <main+0x584>)
 80015a0:	f7ff fd4a 	bl	8001038 <lcd_set_pos>
	  		  switch (mode) {
 80015a4:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d010      	beq.n	80015ce <main+0x55e>
 80015ac:	2b02      	cmp	r3, #2
 80015ae:	dc14      	bgt.n	80015da <main+0x56a>
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d002      	beq.n	80015ba <main+0x54a>
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	d005      	beq.n	80015c4 <main+0x554>
 80015b8:	e00f      	b.n	80015da <main+0x56a>
	  		  case 0:
	  			  lcd_send_string(&hi2c1, "     ");
 80015ba:	491c      	ldr	r1, [pc, #112]	; (800162c <main+0x5bc>)
 80015bc:	480d      	ldr	r0, [pc, #52]	; (80015f4 <main+0x584>)
 80015be:	f7ff fcf9 	bl	8000fb4 <lcd_send_string>
	  			  break;
 80015c2:	e00a      	b.n	80015da <main+0x56a>
	  		  case 1:
	  			  lcd_send_string(&hi2c1, "FULL ");
 80015c4:	491a      	ldr	r1, [pc, #104]	; (8001630 <main+0x5c0>)
 80015c6:	480b      	ldr	r0, [pc, #44]	; (80015f4 <main+0x584>)
 80015c8:	f7ff fcf4 	bl	8000fb4 <lcd_send_string>
	  			  break;
 80015cc:	e005      	b.n	80015da <main+0x56a>
	  		  case 2:
	  			  lcd_send_string(&hi2c1, "CHORD");
 80015ce:	4919      	ldr	r1, [pc, #100]	; (8001634 <main+0x5c4>)
 80015d0:	4808      	ldr	r0, [pc, #32]	; (80015f4 <main+0x584>)
 80015d2:	f7ff fcef 	bl	8000fb4 <lcd_send_string>
	  			  break;
 80015d6:	e000      	b.n	80015da <main+0x56a>
	  		  }
	  	  }
 80015d8:	bf00      	nop
	  	  PB10_prev = PB10_curr;
 80015da:	f897 3086 	ldrb.w	r3, [r7, #134]	; 0x86
 80015de:	f887 3094 	strb.w	r3, [r7, #148]	; 0x94

	  for (uint8_t i = 0; i < 5; ++i){
 80015e2:	2300      	movs	r3, #0
 80015e4:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80015e8:	e134      	b.n	8001854 <main+0x7e4>
 80015ea:	bf00      	nop
 80015ec:	2aaaaaab 	.word	0x2aaaaaab
 80015f0:	aaaaaaab 	.word	0xaaaaaaab
 80015f4:	200002ac 	.word	0x200002ac
 80015f8:	20000004 	.word	0x20000004
 80015fc:	40020400 	.word	0x40020400
 8001600:	200003e8 	.word	0x200003e8
 8001604:	0800bb80 	.word	0x0800bb80
 8001608:	0800bb88 	.word	0x0800bb88
 800160c:	0800bb90 	.word	0x0800bb90
 8001610:	0800bb98 	.word	0x0800bb98
 8001614:	0800bba0 	.word	0x0800bba0
 8001618:	20000508 	.word	0x20000508
 800161c:	0800bba8 	.word	0x0800bba8
 8001620:	20000510 	.word	0x20000510
 8001624:	3ff80000 	.word	0x3ff80000
 8001628:	0800bbb4 	.word	0x0800bbb4
 800162c:	0800bbc8 	.word	0x0800bbc8
 8001630:	0800bbd0 	.word	0x0800bbd0
 8001634:	0800bbd8 	.word	0x0800bbd8
	  	if (!finger_on[i]){
 8001638:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800163c:	4a88      	ldr	r2, [pc, #544]	; (8001860 <main+0x7f0>)
 800163e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001642:	2b00      	cmp	r3, #0
 8001644:	f040 80b1 	bne.w	80017aa <main+0x73a>
	  		if (finger_count[i] >= force_samples){
 8001648:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800164c:	4a85      	ldr	r2, [pc, #532]	; (8001864 <main+0x7f4>)
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	4a85      	ldr	r2, [pc, #532]	; (8001868 <main+0x7f8>)
 8001654:	7812      	ldrb	r2, [r2, #0]
 8001656:	4293      	cmp	r3, r2
 8001658:	f0c0 80f7 	bcc.w	800184a <main+0x7da>

	  			uint8_t velocity = 31 + ((float) finger_amp[i]*96/2000.0);
 800165c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001660:	4a82      	ldr	r2, [pc, #520]	; (800186c <main+0x7fc>)
 8001662:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001666:	ee07 3a90 	vmov	s15, r3
 800166a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800166e:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8001870 <main+0x800>
 8001672:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001676:	ee17 0a90 	vmov	r0, s15
 800167a:	f7fe ff6d 	bl	8000558 <__aeabi_f2d>
 800167e:	f04f 0200 	mov.w	r2, #0
 8001682:	4b7c      	ldr	r3, [pc, #496]	; (8001874 <main+0x804>)
 8001684:	f7ff f8ea 	bl	800085c <__aeabi_ddiv>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4610      	mov	r0, r2
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	4b78      	ldr	r3, [pc, #480]	; (8001878 <main+0x808>)
 8001696:	f7fe fe01 	bl	800029c <__adddf3>
 800169a:	4602      	mov	r2, r0
 800169c:	460b      	mov	r3, r1
 800169e:	4610      	mov	r0, r2
 80016a0:	4619      	mov	r1, r3
 80016a2:	f7ff fa89 	bl	8000bb8 <__aeabi_d2uiz>
 80016a6:	4603      	mov	r3, r0
 80016a8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	  			if (i > 2) velocity = velocity * 1.2;
 80016ac:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80016b0:	2b02      	cmp	r3, #2
 80016b2:	d912      	bls.n	80016da <main+0x66a>
 80016b4:	f897 308e 	ldrb.w	r3, [r7, #142]	; 0x8e
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7fe ff3b 	bl	8000534 <__aeabi_i2d>
 80016be:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80016c2:	4b6e      	ldr	r3, [pc, #440]	; (800187c <main+0x80c>)
 80016c4:	f7fe ffa0 	bl	8000608 <__aeabi_dmul>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	4610      	mov	r0, r2
 80016ce:	4619      	mov	r1, r3
 80016d0:	f7ff fa72 	bl	8000bb8 <__aeabi_d2uiz>
 80016d4:	4603      	mov	r3, r0
 80016d6:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
	  			if (velocity > 127) velocity = 127;
 80016da:	f997 308e 	ldrsb.w	r3, [r7, #142]	; 0x8e
 80016de:	2b00      	cmp	r3, #0
 80016e0:	da02      	bge.n	80016e8 <main+0x678>
 80016e2:	237f      	movs	r3, #127	; 0x7f
 80016e4:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e

	  			uint8_t note_val;
	  			if (mode == 2) note_val = white_keys[thumb_pos_modified] + semitone_offset[i];
 80016e8:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d10f      	bne.n	8001710 <main+0x6a0>
 80016f0:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80016f4:	3398      	adds	r3, #152	; 0x98
 80016f6:	443b      	add	r3, r7
 80016f8:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 80016fc:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001700:	3398      	adds	r3, #152	; 0x98
 8001702:	443b      	add	r3, r7
 8001704:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 8001708:	4413      	add	r3, r2
 800170a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
 800170e:	e00a      	b.n	8001726 <main+0x6b6>
	  			else note_val = white_keys[thumb_pos_modified+i];
 8001710:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 8001714:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001718:	4413      	add	r3, r2
 800171a:	3398      	adds	r3, #152	; 0x98
 800171c:	443b      	add	r3, r7
 800171e:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 8001722:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d

	  			playNote(&huart1, note_val, velocity);
 8001726:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800172a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800172e:	4619      	mov	r1, r3
 8001730:	4853      	ldr	r0, [pc, #332]	; (8001880 <main+0x810>)
 8001732:	f000 fc2e 	bl	8001f92 <playNote>
	  			playNote(&huart6, note_val, velocity);
 8001736:	f897 208e 	ldrb.w	r2, [r7, #142]	; 0x8e
 800173a:	f897 308d 	ldrb.w	r3, [r7, #141]	; 0x8d
 800173e:	4619      	mov	r1, r3
 8001740:	4850      	ldr	r0, [pc, #320]	; (8001884 <main+0x814>)
 8001742:	f000 fc26 	bl	8001f92 <playNote>
	  			printf("played finger %d \n\r", i);
 8001746:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800174a:	4619      	mov	r1, r3
 800174c:	484e      	ldr	r0, [pc, #312]	; (8001888 <main+0x818>)
 800174e:	f008 f8bf 	bl	80098d0 <iprintf>
	  			printf("adc_1: %d adc_2: %d adc_3: %d adc_4: %d adc_5: %d\n\r",adc_buffer[0],adc_buffer[1],adc_buffer[2],adc_buffer[3],adc_buffer[4]);
 8001752:	4b4e      	ldr	r3, [pc, #312]	; (800188c <main+0x81c>)
 8001754:	6819      	ldr	r1, [r3, #0]
 8001756:	4b4d      	ldr	r3, [pc, #308]	; (800188c <main+0x81c>)
 8001758:	6858      	ldr	r0, [r3, #4]
 800175a:	4b4c      	ldr	r3, [pc, #304]	; (800188c <main+0x81c>)
 800175c:	689c      	ldr	r4, [r3, #8]
 800175e:	4b4b      	ldr	r3, [pc, #300]	; (800188c <main+0x81c>)
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	4a4a      	ldr	r2, [pc, #296]	; (800188c <main+0x81c>)
 8001764:	6912      	ldr	r2, [r2, #16]
 8001766:	9201      	str	r2, [sp, #4]
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	4623      	mov	r3, r4
 800176c:	4602      	mov	r2, r0
 800176e:	4848      	ldr	r0, [pc, #288]	; (8001890 <main+0x820>)
 8001770:	f008 f8ae 	bl	80098d0 <iprintf>
	  			finger_count[i] = 0;
 8001774:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001778:	4a3a      	ldr	r2, [pc, #232]	; (8001864 <main+0x7f4>)
 800177a:	2100      	movs	r1, #0
 800177c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			finger_amp[i] = 0;
 8001780:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001784:	4a39      	ldr	r2, [pc, #228]	; (800186c <main+0x7fc>)
 8001786:	2100      	movs	r1, #0
 8001788:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			finger_on[i] = 1;
 800178c:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001790:	4a33      	ldr	r2, [pc, #204]	; (8001860 <main+0x7f0>)
 8001792:	2101      	movs	r1, #1
 8001794:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			last_played[i] = note_val;
 8001798:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800179c:	3398      	adds	r3, #152	; 0x98
 800179e:	443b      	add	r3, r7
 80017a0:	f897 208d 	ldrb.w	r2, [r7, #141]	; 0x8d
 80017a4:	f803 2c80 	strb.w	r2, [r3, #-128]
 80017a8:	e04f      	b.n	800184a <main+0x7da>
	  		}
	  	}
	  	else{
	  		if (finger_count[i] >= force_samples){
 80017aa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80017ae:	4a2d      	ldr	r2, [pc, #180]	; (8001864 <main+0x7f4>)
 80017b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017b4:	4a2c      	ldr	r2, [pc, #176]	; (8001868 <main+0x7f8>)
 80017b6:	7812      	ldrb	r2, [r2, #0]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d346      	bcc.n	800184a <main+0x7da>

	  			uint8_t note_val;
				if (mode == 2) note_val = white_keys[thumb_pos_modified] + semitone_offset[i];
 80017bc:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d10f      	bne.n	80017e4 <main+0x774>
 80017c4:	f897 3092 	ldrb.w	r3, [r7, #146]	; 0x92
 80017c8:	3398      	adds	r3, #152	; 0x98
 80017ca:	443b      	add	r3, r7
 80017cc:	f813 2c50 	ldrb.w	r2, [r3, #-80]
 80017d0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80017d4:	3398      	adds	r3, #152	; 0x98
 80017d6:	443b      	add	r3, r7
 80017d8:	f813 3c78 	ldrb.w	r3, [r3, #-120]
 80017dc:	4413      	add	r3, r2
 80017de:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
 80017e2:	e00a      	b.n	80017fa <main+0x78a>
				else note_val = white_keys[thumb_pos_modified+i];
 80017e4:	f897 2092 	ldrb.w	r2, [r7, #146]	; 0x92
 80017e8:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80017ec:	4413      	add	r3, r2
 80017ee:	3398      	adds	r3, #152	; 0x98
 80017f0:	443b      	add	r3, r7
 80017f2:	f813 3c50 	ldrb.w	r3, [r3, #-80]
 80017f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82

	  			stopNote(&huart1, last_played[i], 0x40);
 80017fa:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80017fe:	3398      	adds	r3, #152	; 0x98
 8001800:	443b      	add	r3, r7
 8001802:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 8001806:	2240      	movs	r2, #64	; 0x40
 8001808:	4619      	mov	r1, r3
 800180a:	481d      	ldr	r0, [pc, #116]	; (8001880 <main+0x810>)
 800180c:	f000 fbda 	bl	8001fc4 <stopNote>
	  			stopNote(&huart6, last_played[i], 0x40);
 8001810:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001814:	3398      	adds	r3, #152	; 0x98
 8001816:	443b      	add	r3, r7
 8001818:	f813 3c80 	ldrb.w	r3, [r3, #-128]
 800181c:	2240      	movs	r2, #64	; 0x40
 800181e:	4619      	mov	r1, r3
 8001820:	4818      	ldr	r0, [pc, #96]	; (8001884 <main+0x814>)
 8001822:	f000 fbcf 	bl	8001fc4 <stopNote>
	  			printf("released finger %d \n\r", i);
 8001826:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800182a:	4619      	mov	r1, r3
 800182c:	4819      	ldr	r0, [pc, #100]	; (8001894 <main+0x824>)
 800182e:	f008 f84f 	bl	80098d0 <iprintf>
	  			finger_count[i] = 0;
 8001832:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001836:	4a0b      	ldr	r2, [pc, #44]	; (8001864 <main+0x7f4>)
 8001838:	2100      	movs	r1, #0
 800183a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  			finger_on[i] = 0;
 800183e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001842:	4a07      	ldr	r2, [pc, #28]	; (8001860 <main+0x7f0>)
 8001844:	2100      	movs	r1, #0
 8001846:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (uint8_t i = 0; i < 5; ++i){
 800184a:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800184e:	3301      	adds	r3, #1
 8001850:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8001854:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 8001858:	2b04      	cmp	r3, #4
 800185a:	f67f aeed 	bls.w	8001638 <main+0x5c8>
	  if (mode != 0) {
 800185e:	e492      	b.n	8001186 <main+0x116>
 8001860:	200004c8 	.word	0x200004c8
 8001864:	200004dc 	.word	0x200004dc
 8001868:	20000002 	.word	0x20000002
 800186c:	200004f0 	.word	0x200004f0
 8001870:	42c00000 	.word	0x42c00000
 8001874:	409f4000 	.word	0x409f4000
 8001878:	403f0000 	.word	0x403f0000
 800187c:	3ff33333 	.word	0x3ff33333
 8001880:	200003e8 	.word	0x200003e8
 8001884:	20000470 	.word	0x20000470
 8001888:	0800bbe0 	.word	0x0800bbe0
 800188c:	200004b4 	.word	0x200004b4
 8001890:	0800bbf4 	.word	0x0800bbf4
 8001894:	0800bc28 	.word	0x0800bc28

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	2230      	movs	r2, #48	; 0x30
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f007 fba0 	bl	8008fec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018bc:	2300      	movs	r3, #0
 80018be:	60bb      	str	r3, [r7, #8]
 80018c0:	4b28      	ldr	r3, [pc, #160]	; (8001964 <SystemClock_Config+0xcc>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a27      	ldr	r2, [pc, #156]	; (8001964 <SystemClock_Config+0xcc>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
 80018dc:	4b22      	ldr	r3, [pc, #136]	; (8001968 <SystemClock_Config+0xd0>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80018e4:	4a20      	ldr	r2, [pc, #128]	; (8001968 <SystemClock_Config+0xd0>)
 80018e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80018ea:	6013      	str	r3, [r2, #0]
 80018ec:	4b1e      	ldr	r3, [pc, #120]	; (8001968 <SystemClock_Config+0xd0>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018f4:	607b      	str	r3, [r7, #4]
 80018f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018f8:	2302      	movs	r3, #2
 80018fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018fc:	2301      	movs	r3, #1
 80018fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001900:	2310      	movs	r3, #16
 8001902:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001904:	2302      	movs	r3, #2
 8001906:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001908:	2300      	movs	r3, #0
 800190a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800190c:	2308      	movs	r3, #8
 800190e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001910:	2354      	movs	r3, #84	; 0x54
 8001912:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001914:	2302      	movs	r3, #2
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001918:	2307      	movs	r3, #7
 800191a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800191c:	f107 0320 	add.w	r3, r7, #32
 8001920:	4618      	mov	r0, r3
 8001922:	f004 fccf 	bl	80062c4 <HAL_RCC_OscConfig>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800192c:	f000 fb2c 	bl	8001f88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001930:	230f      	movs	r3, #15
 8001932:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001934:	2302      	movs	r3, #2
 8001936:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001938:	2300      	movs	r3, #0
 800193a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800193c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001940:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	2102      	movs	r1, #2
 800194c:	4618      	mov	r0, r3
 800194e:	f004 ff31 	bl	80067b4 <HAL_RCC_ClockConfig>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001958:	f000 fb16 	bl	8001f88 <Error_Handler>
  }
}
 800195c:	bf00      	nop
 800195e:	3750      	adds	r7, #80	; 0x50
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800
 8001968:	40007000 	.word	0x40007000

0800196c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001972:	463b      	mov	r3, r7
 8001974:	2200      	movs	r2, #0
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	605a      	str	r2, [r3, #4]
 800197a:	609a      	str	r2, [r3, #8]
 800197c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800197e:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001980:	4a3e      	ldr	r2, [pc, #248]	; (8001a7c <MX_ADC1_Init+0x110>)
 8001982:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001984:	4b3c      	ldr	r3, [pc, #240]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001986:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800198a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800198c:	4b3a      	ldr	r3, [pc, #232]	; (8001a78 <MX_ADC1_Init+0x10c>)
 800198e:	2200      	movs	r2, #0
 8001990:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001992:	4b39      	ldr	r3, [pc, #228]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001994:	2201      	movs	r2, #1
 8001996:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001998:	4b37      	ldr	r3, [pc, #220]	; (8001a78 <MX_ADC1_Init+0x10c>)
 800199a:	2200      	movs	r2, #0
 800199c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800199e:	4b36      	ldr	r3, [pc, #216]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80019a6:	4b34      	ldr	r3, [pc, #208]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80019ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 80019ae:	4b32      	ldr	r3, [pc, #200]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019b0:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019b4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019b6:	4b30      	ldr	r3, [pc, #192]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80019bc:	4b2e      	ldr	r3, [pc, #184]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019be:	2205      	movs	r2, #5
 80019c0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80019c2:	4b2d      	ldr	r3, [pc, #180]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019c4:	2201      	movs	r2, #1
 80019c6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80019ca:	4b2b      	ldr	r3, [pc, #172]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80019d0:	4829      	ldr	r0, [pc, #164]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019d2:	f001 f8c5 	bl	8002b60 <HAL_ADC_Init>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 80019dc:	f000 fad4 	bl	8001f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80019e0:	2304      	movs	r3, #4
 80019e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80019e4:	2301      	movs	r3, #1
 80019e6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80019e8:	2305      	movs	r3, #5
 80019ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80019ec:	463b      	mov	r3, r7
 80019ee:	4619      	mov	r1, r3
 80019f0:	4821      	ldr	r0, [pc, #132]	; (8001a78 <MX_ADC1_Init+0x10c>)
 80019f2:	f001 fb21 	bl	8003038 <HAL_ADC_ConfigChannel>
 80019f6:	4603      	mov	r3, r0
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d001      	beq.n	8001a00 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 80019fc:	f000 fac4 	bl	8001f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001a00:	2306      	movs	r3, #6
 8001a02:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001a04:	2302      	movs	r3, #2
 8001a06:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a08:	463b      	mov	r3, r7
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	481a      	ldr	r0, [pc, #104]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001a0e:	f001 fb13 	bl	8003038 <HAL_ADC_ConfigChannel>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8001a18:	f000 fab6 	bl	8001f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001a1c:	2307      	movs	r3, #7
 8001a1e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001a20:	2303      	movs	r3, #3
 8001a22:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a24:	463b      	mov	r3, r7
 8001a26:	4619      	mov	r1, r3
 8001a28:	4813      	ldr	r0, [pc, #76]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001a2a:	f001 fb05 	bl	8003038 <HAL_ADC_ConfigChannel>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_ADC1_Init+0xcc>
  {
    Error_Handler();
 8001a34:	f000 faa8 	bl	8001f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001a38:	2308      	movs	r3, #8
 8001a3a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001a3c:	2304      	movs	r3, #4
 8001a3e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a40:	463b      	mov	r3, r7
 8001a42:	4619      	mov	r1, r3
 8001a44:	480c      	ldr	r0, [pc, #48]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001a46:	f001 faf7 	bl	8003038 <HAL_ADC_ConfigChannel>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <MX_ADC1_Init+0xe8>
  {
    Error_Handler();
 8001a50:	f000 fa9a 	bl	8001f88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001a54:	2309      	movs	r3, #9
 8001a56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001a58:	2305      	movs	r3, #5
 8001a5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4805      	ldr	r0, [pc, #20]	; (8001a78 <MX_ADC1_Init+0x10c>)
 8001a62:	f001 fae9 	bl	8003038 <HAL_ADC_ConfigChannel>
 8001a66:	4603      	mov	r3, r0
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d001      	beq.n	8001a70 <MX_ADC1_Init+0x104>
  {
    Error_Handler();
 8001a6c:	f000 fa8c 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001a70:	bf00      	nop
 8001a72:	3710      	adds	r7, #16
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000204 	.word	0x20000204
 8001a7c:	40012000 	.word	0x40012000

08001a80 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a84:	4b12      	ldr	r3, [pc, #72]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a86:	4a13      	ldr	r2, [pc, #76]	; (8001ad4 <MX_I2C1_Init+0x54>)
 8001a88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001a8a:	4b11      	ldr	r3, [pc, #68]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a8c:	4a12      	ldr	r2, [pc, #72]	; (8001ad8 <MX_I2C1_Init+0x58>)
 8001a8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a90:	4b0f      	ldr	r3, [pc, #60]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a96:	4b0e      	ldr	r3, [pc, #56]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a9c:	4b0c      	ldr	r3, [pc, #48]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001a9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001aa2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001aaa:	4b09      	ldr	r3, [pc, #36]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001ab0:	4b07      	ldr	r3, [pc, #28]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001ab6:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001abc:	4804      	ldr	r0, [pc, #16]	; (8001ad0 <MX_I2C1_Init+0x50>)
 8001abe:	f002 fbf1 	bl	80042a4 <HAL_I2C_Init>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d001      	beq.n	8001acc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001ac8:	f000 fa5e 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001acc:	bf00      	nop
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	200002ac 	.word	0x200002ac
 8001ad4:	40005400 	.word	0x40005400
 8001ad8:	000186a0 	.word	0x000186a0

08001adc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ae0:	4b17      	ldr	r3, [pc, #92]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001ae2:	4a18      	ldr	r2, [pc, #96]	; (8001b44 <MX_SPI2_Init+0x68>)
 8001ae4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001ae6:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001ae8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001aec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001aee:	4b14      	ldr	r3, [pc, #80]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001af4:	4b12      	ldr	r3, [pc, #72]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8001b00:	4b0f      	ldr	r3, [pc, #60]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b02:	2201      	movs	r2, #1
 8001b04:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b08:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001b0c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001b20:	4b07      	ldr	r3, [pc, #28]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b22:	2200      	movs	r2, #0
 8001b24:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001b26:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b28:	220a      	movs	r2, #10
 8001b2a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b2c:	4804      	ldr	r0, [pc, #16]	; (8001b40 <MX_SPI2_Init+0x64>)
 8001b2e:	f005 f861 	bl	8006bf4 <HAL_SPI_Init>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b38:	f000 fa26 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b3c:	bf00      	nop
 8001b3e:	bd80      	pop	{r7, pc}
 8001b40:	20000300 	.word	0x20000300
 8001b44:	40003800 	.word	0x40003800

08001b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b08e      	sub	sp, #56	; 0x38
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	f107 0320 	add.w	r3, r7, #32
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]
 8001b64:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b66:	1d3b      	adds	r3, r7, #4
 8001b68:	2200      	movs	r2, #0
 8001b6a:	601a      	str	r2, [r3, #0]
 8001b6c:	605a      	str	r2, [r3, #4]
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	60da      	str	r2, [r3, #12]
 8001b72:	611a      	str	r2, [r3, #16]
 8001b74:	615a      	str	r2, [r3, #20]
 8001b76:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b78:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001b7a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b7e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001b82:	2253      	movs	r2, #83	; 0x53
 8001b84:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000;
 8001b8c:	4b26      	ldr	r3, [pc, #152]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001b8e:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001b92:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9a:	4b23      	ldr	r3, [pc, #140]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ba0:	4821      	ldr	r0, [pc, #132]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001ba2:	f005 fdcf 	bl	8007744 <HAL_TIM_Base_Init>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001bac:	f000 f9ec 	bl	8001f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001bb6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001bba:	4619      	mov	r1, r3
 8001bbc:	481a      	ldr	r0, [pc, #104]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001bbe:	f006 f9e1 	bl	8007f84 <HAL_TIM_ConfigClockSource>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d001      	beq.n	8001bcc <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001bc8:	f000 f9de 	bl	8001f88 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001bcc:	4816      	ldr	r0, [pc, #88]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001bce:	f005 fe08 	bl	80077e2 <HAL_TIM_PWM_Init>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001bd8:	f000 f9d6 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001bdc:	2320      	movs	r3, #32
 8001bde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001be4:	f107 0320 	add.w	r3, r7, #32
 8001be8:	4619      	mov	r1, r3
 8001bea:	480f      	ldr	r0, [pc, #60]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001bec:	f006 fd90 	bl	8008710 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001bf6:	f000 f9c7 	bl	8001f88 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfa:	2360      	movs	r3, #96	; 0x60
 8001bfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c0a:	1d3b      	adds	r3, r7, #4
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4805      	ldr	r0, [pc, #20]	; (8001c28 <MX_TIM2_Init+0xe0>)
 8001c12:	f006 f8f5 	bl	8007e00 <HAL_TIM_PWM_ConfigChannel>
 8001c16:	4603      	mov	r3, r0
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d001      	beq.n	8001c20 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001c1c:	f000 f9b4 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001c20:	bf00      	nop
 8001c22:	3738      	adds	r7, #56	; 0x38
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	20000358 	.word	0x20000358

08001c2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b086      	sub	sp, #24
 8001c30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c32:	f107 0308 	add.w	r3, r7, #8
 8001c36:	2200      	movs	r2, #0
 8001c38:	601a      	str	r2, [r3, #0]
 8001c3a:	605a      	str	r2, [r3, #4]
 8001c3c:	609a      	str	r2, [r3, #8]
 8001c3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c40:	463b      	mov	r3, r7
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]
 8001c46:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c48:	4b1d      	ldr	r3, [pc, #116]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c4a:	4a1e      	ldr	r2, [pc, #120]	; (8001cc4 <MX_TIM3_Init+0x98>)
 8001c4c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 83;
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c50:	2253      	movs	r2, #83	; 0x53
 8001c52:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c54:	4b1a      	ldr	r3, [pc, #104]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 8001c5a:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c5c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001c60:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c62:	4b17      	ldr	r3, [pc, #92]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001c68:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c6a:	2280      	movs	r2, #128	; 0x80
 8001c6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c6e:	4814      	ldr	r0, [pc, #80]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c70:	f005 fd68 	bl	8007744 <HAL_TIM_Base_Init>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001c7a:	f000 f985 	bl	8001f88 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c84:	f107 0308 	add.w	r3, r7, #8
 8001c88:	4619      	mov	r1, r3
 8001c8a:	480d      	ldr	r0, [pc, #52]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001c8c:	f006 f97a 	bl	8007f84 <HAL_TIM_ConfigClockSource>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001c96:	f000 f977 	bl	8001f88 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001ca2:	463b      	mov	r3, r7
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4806      	ldr	r0, [pc, #24]	; (8001cc0 <MX_TIM3_Init+0x94>)
 8001ca8:	f006 fd32 	bl	8008710 <HAL_TIMEx_MasterConfigSynchronization>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001cb2:	f000 f969 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001cb6:	bf00      	nop
 8001cb8:	3718      	adds	r7, #24
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200003a0 	.word	0x200003a0
 8001cc4:	40000400 	.word	0x40000400

08001cc8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ccc:	4b11      	ldr	r3, [pc, #68]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cce:	4a12      	ldr	r2, [pc, #72]	; (8001d18 <MX_USART1_UART_Init+0x50>)
 8001cd0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 8001cd2:	4b10      	ldr	r3, [pc, #64]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cd4:	f647 2212 	movw	r2, #31250	; 0x7a12
 8001cd8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cda:	4b0e      	ldr	r3, [pc, #56]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001ce0:	4b0c      	ldr	r3, [pc, #48]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ce6:	4b0b      	ldr	r3, [pc, #44]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cec:	4b09      	ldr	r3, [pc, #36]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cee:	220c      	movs	r2, #12
 8001cf0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cf2:	4b08      	ldr	r3, [pc, #32]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001cf8:	4b06      	ldr	r3, [pc, #24]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cfe:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_USART1_UART_Init+0x4c>)
 8001d00:	f006 fd88 	bl	8008814 <HAL_UART_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001d0a:	f000 f93d 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001d0e:	bf00      	nop
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	200003e8 	.word	0x200003e8
 8001d18:	40011000 	.word	0x40011000

08001d1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d20:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	; (8001d6c <MX_USART2_UART_Init+0x50>)
 8001d24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d26:	4b10      	ldr	r3, [pc, #64]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001d2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d34:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d36:	2200      	movs	r2, #0
 8001d38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d3a:	4b0b      	ldr	r3, [pc, #44]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d42:	220c      	movs	r2, #12
 8001d44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d46:	4b08      	ldr	r3, [pc, #32]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d4c:	4b06      	ldr	r3, [pc, #24]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d52:	4805      	ldr	r0, [pc, #20]	; (8001d68 <MX_USART2_UART_Init+0x4c>)
 8001d54:	f006 fd5e 	bl	8008814 <HAL_UART_Init>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d001      	beq.n	8001d62 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d5e:	f000 f913 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	2000042c 	.word	0x2000042c
 8001d6c:	40004400 	.word	0x40004400

08001d70 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001d74:	4b11      	ldr	r3, [pc, #68]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001d76:	4a12      	ldr	r2, [pc, #72]	; (8001dc0 <MX_USART6_UART_Init+0x50>)
 8001d78:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8001d7a:	4b10      	ldr	r3, [pc, #64]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001d7c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001d80:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001d82:	4b0e      	ldr	r3, [pc, #56]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001d88:	4b0c      	ldr	r3, [pc, #48]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001d8e:	4b0b      	ldr	r3, [pc, #44]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001d90:	2200      	movs	r2, #0
 8001d92:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001d94:	4b09      	ldr	r3, [pc, #36]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001d96:	220c      	movs	r2, #12
 8001d98:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d9a:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001da2:	2200      	movs	r2, #0
 8001da4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001da6:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_USART6_UART_Init+0x4c>)
 8001da8:	f006 fd34 	bl	8008814 <HAL_UART_Init>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001db2:	f000 f8e9 	bl	8001f88 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001db6:	bf00      	nop
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	20000470 	.word	0x20000470
 8001dc0:	40011400 	.word	0x40011400

08001dc4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001dca:	2300      	movs	r3, #0
 8001dcc:	607b      	str	r3, [r7, #4]
 8001dce:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <MX_DMA_Init+0x3c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	4a0b      	ldr	r2, [pc, #44]	; (8001e00 <MX_DMA_Init+0x3c>)
 8001dd4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001dd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dda:	4b09      	ldr	r3, [pc, #36]	; (8001e00 <MX_DMA_Init+0x3c>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001de2:	607b      	str	r3, [r7, #4]
 8001de4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001de6:	2200      	movs	r2, #0
 8001de8:	2100      	movs	r1, #0
 8001dea:	2038      	movs	r0, #56	; 0x38
 8001dec:	f001 fca9 	bl	8003742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001df0:	2038      	movs	r0, #56	; 0x38
 8001df2:	f001 fcc2 	bl	800377a <HAL_NVIC_EnableIRQ>

}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	40023800 	.word	0x40023800

08001e04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b08a      	sub	sp, #40	; 0x28
 8001e08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e0a:	f107 0314 	add.w	r3, r7, #20
 8001e0e:	2200      	movs	r2, #0
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	605a      	str	r2, [r3, #4]
 8001e14:	609a      	str	r2, [r3, #8]
 8001e16:	60da      	str	r2, [r3, #12]
 8001e18:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b4d      	ldr	r3, [pc, #308]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e22:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e24:	f043 0304 	orr.w	r3, r3, #4
 8001e28:	6313      	str	r3, [r2, #48]	; 0x30
 8001e2a:	4b4a      	ldr	r3, [pc, #296]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2e:	f003 0304 	and.w	r3, r3, #4
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a45      	ldr	r2, [pc, #276]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b43      	ldr	r3, [pc, #268]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60bb      	str	r3, [r7, #8]
 8001e56:	4b3f      	ldr	r3, [pc, #252]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	4a3e      	ldr	r2, [pc, #248]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e5c:	f043 0301 	orr.w	r3, r3, #1
 8001e60:	6313      	str	r3, [r2, #48]	; 0x30
 8001e62:	4b3c      	ldr	r3, [pc, #240]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60bb      	str	r3, [r7, #8]
 8001e6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	607b      	str	r3, [r7, #4]
 8001e72:	4b38      	ldr	r3, [pc, #224]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	4a37      	ldr	r2, [pc, #220]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e78:	f043 0302 	orr.w	r3, r3, #2
 8001e7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e7e:	4b35      	ldr	r3, [pc, #212]	; (8001f54 <MX_GPIO_Init+0x150>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	f003 0302 	and.w	r3, r3, #2
 8001e86:	607b      	str	r3, [r7, #4]
 8001e88:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	2120      	movs	r1, #32
 8001e8e:	4832      	ldr	r0, [pc, #200]	; (8001f58 <MX_GPIO_Init+0x154>)
 8001e90:	f002 f9ca 	bl	8004228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	482c      	ldr	r0, [pc, #176]	; (8001f5c <MX_GPIO_Init+0x158>)
 8001eac:	f002 f820 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eba:	2302      	movs	r3, #2
 8001ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4825      	ldr	r0, [pc, #148]	; (8001f5c <MX_GPIO_Init+0x158>)
 8001ec6:	f002 f813 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001eca:	2320      	movs	r3, #32
 8001ecc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001eda:	f107 0314 	add.w	r3, r7, #20
 8001ede:	4619      	mov	r1, r3
 8001ee0:	481d      	ldr	r0, [pc, #116]	; (8001f58 <MX_GPIO_Init+0x154>)
 8001ee2:	f002 f805 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_5;
 8001ee6:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8001eea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4819      	ldr	r0, [pc, #100]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001efc:	f001 fff8 	bl	8003ef0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001f00:	2310      	movs	r3, #16
 8001f02:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001f04:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001f08:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f0e:	f107 0314 	add.w	r3, r7, #20
 8001f12:	4619      	mov	r1, r3
 8001f14:	4812      	ldr	r0, [pc, #72]	; (8001f60 <MX_GPIO_Init+0x15c>)
 8001f16:	f001 ffeb 	bl	8003ef0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2006      	movs	r0, #6
 8001f20:	f001 fc0f 	bl	8003742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001f24:	2006      	movs	r0, #6
 8001f26:	f001 fc28 	bl	800377a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	2100      	movs	r1, #0
 8001f2e:	200a      	movs	r0, #10
 8001f30:	f001 fc07 	bl	8003742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001f34:	200a      	movs	r0, #10
 8001f36:	f001 fc20 	bl	800377a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	2100      	movs	r1, #0
 8001f3e:	2028      	movs	r0, #40	; 0x28
 8001f40:	f001 fbff 	bl	8003742 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f44:	2028      	movs	r0, #40	; 0x28
 8001f46:	f001 fc18 	bl	800377a <HAL_NVIC_EnableIRQ>

}
 8001f4a:	bf00      	nop
 8001f4c:	3728      	adds	r7, #40	; 0x28
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	40023800 	.word	0x40023800
 8001f58:	40020000 	.word	0x40020000
 8001f5c:	40020800 	.word	0x40020800
 8001f60:	40020400 	.word	0x40020400

08001f64 <__io_putchar>:
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
PUTCHAR_PROTOTYPE
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001f6c:	1d39      	adds	r1, r7, #4
 8001f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f72:	2201      	movs	r2, #1
 8001f74:	4803      	ldr	r0, [pc, #12]	; (8001f84 <__io_putchar+0x20>)
 8001f76:	f006 fc9a 	bl	80088ae <HAL_UART_Transmit>
  return ch;
 8001f7a:	687b      	ldr	r3, [r7, #4]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3708      	adds	r7, #8
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	2000042c 	.word	0x2000042c

08001f88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f8c:	b672      	cpsid	i
}
 8001f8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f90:	e7fe      	b.n	8001f90 <Error_Handler+0x8>

08001f92 <playNote>:



#include "midi_synth.h"

void playNote(UART_HandleTypeDef* uart, uint8_t note_value, uint8_t striking_velocity){
 8001f92:	b580      	push	{r7, lr}
 8001f94:	b084      	sub	sp, #16
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	460b      	mov	r3, r1
 8001f9c:	70fb      	strb	r3, [r7, #3]
 8001f9e:	4613      	mov	r3, r2
 8001fa0:	70bb      	strb	r3, [r7, #2]

	uint8_t midi_data[] =
 8001fa2:	2390      	movs	r3, #144	; 0x90
 8001fa4:	733b      	strb	r3, [r7, #12]
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	737b      	strb	r3, [r7, #13]
 8001faa:	78bb      	ldrb	r3, [r7, #2]
 8001fac:	73bb      	strb	r3, [r7, #14]
	{
			0x90, note_value, striking_velocity,
	};
	HAL_UART_Transmit(uart, midi_data, 3, 10);
 8001fae:	f107 010c 	add.w	r1, r7, #12
 8001fb2:	230a      	movs	r3, #10
 8001fb4:	2203      	movs	r2, #3
 8001fb6:	6878      	ldr	r0, [r7, #4]
 8001fb8:	f006 fc79 	bl	80088ae <HAL_UART_Transmit>
}
 8001fbc:	bf00      	nop
 8001fbe:	3710      	adds	r7, #16
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}

08001fc4 <stopNote>:

void stopNote(UART_HandleTypeDef* uart, uint8_t note_value, uint8_t striking_velocity){
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	70fb      	strb	r3, [r7, #3]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	70bb      	strb	r3, [r7, #2]

	uint8_t midi_data[] =
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	733b      	strb	r3, [r7, #12]
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	737b      	strb	r3, [r7, #13]
 8001fdc:	78bb      	ldrb	r3, [r7, #2]
 8001fde:	73bb      	strb	r3, [r7, #14]
	{
			0x80, note_value, striking_velocity,
	};
	HAL_UART_Transmit(uart, midi_data, 3, 10);
 8001fe0:	f107 010c 	add.w	r1, r7, #12
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	2203      	movs	r2, #3
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f006 fc60 	bl	80088ae <HAL_UART_Transmit>
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}

08001ff6 <changeVolume>:

//not working
void changeVolume(UART_HandleTypeDef *uart, uint8_t volume){
 8001ff6:	b580      	push	{r7, lr}
 8001ff8:	b084      	sub	sp, #16
 8001ffa:	af00      	add	r7, sp, #0
 8001ffc:	6078      	str	r0, [r7, #4]
 8001ffe:	460b      	mov	r3, r1
 8002000:	70fb      	strb	r3, [r7, #3]
	uint8_t midi_data[] =
 8002002:	23b0      	movs	r3, #176	; 0xb0
 8002004:	733b      	strb	r3, [r7, #12]
 8002006:	2307      	movs	r3, #7
 8002008:	737b      	strb	r3, [r7, #13]
 800200a:	78fb      	ldrb	r3, [r7, #3]
 800200c:	73bb      	strb	r3, [r7, #14]
	{
		0xB0, 0x07, volume
	};
	HAL_UART_Transmit(uart, midi_data, 3, 10);
 800200e:	f107 010c 	add.w	r1, r7, #12
 8002012:	230a      	movs	r3, #10
 8002014:	2203      	movs	r2, #3
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f006 fc49 	bl	80088ae <HAL_UART_Transmit>
}
 800201c:	bf00      	nop
 800201e:	3710      	adds	r7, #16
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}

08002024 <changeInstrument>:

void changeInstrument(UART_HandleTypeDef *uart, uint8_t instrument){
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
 800202c:	460b      	mov	r3, r1
 800202e:	70fb      	strb	r3, [r7, #3]
	uint8_t midi_data[] = {
 8002030:	23c0      	movs	r3, #192	; 0xc0
 8002032:	733b      	strb	r3, [r7, #12]
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	737b      	strb	r3, [r7, #13]
		0xC0, instrument
	};
	HAL_UART_Transmit(uart, midi_data, 2, 10);
 8002038:	f107 010c 	add.w	r1, r7, #12
 800203c:	230a      	movs	r3, #10
 800203e:	2202      	movs	r2, #2
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f006 fc34 	bl	80088ae <HAL_UART_Transmit>
}
 8002046:	bf00      	nop
 8002048:	3710      	adds	r7, #16
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
	...

08002050 <getDist>:
#include "pixy.h"
#include <math.h>



int getDist(SPI_HandleTypeDef *hspi) {
 8002050:	b580      	push	{r7, lr}
 8002052:	b08e      	sub	sp, #56	; 0x38
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
		short width_block = 0;
 8002058:	2300      	movs	r3, #0
 800205a:	86fb      	strh	r3, [r7, #54]	; 0x36
		short color_code = 0;
 800205c:	2300      	movs	r3, #0
 800205e:	86bb      	strh	r3, [r7, #52]	; 0x34
		uint8_t dataReceived[31];
		uint8_t getBlocks[] =
 8002060:	4a27      	ldr	r2, [pc, #156]	; (8002100 <getDist+0xb0>)
 8002062:	f107 030c 	add.w	r3, r7, #12
 8002066:	e892 0003 	ldmia.w	r2, {r0, r1}
 800206a:	6018      	str	r0, [r3, #0]
 800206c:	3304      	adds	r3, #4
 800206e:	8019      	strh	r1, [r3, #0]
		  2,
		  255,
		  255
		};

	  HAL_SPI_Transmit(hspi, getBlocks, 6, 10);
 8002070:	f107 010c 	add.w	r1, r7, #12
 8002074:	230a      	movs	r3, #10
 8002076:	2206      	movs	r2, #6
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f004 fe44 	bl	8006d06 <HAL_SPI_Transmit>
	  HAL_SPI_Receive(hspi, dataReceived, 29, 10);
 800207e:	f107 0114 	add.w	r1, r7, #20
 8002082:	230a      	movs	r3, #10
 8002084:	221d      	movs	r2, #29
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f004 ff79 	bl	8006f7e <HAL_SPI_Receive>

	  color_code = (dataReceived[9] << 8) + dataReceived[10];
 800208c:	7f7b      	ldrb	r3, [r7, #29]
 800208e:	b29b      	uxth	r3, r3
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	b29a      	uxth	r2, r3
 8002094:	7fbb      	ldrb	r3, [r7, #30]
 8002096:	b29b      	uxth	r3, r3
 8002098:	4413      	add	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	86bb      	strh	r3, [r7, #52]	; 0x34
	  width_block = (dataReceived[15] << 8) + dataReceived[16];
 800209e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020a2:	b29b      	uxth	r3, r3
 80020a4:	021b      	lsls	r3, r3, #8
 80020a6:	b29a      	uxth	r2, r3
 80020a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	4413      	add	r3, r2
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	86fb      	strh	r3, [r7, #54]	; 0x36

	  if (color_code == 21248) {
 80020b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80020b8:	f5b3 4fa6 	cmp.w	r3, #21248	; 0x5300
 80020bc:	d113      	bne.n	80020e6 <getDist+0x96>
		  return (7.0 * ((9409.0 * 50.0) / 7.0)) / (double)width_block;
 80020be:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80020c2:	4618      	mov	r0, r3
 80020c4:	f7fe fa36 	bl	8000534 <__aeabi_i2d>
 80020c8:	4602      	mov	r2, r0
 80020ca:	460b      	mov	r3, r1
 80020cc:	a10a      	add	r1, pc, #40	; (adr r1, 80020f8 <getDist+0xa8>)
 80020ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80020d2:	f7fe fbc3 	bl	800085c <__aeabi_ddiv>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4610      	mov	r0, r2
 80020dc:	4619      	mov	r1, r3
 80020de:	f7fe fd43 	bl	8000b68 <__aeabi_d2iz>
 80020e2:	4603      	mov	r3, r0
 80020e4:	e001      	b.n	80020ea <getDist+0x9a>
	  }
	  return -1;
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3738      	adds	r7, #56	; 0x38
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	f3af 8000 	nop.w
 80020f8:	00000000 	.word	0x00000000
 80020fc:	411cb6c8 	.word	0x411cb6c8
 8002100:	0800bcc4 	.word	0x0800bcc4

08002104 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b082      	sub	sp, #8
 8002108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	607b      	str	r3, [r7, #4]
 800210e:	4b10      	ldr	r3, [pc, #64]	; (8002150 <HAL_MspInit+0x4c>)
 8002110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002112:	4a0f      	ldr	r2, [pc, #60]	; (8002150 <HAL_MspInit+0x4c>)
 8002114:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002118:	6453      	str	r3, [r2, #68]	; 0x44
 800211a:	4b0d      	ldr	r3, [pc, #52]	; (8002150 <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002122:	607b      	str	r3, [r7, #4]
 8002124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	603b      	str	r3, [r7, #0]
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_MspInit+0x4c>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a08      	ldr	r2, [pc, #32]	; (8002150 <HAL_MspInit+0x4c>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002142:	2007      	movs	r0, #7
 8002144:	f001 faf2 	bl	800372c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002148:	bf00      	nop
 800214a:	3708      	adds	r7, #8
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}
 8002150:	40023800 	.word	0x40023800

08002154 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08a      	sub	sp, #40	; 0x28
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800215c:	f107 0314 	add.w	r3, r7, #20
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]
 8002164:	605a      	str	r2, [r3, #4]
 8002166:	609a      	str	r2, [r3, #8]
 8002168:	60da      	str	r2, [r3, #12]
 800216a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a40      	ldr	r2, [pc, #256]	; (8002274 <HAL_ADC_MspInit+0x120>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d179      	bne.n	800226a <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002176:	2300      	movs	r3, #0
 8002178:	613b      	str	r3, [r7, #16]
 800217a:	4b3f      	ldr	r3, [pc, #252]	; (8002278 <HAL_ADC_MspInit+0x124>)
 800217c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800217e:	4a3e      	ldr	r2, [pc, #248]	; (8002278 <HAL_ADC_MspInit+0x124>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002184:	6453      	str	r3, [r2, #68]	; 0x44
 8002186:	4b3c      	ldr	r3, [pc, #240]	; (8002278 <HAL_ADC_MspInit+0x124>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800218e:	613b      	str	r3, [r7, #16]
 8002190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002192:	2300      	movs	r3, #0
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	4b38      	ldr	r3, [pc, #224]	; (8002278 <HAL_ADC_MspInit+0x124>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	4a37      	ldr	r2, [pc, #220]	; (8002278 <HAL_ADC_MspInit+0x124>)
 800219c:	f043 0301 	orr.w	r3, r3, #1
 80021a0:	6313      	str	r3, [r2, #48]	; 0x30
 80021a2:	4b35      	ldr	r3, [pc, #212]	; (8002278 <HAL_ADC_MspInit+0x124>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	f003 0301 	and.w	r3, r3, #1
 80021aa:	60fb      	str	r3, [r7, #12]
 80021ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b31      	ldr	r3, [pc, #196]	; (8002278 <HAL_ADC_MspInit+0x124>)
 80021b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b6:	4a30      	ldr	r2, [pc, #192]	; (8002278 <HAL_ADC_MspInit+0x124>)
 80021b8:	f043 0302 	orr.w	r3, r3, #2
 80021bc:	6313      	str	r3, [r2, #48]	; 0x30
 80021be:	4b2e      	ldr	r3, [pc, #184]	; (8002278 <HAL_ADC_MspInit+0x124>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	f003 0302 	and.w	r3, r3, #2
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80021ca:	23d0      	movs	r3, #208	; 0xd0
 80021cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ce:	2303      	movs	r3, #3
 80021d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021d6:	f107 0314 	add.w	r3, r7, #20
 80021da:	4619      	mov	r1, r3
 80021dc:	4827      	ldr	r0, [pc, #156]	; (800227c <HAL_ADC_MspInit+0x128>)
 80021de:	f001 fe87 	bl	8003ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021e2:	2303      	movs	r3, #3
 80021e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021e6:	2303      	movs	r3, #3
 80021e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ea:	2300      	movs	r3, #0
 80021ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 0314 	add.w	r3, r7, #20
 80021f2:	4619      	mov	r1, r3
 80021f4:	4822      	ldr	r0, [pc, #136]	; (8002280 <HAL_ADC_MspInit+0x12c>)
 80021f6:	f001 fe7b 	bl	8003ef0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021fa:	4b22      	ldr	r3, [pc, #136]	; (8002284 <HAL_ADC_MspInit+0x130>)
 80021fc:	4a22      	ldr	r2, [pc, #136]	; (8002288 <HAL_ADC_MspInit+0x134>)
 80021fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8002200:	4b20      	ldr	r3, [pc, #128]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002202:	2200      	movs	r2, #0
 8002204:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002206:	4b1f      	ldr	r3, [pc, #124]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800220c:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_ADC_MspInit+0x130>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002212:	4b1c      	ldr	r3, [pc, #112]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002214:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002218:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_ADC_MspInit+0x130>)
 800221c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002220:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002224:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002228:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800222a:	4b16      	ldr	r3, [pc, #88]	; (8002284 <HAL_ADC_MspInit+0x130>)
 800222c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002230:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002232:	4b14      	ldr	r3, [pc, #80]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002238:	4b12      	ldr	r3, [pc, #72]	; (8002284 <HAL_ADC_MspInit+0x130>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800223e:	4811      	ldr	r0, [pc, #68]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002240:	f001 fab6 	bl	80037b0 <HAL_DMA_Init>
 8002244:	4603      	mov	r3, r0
 8002246:	2b00      	cmp	r3, #0
 8002248:	d001      	beq.n	800224e <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800224a:	f7ff fe9d 	bl	8001f88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	4a0c      	ldr	r2, [pc, #48]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002252:	639a      	str	r2, [r3, #56]	; 0x38
 8002254:	4a0b      	ldr	r2, [pc, #44]	; (8002284 <HAL_ADC_MspInit+0x130>)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 800225a:	2200      	movs	r2, #0
 800225c:	2100      	movs	r1, #0
 800225e:	2012      	movs	r0, #18
 8002260:	f001 fa6f 	bl	8003742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8002264:	2012      	movs	r0, #18
 8002266:	f001 fa88 	bl	800377a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800226a:	bf00      	nop
 800226c:	3728      	adds	r7, #40	; 0x28
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	40012000 	.word	0x40012000
 8002278:	40023800 	.word	0x40023800
 800227c:	40020000 	.word	0x40020000
 8002280:	40020400 	.word	0x40020400
 8002284:	2000024c 	.word	0x2000024c
 8002288:	40026410 	.word	0x40026410

0800228c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a1d      	ldr	r2, [pc, #116]	; (8002320 <HAL_I2C_MspInit+0x94>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d134      	bne.n	8002318 <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b1c      	ldr	r3, [pc, #112]	; (8002324 <HAL_I2C_MspInit+0x98>)
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	4a1b      	ldr	r2, [pc, #108]	; (8002324 <HAL_I2C_MspInit+0x98>)
 80022b8:	f043 0302 	orr.w	r3, r3, #2
 80022bc:	6313      	str	r3, [r2, #48]	; 0x30
 80022be:	4b19      	ldr	r3, [pc, #100]	; (8002324 <HAL_I2C_MspInit+0x98>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80022ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d0:	2312      	movs	r3, #18
 80022d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d4:	2300      	movs	r3, #0
 80022d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d8:	2303      	movs	r3, #3
 80022da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80022dc:	2304      	movs	r3, #4
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	4619      	mov	r1, r3
 80022e6:	4810      	ldr	r0, [pc, #64]	; (8002328 <HAL_I2C_MspInit+0x9c>)
 80022e8:	f001 fe02 	bl	8003ef0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80022ec:	2300      	movs	r3, #0
 80022ee:	60fb      	str	r3, [r7, #12]
 80022f0:	4b0c      	ldr	r3, [pc, #48]	; (8002324 <HAL_I2C_MspInit+0x98>)
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <HAL_I2C_MspInit+0x98>)
 80022f6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022fa:	6413      	str	r3, [r2, #64]	; 0x40
 80022fc:	4b09      	ldr	r3, [pc, #36]	; (8002324 <HAL_I2C_MspInit+0x98>)
 80022fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002300:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002308:	2200      	movs	r2, #0
 800230a:	2100      	movs	r1, #0
 800230c:	201f      	movs	r0, #31
 800230e:	f001 fa18 	bl	8003742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002312:	201f      	movs	r0, #31
 8002314:	f001 fa31 	bl	800377a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002318:	bf00      	nop
 800231a:	3728      	adds	r7, #40	; 0x28
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	40005400 	.word	0x40005400
 8002324:	40023800 	.word	0x40023800
 8002328:	40020400 	.word	0x40020400

0800232c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b08a      	sub	sp, #40	; 0x28
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 0314 	add.w	r3, r7, #20
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a28      	ldr	r2, [pc, #160]	; (80023ec <HAL_SPI_MspInit+0xc0>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d14a      	bne.n	80023e4 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800234e:	2300      	movs	r3, #0
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6413      	str	r3, [r2, #64]	; 0x40
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 8002360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	613b      	str	r3, [r7, #16]
 8002368:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800236a:	2300      	movs	r3, #0
 800236c:	60fb      	str	r3, [r7, #12]
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 8002370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002372:	4a1f      	ldr	r2, [pc, #124]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 8002374:	f043 0304 	orr.w	r3, r3, #4
 8002378:	6313      	str	r3, [r2, #48]	; 0x30
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f003 0304 	and.w	r3, r3, #4
 8002382:	60fb      	str	r3, [r7, #12]
 8002384:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	60bb      	str	r3, [r7, #8]
 800238a:	4b19      	ldr	r3, [pc, #100]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a18      	ldr	r2, [pc, #96]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 8002390:	f043 0302 	orr.w	r3, r3, #2
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_SPI_MspInit+0xc4>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f003 0302 	and.w	r3, r3, #2
 800239e:	60bb      	str	r3, [r7, #8]
 80023a0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023a2:	230c      	movs	r3, #12
 80023a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a6:	2302      	movs	r3, #2
 80023a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ae:	2303      	movs	r3, #3
 80023b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023b2:	2305      	movs	r3, #5
 80023b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023b6:	f107 0314 	add.w	r3, r7, #20
 80023ba:	4619      	mov	r1, r3
 80023bc:	480d      	ldr	r0, [pc, #52]	; (80023f4 <HAL_SPI_MspInit+0xc8>)
 80023be:	f001 fd97 	bl	8003ef0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80023c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023d0:	2303      	movs	r3, #3
 80023d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80023d4:	2305      	movs	r3, #5
 80023d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023d8:	f107 0314 	add.w	r3, r7, #20
 80023dc:	4619      	mov	r1, r3
 80023de:	4806      	ldr	r0, [pc, #24]	; (80023f8 <HAL_SPI_MspInit+0xcc>)
 80023e0:	f001 fd86 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80023e4:	bf00      	nop
 80023e6:	3728      	adds	r7, #40	; 0x28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40003800 	.word	0x40003800
 80023f0:	40023800 	.word	0x40023800
 80023f4:	40020800 	.word	0x40020800
 80023f8:	40020400 	.word	0x40020400

080023fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800240c:	d116      	bne.n	800243c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b1a      	ldr	r3, [pc, #104]	; (800247c <HAL_TIM_Base_MspInit+0x80>)
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	4a19      	ldr	r2, [pc, #100]	; (800247c <HAL_TIM_Base_MspInit+0x80>)
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	6413      	str	r3, [r2, #64]	; 0x40
 800241e:	4b17      	ldr	r3, [pc, #92]	; (800247c <HAL_TIM_Base_MspInit+0x80>)
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	201c      	movs	r0, #28
 8002430:	f001 f987 	bl	8003742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002434:	201c      	movs	r0, #28
 8002436:	f001 f9a0 	bl	800377a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800243a:	e01a      	b.n	8002472 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a0f      	ldr	r2, [pc, #60]	; (8002480 <HAL_TIM_Base_MspInit+0x84>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d115      	bne.n	8002472 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	60bb      	str	r3, [r7, #8]
 800244a:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_TIM_Base_MspInit+0x80>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244e:	4a0b      	ldr	r2, [pc, #44]	; (800247c <HAL_TIM_Base_MspInit+0x80>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6413      	str	r3, [r2, #64]	; 0x40
 8002456:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_TIM_Base_MspInit+0x80>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	60bb      	str	r3, [r7, #8]
 8002460:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002462:	2200      	movs	r2, #0
 8002464:	2100      	movs	r1, #0
 8002466:	201d      	movs	r0, #29
 8002468:	f001 f96b 	bl	8003742 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800246c:	201d      	movs	r0, #29
 800246e:	f001 f984 	bl	800377a <HAL_NVIC_EnableIRQ>
}
 8002472:	bf00      	nop
 8002474:	3710      	adds	r7, #16
 8002476:	46bd      	mov	sp, r7
 8002478:	bd80      	pop	{r7, pc}
 800247a:	bf00      	nop
 800247c:	40023800 	.word	0x40023800
 8002480:	40000400 	.word	0x40000400

08002484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b08e      	sub	sp, #56	; 0x38
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800248c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002490:	2200      	movs	r2, #0
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	605a      	str	r2, [r3, #4]
 8002496:	609a      	str	r2, [r3, #8]
 8002498:	60da      	str	r2, [r3, #12]
 800249a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a4b      	ldr	r2, [pc, #300]	; (80025d0 <HAL_UART_MspInit+0x14c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d12d      	bne.n	8002502 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	623b      	str	r3, [r7, #32]
 80024aa:	4b4a      	ldr	r3, [pc, #296]	; (80025d4 <HAL_UART_MspInit+0x150>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a49      	ldr	r2, [pc, #292]	; (80025d4 <HAL_UART_MspInit+0x150>)
 80024b0:	f043 0310 	orr.w	r3, r3, #16
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_UART_MspInit+0x150>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f003 0310 	and.w	r3, r3, #16
 80024be:	623b      	str	r3, [r7, #32]
 80024c0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
 80024c6:	4b43      	ldr	r3, [pc, #268]	; (80025d4 <HAL_UART_MspInit+0x150>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	4a42      	ldr	r2, [pc, #264]	; (80025d4 <HAL_UART_MspInit+0x150>)
 80024cc:	f043 0301 	orr.w	r3, r3, #1
 80024d0:	6313      	str	r3, [r2, #48]	; 0x30
 80024d2:	4b40      	ldr	r3, [pc, #256]	; (80025d4 <HAL_UART_MspInit+0x150>)
 80024d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	61fb      	str	r3, [r7, #28]
 80024dc:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80024de:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e4:	2302      	movs	r3, #2
 80024e6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80024f0:	2307      	movs	r3, #7
 80024f2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024f8:	4619      	mov	r1, r3
 80024fa:	4837      	ldr	r0, [pc, #220]	; (80025d8 <HAL_UART_MspInit+0x154>)
 80024fc:	f001 fcf8 	bl	8003ef0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002500:	e062      	b.n	80025c8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART2)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a35      	ldr	r2, [pc, #212]	; (80025dc <HAL_UART_MspInit+0x158>)
 8002508:	4293      	cmp	r3, r2
 800250a:	d12c      	bne.n	8002566 <HAL_UART_MspInit+0xe2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800250c:	2300      	movs	r3, #0
 800250e:	61bb      	str	r3, [r7, #24]
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002514:	4a2f      	ldr	r2, [pc, #188]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002516:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800251a:	6413      	str	r3, [r2, #64]	; 0x40
 800251c:	4b2d      	ldr	r3, [pc, #180]	; (80025d4 <HAL_UART_MspInit+0x150>)
 800251e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002520:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002524:	61bb      	str	r3, [r7, #24]
 8002526:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_UART_MspInit+0x150>)
 800252e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002530:	4a28      	ldr	r2, [pc, #160]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6313      	str	r3, [r2, #48]	; 0x30
 8002538:	4b26      	ldr	r3, [pc, #152]	; (80025d4 <HAL_UART_MspInit+0x150>)
 800253a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	617b      	str	r3, [r7, #20]
 8002542:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002544:	230c      	movs	r3, #12
 8002546:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002548:	2302      	movs	r3, #2
 800254a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800254c:	2300      	movs	r3, #0
 800254e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002550:	2300      	movs	r3, #0
 8002552:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002554:	2307      	movs	r3, #7
 8002556:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800255c:	4619      	mov	r1, r3
 800255e:	481e      	ldr	r0, [pc, #120]	; (80025d8 <HAL_UART_MspInit+0x154>)
 8002560:	f001 fcc6 	bl	8003ef0 <HAL_GPIO_Init>
}
 8002564:	e030      	b.n	80025c8 <HAL_UART_MspInit+0x144>
  else if(huart->Instance==USART6)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a1d      	ldr	r2, [pc, #116]	; (80025e0 <HAL_UART_MspInit+0x15c>)
 800256c:	4293      	cmp	r3, r2
 800256e:	d12b      	bne.n	80025c8 <HAL_UART_MspInit+0x144>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002570:	2300      	movs	r3, #0
 8002572:	613b      	str	r3, [r7, #16]
 8002574:	4b17      	ldr	r3, [pc, #92]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002578:	4a16      	ldr	r2, [pc, #88]	; (80025d4 <HAL_UART_MspInit+0x150>)
 800257a:	f043 0320 	orr.w	r3, r3, #32
 800257e:	6453      	str	r3, [r2, #68]	; 0x44
 8002580:	4b14      	ldr	r3, [pc, #80]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002584:	f003 0320 	and.w	r3, r3, #32
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	60fb      	str	r3, [r7, #12]
 8002590:	4b10      	ldr	r3, [pc, #64]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002594:	4a0f      	ldr	r2, [pc, #60]	; (80025d4 <HAL_UART_MspInit+0x150>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	6313      	str	r3, [r2, #48]	; 0x30
 800259c:	4b0d      	ldr	r3, [pc, #52]	; (80025d4 <HAL_UART_MspInit+0x150>)
 800259e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a0:	f003 0304 	and.w	r3, r3, #4
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80025a8:	23c0      	movs	r3, #192	; 0xc0
 80025aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80025b8:	2308      	movs	r3, #8
 80025ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025c0:	4619      	mov	r1, r3
 80025c2:	4808      	ldr	r0, [pc, #32]	; (80025e4 <HAL_UART_MspInit+0x160>)
 80025c4:	f001 fc94 	bl	8003ef0 <HAL_GPIO_Init>
}
 80025c8:	bf00      	nop
 80025ca:	3738      	adds	r7, #56	; 0x38
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40011000 	.word	0x40011000
 80025d4:	40023800 	.word	0x40023800
 80025d8:	40020000 	.word	0x40020000
 80025dc:	40004400 	.word	0x40004400
 80025e0:	40011400 	.word	0x40011400
 80025e4:	40020800 	.word	0x40020800

080025e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025ec:	e7fe      	b.n	80025ec <NMI_Handler+0x4>

080025ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025ee:	b480      	push	{r7}
 80025f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025f2:	e7fe      	b.n	80025f2 <HardFault_Handler+0x4>

080025f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025f8:	e7fe      	b.n	80025f8 <MemManage_Handler+0x4>

080025fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025fe:	e7fe      	b.n	80025fe <BusFault_Handler+0x4>

08002600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002604:	e7fe      	b.n	8002604 <UsageFault_Handler+0x4>

08002606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002606:	b480      	push	{r7}
 8002608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800260a:	bf00      	nop
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr

08002614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002626:	bf00      	nop
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr

08002630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002634:	f000 fa50 	bl	8002ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002640:	2001      	movs	r0, #1
 8002642:	f001 fe0b 	bl	800425c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  // put in down button int
  if (thumb_pos > 0) thumb_pos--;
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <EXTI0_IRQHandler+0x24>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d005      	beq.n	800265a <EXTI0_IRQHandler+0x1e>
 800264e:	4b04      	ldr	r3, [pc, #16]	; (8002660 <EXTI0_IRQHandler+0x24>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	3b01      	subs	r3, #1
 8002654:	b2da      	uxtb	r2, r3
 8002656:	4b02      	ldr	r3, [pc, #8]	; (8002660 <EXTI0_IRQHandler+0x24>)
 8002658:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI0_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	20000003 	.word	0x20000003

08002664 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8002668:	2010      	movs	r0, #16
 800266a:	f001 fdf7 	bl	800425c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */
  // put in up button int
  if (thumb_pos < 47) thumb_pos++;
 800266e:	4b06      	ldr	r3, [pc, #24]	; (8002688 <EXTI4_IRQHandler+0x24>)
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	2b2e      	cmp	r3, #46	; 0x2e
 8002674:	d805      	bhi.n	8002682 <EXTI4_IRQHandler+0x1e>
 8002676:	4b04      	ldr	r3, [pc, #16]	; (8002688 <EXTI4_IRQHandler+0x24>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	3301      	adds	r3, #1
 800267c:	b2da      	uxtb	r2, r3
 800267e:	4b02      	ldr	r3, [pc, #8]	; (8002688 <EXTI4_IRQHandler+0x24>)
 8002680:	701a      	strb	r2, [r3, #0]
  /* USER CODE END EXTI4_IRQn 1 */
}
 8002682:	bf00      	nop
 8002684:	bd80      	pop	{r7, pc}
 8002686:	bf00      	nop
 8002688:	20000003 	.word	0x20000003

0800268c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002690:	4802      	ldr	r0, [pc, #8]	; (800269c <ADC_IRQHandler+0x10>)
 8002692:	f000 faa8 	bl	8002be6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000204 	.word	0x20000204

080026a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026a4:	4802      	ldr	r0, [pc, #8]	; (80026b0 <TIM2_IRQHandler+0x10>)
 80026a6:	f005 faa3 	bl	8007bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026aa:	bf00      	nop
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	20000358 	.word	0x20000358

080026b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */
	read_pixy = 1;
 80026b8:	4b03      	ldr	r3, [pc, #12]	; (80026c8 <TIM3_IRQHandler+0x14>)
 80026ba:	2201      	movs	r2, #1
 80026bc:	701a      	strb	r2, [r3, #0]
  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026be:	4803      	ldr	r0, [pc, #12]	; (80026cc <TIM3_IRQHandler+0x18>)
 80026c0:	f005 fa96 	bl	8007bf0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026c4:	bf00      	nop
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	20000504 	.word	0x20000504
 80026cc:	200003a0 	.word	0x200003a0

080026d0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80026d4:	4802      	ldr	r0, [pc, #8]	; (80026e0 <I2C1_EV_IRQHandler+0x10>)
 80026d6:	f002 f827 	bl	8004728 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80026da:	bf00      	nop
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	200002ac 	.word	0x200002ac

080026e4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80026e8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80026ec:	f001 fdb6 	bl	800425c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80026f4:	b5b0      	push	{r4, r5, r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
//		}
//
//
//	}

	for (uint8_t i = 0; i < 5; ++i){
 80026fa:	2300      	movs	r3, #0
 80026fc:	71fb      	strb	r3, [r7, #7]
 80026fe:	e07d      	b.n	80027fc <DMA2_Stream0_IRQHandler+0x108>
		if (!finger_on[i]){
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	4a44      	ldr	r2, [pc, #272]	; (8002814 <DMA2_Stream0_IRQHandler+0x120>)
 8002704:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d143      	bne.n	8002794 <DMA2_Stream0_IRQHandler+0xa0>
			if (adc_buffer[i] > threshold || (i > 2 && adc_buffer[i] * 1.2 > threshold)){
 800270c:	79fb      	ldrb	r3, [r7, #7]
 800270e:	4a42      	ldr	r2, [pc, #264]	; (8002818 <DMA2_Stream0_IRQHandler+0x124>)
 8002710:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002714:	4a41      	ldr	r2, [pc, #260]	; (800281c <DMA2_Stream0_IRQHandler+0x128>)
 8002716:	8812      	ldrh	r2, [r2, #0]
 8002718:	4293      	cmp	r3, r2
 800271a:	d820      	bhi.n	800275e <DMA2_Stream0_IRQHandler+0x6a>
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	2b02      	cmp	r3, #2
 8002720:	d969      	bls.n	80027f6 <DMA2_Stream0_IRQHandler+0x102>
 8002722:	79fb      	ldrb	r3, [r7, #7]
 8002724:	4a3c      	ldr	r2, [pc, #240]	; (8002818 <DMA2_Stream0_IRQHandler+0x124>)
 8002726:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272a:	4618      	mov	r0, r3
 800272c:	f7fd fef2 	bl	8000514 <__aeabi_ui2d>
 8002730:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 8002734:	4b3a      	ldr	r3, [pc, #232]	; (8002820 <DMA2_Stream0_IRQHandler+0x12c>)
 8002736:	f7fd ff67 	bl	8000608 <__aeabi_dmul>
 800273a:	4602      	mov	r2, r0
 800273c:	460b      	mov	r3, r1
 800273e:	4614      	mov	r4, r2
 8002740:	461d      	mov	r5, r3
 8002742:	4b36      	ldr	r3, [pc, #216]	; (800281c <DMA2_Stream0_IRQHandler+0x128>)
 8002744:	881b      	ldrh	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7fd fef4 	bl	8000534 <__aeabi_i2d>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4620      	mov	r0, r4
 8002752:	4629      	mov	r1, r5
 8002754:	f7fe f9e8 	bl	8000b28 <__aeabi_dcmpgt>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d04b      	beq.n	80027f6 <DMA2_Stream0_IRQHandler+0x102>
				++finger_count[i];
 800275e:	79fb      	ldrb	r3, [r7, #7]
 8002760:	4a30      	ldr	r2, [pc, #192]	; (8002824 <DMA2_Stream0_IRQHandler+0x130>)
 8002762:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002766:	3201      	adds	r2, #1
 8002768:	492e      	ldr	r1, [pc, #184]	; (8002824 <DMA2_Stream0_IRQHandler+0x130>)
 800276a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				if (adc_buffer[i] > finger_amp[i]) finger_amp[i] = adc_buffer[i];
 800276e:	79fb      	ldrb	r3, [r7, #7]
 8002770:	4a29      	ldr	r2, [pc, #164]	; (8002818 <DMA2_Stream0_IRQHandler+0x124>)
 8002772:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002776:	79fb      	ldrb	r3, [r7, #7]
 8002778:	492b      	ldr	r1, [pc, #172]	; (8002828 <DMA2_Stream0_IRQHandler+0x134>)
 800277a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800277e:	429a      	cmp	r2, r3
 8002780:	d939      	bls.n	80027f6 <DMA2_Stream0_IRQHandler+0x102>
 8002782:	79fa      	ldrb	r2, [r7, #7]
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	4924      	ldr	r1, [pc, #144]	; (8002818 <DMA2_Stream0_IRQHandler+0x124>)
 8002788:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800278c:	4926      	ldr	r1, [pc, #152]	; (8002828 <DMA2_Stream0_IRQHandler+0x134>)
 800278e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8002792:	e030      	b.n	80027f6 <DMA2_Stream0_IRQHandler+0x102>
			}
		}
		else{
			if (adc_buffer[i] <= threshold || (i > 2 && adc_buffer[i] * 1.2 <= threshold)){
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	4a20      	ldr	r2, [pc, #128]	; (8002818 <DMA2_Stream0_IRQHandler+0x124>)
 8002798:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800279c:	4a1f      	ldr	r2, [pc, #124]	; (800281c <DMA2_Stream0_IRQHandler+0x128>)
 800279e:	8812      	ldrh	r2, [r2, #0]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d920      	bls.n	80027e6 <DMA2_Stream0_IRQHandler+0xf2>
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d925      	bls.n	80027f6 <DMA2_Stream0_IRQHandler+0x102>
 80027aa:	79fb      	ldrb	r3, [r7, #7]
 80027ac:	4a1a      	ldr	r2, [pc, #104]	; (8002818 <DMA2_Stream0_IRQHandler+0x124>)
 80027ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd feae 	bl	8000514 <__aeabi_ui2d>
 80027b8:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 80027bc:	4b18      	ldr	r3, [pc, #96]	; (8002820 <DMA2_Stream0_IRQHandler+0x12c>)
 80027be:	f7fd ff23 	bl	8000608 <__aeabi_dmul>
 80027c2:	4602      	mov	r2, r0
 80027c4:	460b      	mov	r3, r1
 80027c6:	4614      	mov	r4, r2
 80027c8:	461d      	mov	r5, r3
 80027ca:	4b14      	ldr	r3, [pc, #80]	; (800281c <DMA2_Stream0_IRQHandler+0x128>)
 80027cc:	881b      	ldrh	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7fd feb0 	bl	8000534 <__aeabi_i2d>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4620      	mov	r0, r4
 80027da:	4629      	mov	r1, r5
 80027dc:	f7fe f990 	bl	8000b00 <__aeabi_dcmple>
 80027e0:	4603      	mov	r3, r0
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <DMA2_Stream0_IRQHandler+0x102>
				++finger_count[i];
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <DMA2_Stream0_IRQHandler+0x130>)
 80027ea:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80027ee:	3201      	adds	r2, #1
 80027f0:	490c      	ldr	r1, [pc, #48]	; (8002824 <DMA2_Stream0_IRQHandler+0x130>)
 80027f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (uint8_t i = 0; i < 5; ++i){
 80027f6:	79fb      	ldrb	r3, [r7, #7]
 80027f8:	3301      	adds	r3, #1
 80027fa:	71fb      	strb	r3, [r7, #7]
 80027fc:	79fb      	ldrb	r3, [r7, #7]
 80027fe:	2b04      	cmp	r3, #4
 8002800:	f67f af7e 	bls.w	8002700 <DMA2_Stream0_IRQHandler+0xc>
			}
		}
	}
  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002804:	4809      	ldr	r0, [pc, #36]	; (800282c <DMA2_Stream0_IRQHandler+0x138>)
 8002806:	f001 f8fb 	bl	8003a00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800280a:	bf00      	nop
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bdb0      	pop	{r4, r5, r7, pc}
 8002812:	bf00      	nop
 8002814:	200004c8 	.word	0x200004c8
 8002818:	200004b4 	.word	0x200004b4
 800281c:	20000000 	.word	0x20000000
 8002820:	3ff33333 	.word	0x3ff33333
 8002824:	200004dc 	.word	0x200004dc
 8002828:	200004f0 	.word	0x200004f0
 800282c:	2000024c 	.word	0x2000024c

08002830 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002830:	b480      	push	{r7}
 8002832:	af00      	add	r7, sp, #0
	return 1;
 8002834:	2301      	movs	r3, #1
}
 8002836:	4618      	mov	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <_kill>:

int _kill(int pid, int sig)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800284a:	f006 fba5 	bl	8008f98 <__errno>
 800284e:	4603      	mov	r3, r0
 8002850:	2216      	movs	r2, #22
 8002852:	601a      	str	r2, [r3, #0]
	return -1;
 8002854:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <_exit>:

void _exit (int status)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002868:	f04f 31ff 	mov.w	r1, #4294967295
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ffe7 	bl	8002840 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002872:	e7fe      	b.n	8002872 <_exit+0x12>

08002874 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	60b9      	str	r1, [r7, #8]
 800287e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002880:	2300      	movs	r3, #0
 8002882:	617b      	str	r3, [r7, #20]
 8002884:	e00a      	b.n	800289c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002886:	f3af 8000 	nop.w
 800288a:	4601      	mov	r1, r0
 800288c:	68bb      	ldr	r3, [r7, #8]
 800288e:	1c5a      	adds	r2, r3, #1
 8002890:	60ba      	str	r2, [r7, #8]
 8002892:	b2ca      	uxtb	r2, r1
 8002894:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	3301      	adds	r3, #1
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	429a      	cmp	r2, r3
 80028a2:	dbf0      	blt.n	8002886 <_read+0x12>
	}

return len;
 80028a4:	687b      	ldr	r3, [r7, #4]
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3718      	adds	r7, #24
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}

080028ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80028ae:	b580      	push	{r7, lr}
 80028b0:	b086      	sub	sp, #24
 80028b2:	af00      	add	r7, sp, #0
 80028b4:	60f8      	str	r0, [r7, #12]
 80028b6:	60b9      	str	r1, [r7, #8]
 80028b8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ba:	2300      	movs	r3, #0
 80028bc:	617b      	str	r3, [r7, #20]
 80028be:	e009      	b.n	80028d4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	1c5a      	adds	r2, r3, #1
 80028c4:	60ba      	str	r2, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff fb4b 	bl	8001f64 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	3301      	adds	r3, #1
 80028d2:	617b      	str	r3, [r7, #20]
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	429a      	cmp	r2, r3
 80028da:	dbf1      	blt.n	80028c0 <_write+0x12>
	}
	return len;
 80028dc:	687b      	ldr	r3, [r7, #4]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}

080028e6 <_close>:

int _close(int file)
{
 80028e6:	b480      	push	{r7}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
	return -1;
 80028ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fc:	4770      	bx	lr

080028fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80028fe:	b480      	push	{r7}
 8002900:	b083      	sub	sp, #12
 8002902:	af00      	add	r7, sp, #0
 8002904:	6078      	str	r0, [r7, #4]
 8002906:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800290e:	605a      	str	r2, [r3, #4]
	return 0;
 8002910:	2300      	movs	r3, #0
}
 8002912:	4618      	mov	r0, r3
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <_isatty>:

int _isatty(int file)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
	return 1;
 8002926:	2301      	movs	r3, #1
}
 8002928:	4618      	mov	r0, r3
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002934:	b480      	push	{r7}
 8002936:	b085      	sub	sp, #20
 8002938:	af00      	add	r7, sp, #0
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
	return 0;
 8002940:	2300      	movs	r3, #0
}
 8002942:	4618      	mov	r0, r3
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
	...

08002950 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002950:	b580      	push	{r7, lr}
 8002952:	b086      	sub	sp, #24
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002958:	4a14      	ldr	r2, [pc, #80]	; (80029ac <_sbrk+0x5c>)
 800295a:	4b15      	ldr	r3, [pc, #84]	; (80029b0 <_sbrk+0x60>)
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002964:	4b13      	ldr	r3, [pc, #76]	; (80029b4 <_sbrk+0x64>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d102      	bne.n	8002972 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <_sbrk+0x64>)
 800296e:	4a12      	ldr	r2, [pc, #72]	; (80029b8 <_sbrk+0x68>)
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002972:	4b10      	ldr	r3, [pc, #64]	; (80029b4 <_sbrk+0x64>)
 8002974:	681a      	ldr	r2, [r3, #0]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4413      	add	r3, r2
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	429a      	cmp	r2, r3
 800297e:	d207      	bcs.n	8002990 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002980:	f006 fb0a 	bl	8008f98 <__errno>
 8002984:	4603      	mov	r3, r0
 8002986:	220c      	movs	r2, #12
 8002988:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	e009      	b.n	80029a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002990:	4b08      	ldr	r3, [pc, #32]	; (80029b4 <_sbrk+0x64>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002996:	4b07      	ldr	r3, [pc, #28]	; (80029b4 <_sbrk+0x64>)
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	4413      	add	r3, r2
 800299e:	4a05      	ldr	r2, [pc, #20]	; (80029b4 <_sbrk+0x64>)
 80029a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a2:	68fb      	ldr	r3, [r7, #12]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	3718      	adds	r7, #24
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	20018000 	.word	0x20018000
 80029b0:	00000400 	.word	0x00000400
 80029b4:	20000518 	.word	0x20000518
 80029b8:	20000530 	.word	0x20000530

080029bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <SystemInit+0x20>)
 80029c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <SystemInit+0x20>)
 80029c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80029cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	e000ed00 	.word	0xe000ed00

080029e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80029e0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002a18 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80029e4:	480d      	ldr	r0, [pc, #52]	; (8002a1c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80029e6:	490e      	ldr	r1, [pc, #56]	; (8002a20 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80029e8:	4a0e      	ldr	r2, [pc, #56]	; (8002a24 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80029ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029ec:	e002      	b.n	80029f4 <LoopCopyDataInit>

080029ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029f2:	3304      	adds	r3, #4

080029f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029f8:	d3f9      	bcc.n	80029ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029fa:	4a0b      	ldr	r2, [pc, #44]	; (8002a28 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80029fc:	4c0b      	ldr	r4, [pc, #44]	; (8002a2c <LoopFillZerobss+0x26>)
  movs r3, #0
 80029fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a00:	e001      	b.n	8002a06 <LoopFillZerobss>

08002a02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a04:	3204      	adds	r2, #4

08002a06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a08:	d3fb      	bcc.n	8002a02 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002a0a:	f7ff ffd7 	bl	80029bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002a0e:	f006 fac9 	bl	8008fa4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a12:	f7fe fb2d 	bl	8001070 <main>
  bx  lr    
 8002a16:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002a18:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a20:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002a24:	0800c0d4 	.word	0x0800c0d4
  ldr r2, =_sbss
 8002a28:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002a2c:	20000530 	.word	0x20000530

08002a30 <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a30:	e7fe      	b.n	8002a30 <DMA1_Stream0_IRQHandler>
	...

08002a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a38:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <HAL_Init+0x40>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a0d      	ldr	r2, [pc, #52]	; (8002a74 <HAL_Init+0x40>)
 8002a3e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002a42:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_Init+0x40>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_Init+0x40>)
 8002a4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a4e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002a50:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <HAL_Init+0x40>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <HAL_Init+0x40>)
 8002a56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a5a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002a5c:	2003      	movs	r0, #3
 8002a5e:	f000 fe65 	bl	800372c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002a62:	2000      	movs	r0, #0
 8002a64:	f000 f808 	bl	8002a78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002a68:	f7ff fb4c 	bl	8002104 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002a6c:	2300      	movs	r3, #0
}
 8002a6e:	4618      	mov	r0, r3
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	40023c00 	.word	0x40023c00

08002a78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002a80:	4b12      	ldr	r3, [pc, #72]	; (8002acc <HAL_InitTick+0x54>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_InitTick+0x58>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	4619      	mov	r1, r3
 8002a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a96:	4618      	mov	r0, r3
 8002a98:	f000 fe7d 	bl	8003796 <HAL_SYSTICK_Config>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e00e      	b.n	8002ac4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2b0f      	cmp	r3, #15
 8002aaa:	d80a      	bhi.n	8002ac2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002aac:	2200      	movs	r2, #0
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab4:	f000 fe45 	bl	8003742 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ab8:	4a06      	ldr	r2, [pc, #24]	; (8002ad4 <HAL_InitTick+0x5c>)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	e000      	b.n	8002ac4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000008 	.word	0x20000008
 8002ad0:	20000010 	.word	0x20000010
 8002ad4:	2000000c 	.word	0x2000000c

08002ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ad8:	b480      	push	{r7}
 8002ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_IncTick+0x20>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	461a      	mov	r2, r3
 8002ae2:	4b06      	ldr	r3, [pc, #24]	; (8002afc <HAL_IncTick+0x24>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	4a04      	ldr	r2, [pc, #16]	; (8002afc <HAL_IncTick+0x24>)
 8002aea:	6013      	str	r3, [r2, #0]
}
 8002aec:	bf00      	nop
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr
 8002af6:	bf00      	nop
 8002af8:	20000010 	.word	0x20000010
 8002afc:	2000051c 	.word	0x2000051c

08002b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_GetTick+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	2000051c 	.word	0x2000051c

08002b18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b084      	sub	sp, #16
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b20:	f7ff ffee 	bl	8002b00 <HAL_GetTick>
 8002b24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b30:	d005      	beq.n	8002b3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b32:	4b0a      	ldr	r3, [pc, #40]	; (8002b5c <HAL_Delay+0x44>)
 8002b34:	781b      	ldrb	r3, [r3, #0]
 8002b36:	461a      	mov	r2, r3
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	4413      	add	r3, r2
 8002b3c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b3e:	bf00      	nop
 8002b40:	f7ff ffde 	bl	8002b00 <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	68fa      	ldr	r2, [r7, #12]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d8f7      	bhi.n	8002b40 <HAL_Delay+0x28>
  {
  }
}
 8002b50:	bf00      	nop
 8002b52:	bf00      	nop
 8002b54:	3710      	adds	r7, #16
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	20000010 	.word	0x20000010

08002b60 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b084      	sub	sp, #16
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002b68:	2300      	movs	r3, #0
 8002b6a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d101      	bne.n	8002b76 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002b72:	2301      	movs	r3, #1
 8002b74:	e033      	b.n	8002bde <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d109      	bne.n	8002b92 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7ff fae8 	bl	8002154 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2200      	movs	r2, #0
 8002b88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b96:	f003 0310 	and.w	r3, r3, #16
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d118      	bne.n	8002bd0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ba2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ba6:	f023 0302 	bic.w	r3, r3, #2
 8002baa:	f043 0202 	orr.w	r2, r3, #2
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f000 fb62 	bl	800327c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	f023 0303 	bic.w	r3, r3, #3
 8002bc6:	f043 0201 	orr.w	r2, r3, #1
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8002bce:	e001      	b.n	8002bd4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002bd0:	2301      	movs	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b086      	sub	sp, #24
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d049      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0xca>
 8002c1c:	693b      	ldr	r3, [r7, #16]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d046      	beq.n	8002cb0 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	f003 0310 	and.w	r3, r3, #16
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d105      	bne.n	8002c3a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d12b      	bne.n	8002ca0 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d127      	bne.n	8002ca0 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c56:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d006      	beq.n	8002c6c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d119      	bne.n	8002ca0 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0220 	bic.w	r2, r2, #32
 8002c7a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c80:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d105      	bne.n	8002ca0 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	f043 0201 	orr.w	r2, r3, #1
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 f9a1 	bl	8002fe8 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f06f 0212 	mvn.w	r2, #18
 8002cae:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	f003 0304 	and.w	r3, r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cbe:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d057      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x190>
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d054      	beq.n	8002d76 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	f003 0310 	and.w	r3, r3, #16
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d139      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d006      	beq.n	8002d0e <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d12b      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d124      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d11d      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d119      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	685a      	ldr	r2, [r3, #4]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d40:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d105      	bne.n	8002d66 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5e:	f043 0201 	orr.w	r2, r3, #1
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	f000 fc06 	bl	8003578 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f06f 020c 	mvn.w	r2, #12
 8002d74:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d84:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d017      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x1d6>
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d014      	beq.n	8002dbc <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 0301 	and.w	r3, r3, #1
 8002d9c:	2b01      	cmp	r3, #1
 8002d9e:	d10d      	bne.n	8002dbc <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002da4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f92f 	bl	8003010 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f06f 0201 	mvn.w	r2, #1
 8002dba:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	f003 0320 	and.w	r3, r3, #32
 8002dc2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002dca:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002dcc:	697b      	ldr	r3, [r7, #20]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d015      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x218>
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d012      	beq.n	8002dfe <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ddc:	f043 0202 	orr.w	r2, r3, #2
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0220 	mvn.w	r2, #32
 8002dec:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f918 	bl	8003024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f06f 0220 	mvn.w	r2, #32
 8002dfc:	601a      	str	r2, [r3, #0]
  }
}
 8002dfe:	bf00      	nop
 8002e00:	3718      	adds	r7, #24
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
	...

08002e08 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Start_DMA+0x1e>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0ce      	b.n	8002fc4 <HAL_ADC_Start_DMA+0x1bc>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d018      	beq.n	8002e6e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	689a      	ldr	r2, [r3, #8]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f042 0201 	orr.w	r2, r2, #1
 8002e4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002e4c:	4b5f      	ldr	r3, [pc, #380]	; (8002fcc <HAL_ADC_Start_DMA+0x1c4>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a5f      	ldr	r2, [pc, #380]	; (8002fd0 <HAL_ADC_Start_DMA+0x1c8>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9a      	lsrs	r2, r3, #18
 8002e58:	4613      	mov	r3, r2
 8002e5a:	005b      	lsls	r3, r3, #1
 8002e5c:	4413      	add	r3, r2
 8002e5e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e60:	e002      	b.n	8002e68 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	3b01      	subs	r3, #1
 8002e66:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f9      	bne.n	8002e62 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e7c:	d107      	bne.n	8002e8e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e8c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689b      	ldr	r3, [r3, #8]
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	f040 8086 	bne.w	8002faa <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002ea6:	f023 0301 	bic.w	r3, r3, #1
 8002eaa:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ec8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002edc:	d106      	bne.n	8002eec <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f023 0206 	bic.w	r2, r3, #6
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	645a      	str	r2, [r3, #68]	; 0x44
 8002eea:	e002      	b.n	8002ef2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002efa:	4b36      	ldr	r3, [pc, #216]	; (8002fd4 <HAL_ADC_Start_DMA+0x1cc>)
 8002efc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f02:	4a35      	ldr	r2, [pc, #212]	; (8002fd8 <HAL_ADC_Start_DMA+0x1d0>)
 8002f04:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f0a:	4a34      	ldr	r2, [pc, #208]	; (8002fdc <HAL_ADC_Start_DMA+0x1d4>)
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f12:	4a33      	ldr	r2, [pc, #204]	; (8002fe0 <HAL_ADC_Start_DMA+0x1d8>)
 8002f14:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002f1e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002f2e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	689a      	ldr	r2, [r3, #8]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002f3e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	334c      	adds	r3, #76	; 0x4c
 8002f4a:	4619      	mov	r1, r3
 8002f4c:	68ba      	ldr	r2, [r7, #8]
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f000 fcdc 	bl	800390c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	f003 031f 	and.w	r3, r3, #31
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d10f      	bne.n	8002f80 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d129      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	e020      	b.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <HAL_ADC_Start_DMA+0x1dc>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d11b      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d114      	bne.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	689a      	ldr	r2, [r3, #8]
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002fa6:	609a      	str	r2, [r3, #8]
 8002fa8:	e00b      	b.n	8002fc2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fae:	f043 0210 	orr.w	r2, r3, #16
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fba:	f043 0201 	orr.w	r2, r3, #1
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002fc2:	2300      	movs	r3, #0
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3718      	adds	r7, #24
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000008 	.word	0x20000008
 8002fd0:	431bde83 	.word	0x431bde83
 8002fd4:	40012300 	.word	0x40012300
 8002fd8:	08003475 	.word	0x08003475
 8002fdc:	0800352f 	.word	0x0800352f
 8002fe0:	0800354b 	.word	0x0800354b
 8002fe4:	40012000 	.word	0x40012000

08002fe8 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr

08003010 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8003018:	bf00      	nop
 800301a:	370c      	adds	r7, #12
 800301c:	46bd      	mov	sp, r7
 800301e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003022:	4770      	bx	lr

08003024 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003024:	b480      	push	{r7}
 8003026:	b083      	sub	sp, #12
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800302c:	bf00      	nop
 800302e:	370c      	adds	r7, #12
 8003030:	46bd      	mov	sp, r7
 8003032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003036:	4770      	bx	lr

08003038 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003038:	b480      	push	{r7}
 800303a:	b085      	sub	sp, #20
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800304c:	2b01      	cmp	r3, #1
 800304e:	d101      	bne.n	8003054 <HAL_ADC_ConfigChannel+0x1c>
 8003050:	2302      	movs	r3, #2
 8003052:	e105      	b.n	8003260 <HAL_ADC_ConfigChannel+0x228>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2201      	movs	r2, #1
 8003058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	2b09      	cmp	r3, #9
 8003062:	d925      	bls.n	80030b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	68d9      	ldr	r1, [r3, #12]
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	b29b      	uxth	r3, r3
 8003070:	461a      	mov	r2, r3
 8003072:	4613      	mov	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	4413      	add	r3, r2
 8003078:	3b1e      	subs	r3, #30
 800307a:	2207      	movs	r2, #7
 800307c:	fa02 f303 	lsl.w	r3, r2, r3
 8003080:	43da      	mvns	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	400a      	ands	r2, r1
 8003088:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68d9      	ldr	r1, [r3, #12]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	689a      	ldr	r2, [r3, #8]
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	4618      	mov	r0, r3
 800309c:	4603      	mov	r3, r0
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	4403      	add	r3, r0
 80030a2:	3b1e      	subs	r3, #30
 80030a4:	409a      	lsls	r2, r3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	60da      	str	r2, [r3, #12]
 80030ae:	e022      	b.n	80030f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	6919      	ldr	r1, [r3, #16]
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	b29b      	uxth	r3, r3
 80030bc:	461a      	mov	r2, r3
 80030be:	4613      	mov	r3, r2
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	4413      	add	r3, r2
 80030c4:	2207      	movs	r2, #7
 80030c6:	fa02 f303 	lsl.w	r3, r2, r3
 80030ca:	43da      	mvns	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	400a      	ands	r2, r1
 80030d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	6919      	ldr	r1, [r3, #16]
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	4603      	mov	r3, r0
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	4403      	add	r3, r0
 80030ec:	409a      	lsls	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	2b06      	cmp	r3, #6
 80030fc:	d824      	bhi.n	8003148 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	4413      	add	r3, r2
 800310e:	3b05      	subs	r3, #5
 8003110:	221f      	movs	r2, #31
 8003112:	fa02 f303 	lsl.w	r3, r2, r3
 8003116:	43da      	mvns	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	400a      	ands	r2, r1
 800311e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003126:	683b      	ldr	r3, [r7, #0]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	b29b      	uxth	r3, r3
 800312c:	4618      	mov	r0, r3
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	009b      	lsls	r3, r3, #2
 8003136:	4413      	add	r3, r2
 8003138:	3b05      	subs	r3, #5
 800313a:	fa00 f203 	lsl.w	r2, r0, r3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	635a      	str	r2, [r3, #52]	; 0x34
 8003146:	e04c      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003148:	683b      	ldr	r3, [r7, #0]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	2b0c      	cmp	r3, #12
 800314e:	d824      	bhi.n	800319a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685a      	ldr	r2, [r3, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	3b23      	subs	r3, #35	; 0x23
 8003162:	221f      	movs	r2, #31
 8003164:	fa02 f303 	lsl.w	r3, r2, r3
 8003168:	43da      	mvns	r2, r3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	400a      	ands	r2, r1
 8003170:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	b29b      	uxth	r3, r3
 800317e:	4618      	mov	r0, r3
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	4613      	mov	r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	4413      	add	r3, r2
 800318a:	3b23      	subs	r3, #35	; 0x23
 800318c:	fa00 f203 	lsl.w	r2, r0, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	631a      	str	r2, [r3, #48]	; 0x30
 8003198:	e023      	b.n	80031e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	685a      	ldr	r2, [r3, #4]
 80031a4:	4613      	mov	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	4413      	add	r3, r2
 80031aa:	3b41      	subs	r3, #65	; 0x41
 80031ac:	221f      	movs	r2, #31
 80031ae:	fa02 f303 	lsl.w	r3, r2, r3
 80031b2:	43da      	mvns	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	400a      	ands	r2, r1
 80031ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	b29b      	uxth	r3, r3
 80031c8:	4618      	mov	r0, r3
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	4613      	mov	r3, r2
 80031d0:	009b      	lsls	r3, r3, #2
 80031d2:	4413      	add	r3, r2
 80031d4:	3b41      	subs	r3, #65	; 0x41
 80031d6:	fa00 f203 	lsl.w	r2, r0, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_ADC_ConfigChannel+0x234>)
 80031e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	4a21      	ldr	r2, [pc, #132]	; (8003270 <HAL_ADC_ConfigChannel+0x238>)
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d109      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x1cc>
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b12      	cmp	r3, #18
 80031f6:	d105      	bne.n	8003204 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	685b      	ldr	r3, [r3, #4]
 80031fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a19      	ldr	r2, [pc, #100]	; (8003270 <HAL_ADC_ConfigChannel+0x238>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d123      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x21e>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	2b10      	cmp	r3, #16
 8003214:	d003      	beq.n	800321e <HAL_ADC_ConfigChannel+0x1e6>
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	2b11      	cmp	r3, #17
 800321c:	d11b      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	2b10      	cmp	r3, #16
 8003230:	d111      	bne.n	8003256 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003232:	4b10      	ldr	r3, [pc, #64]	; (8003274 <HAL_ADC_ConfigChannel+0x23c>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a10      	ldr	r2, [pc, #64]	; (8003278 <HAL_ADC_ConfigChannel+0x240>)
 8003238:	fba2 2303 	umull	r2, r3, r2, r3
 800323c:	0c9a      	lsrs	r2, r3, #18
 800323e:	4613      	mov	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	4413      	add	r3, r2
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003248:	e002      	b.n	8003250 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800324a:	68bb      	ldr	r3, [r7, #8]
 800324c:	3b01      	subs	r3, #1
 800324e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d1f9      	bne.n	800324a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3714      	adds	r7, #20
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr
 800326c:	40012300 	.word	0x40012300
 8003270:	40012000 	.word	0x40012000
 8003274:	20000008 	.word	0x20000008
 8003278:	431bde83 	.word	0x431bde83

0800327c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800327c:	b480      	push	{r7}
 800327e:	b085      	sub	sp, #20
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003284:	4b79      	ldr	r3, [pc, #484]	; (800346c <ADC_Init+0x1f0>)
 8003286:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	685a      	ldr	r2, [r3, #4]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6859      	ldr	r1, [r3, #4]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	691b      	ldr	r3, [r3, #16]
 80032bc:	021a      	lsls	r2, r3, #8
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	430a      	orrs	r2, r1
 80032c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	685a      	ldr	r2, [r3, #4]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80032d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	6859      	ldr	r1, [r3, #4]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	430a      	orrs	r2, r1
 80032e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	689a      	ldr	r2, [r3, #8]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	6899      	ldr	r1, [r3, #8]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	68da      	ldr	r2, [r3, #12]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	430a      	orrs	r2, r1
 8003308:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800330e:	4a58      	ldr	r2, [pc, #352]	; (8003470 <ADC_Init+0x1f4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d022      	beq.n	800335a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003322:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	6899      	ldr	r1, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	430a      	orrs	r2, r1
 8003334:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	6899      	ldr	r1, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
 8003358:	e00f      	b.n	800337a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	689a      	ldr	r2, [r3, #8]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	689a      	ldr	r2, [r3, #8]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003378:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	689a      	ldr	r2, [r3, #8]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f022 0202 	bic.w	r2, r2, #2
 8003388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	6899      	ldr	r1, [r3, #8]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	7e1b      	ldrb	r3, [r3, #24]
 8003394:	005a      	lsls	r2, r3, #1
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	430a      	orrs	r2, r1
 800339c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d01b      	beq.n	80033e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	685a      	ldr	r2, [r3, #4]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	685a      	ldr	r2, [r3, #4]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80033c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6859      	ldr	r1, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d2:	3b01      	subs	r3, #1
 80033d4:	035a      	lsls	r2, r3, #13
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	605a      	str	r2, [r3, #4]
 80033de:	e007      	b.n	80033f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	685a      	ldr	r2, [r3, #4]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80033ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80033fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	3b01      	subs	r3, #1
 800340c:	051a      	lsls	r2, r3, #20
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	689a      	ldr	r2, [r3, #8]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003424:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6899      	ldr	r1, [r3, #8]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003432:	025a      	lsls	r2, r3, #9
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	430a      	orrs	r2, r1
 800343a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800344a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6899      	ldr	r1, [r3, #8]
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	695b      	ldr	r3, [r3, #20]
 8003456:	029a      	lsls	r2, r3, #10
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	430a      	orrs	r2, r1
 800345e:	609a      	str	r2, [r3, #8]
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr
 800346c:	40012300 	.word	0x40012300
 8003470:	0f000001 	.word	0x0f000001

08003474 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003480:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800348a:	2b00      	cmp	r3, #0
 800348c:	d13c      	bne.n	8003508 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d12b      	bne.n	8003500 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d127      	bne.n	8003500 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d006      	beq.n	80034cc <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d119      	bne.n	8003500 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f022 0220 	bic.w	r2, r2, #32
 80034da:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d105      	bne.n	8003500 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	f043 0201 	orr.w	r2, r3, #1
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff fd71 	bl	8002fe8 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003506:	e00e      	b.n	8003526 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350c:	f003 0310 	and.w	r3, r3, #16
 8003510:	2b00      	cmp	r3, #0
 8003512:	d003      	beq.n	800351c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003514:	68f8      	ldr	r0, [r7, #12]
 8003516:	f7ff fd85 	bl	8003024 <HAL_ADC_ErrorCallback>
}
 800351a:	e004      	b.n	8003526 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	4798      	blx	r3
}
 8003526:	bf00      	nop
 8003528:	3710      	adds	r7, #16
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800352e:	b580      	push	{r7, lr}
 8003530:	b084      	sub	sp, #16
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800353a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	f7ff fd5d 	bl	8002ffc <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003542:	bf00      	nop
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003556:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2240      	movs	r2, #64	; 0x40
 800355c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003562:	f043 0204 	orr.w	r2, r3, #4
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800356a:	68f8      	ldr	r0, [r7, #12]
 800356c:	f7ff fd5a 	bl	8003024 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f003 0307 	and.w	r3, r3, #7
 800359a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800359c:	4b0c      	ldr	r3, [pc, #48]	; (80035d0 <__NVIC_SetPriorityGrouping+0x44>)
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80035a8:	4013      	ands	r3, r2
 80035aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80035b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80035b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035be:	4a04      	ldr	r2, [pc, #16]	; (80035d0 <__NVIC_SetPriorityGrouping+0x44>)
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	60d3      	str	r3, [r2, #12]
}
 80035c4:	bf00      	nop
 80035c6:	3714      	adds	r7, #20
 80035c8:	46bd      	mov	sp, r7
 80035ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ce:	4770      	bx	lr
 80035d0:	e000ed00 	.word	0xe000ed00

080035d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80035d4:	b480      	push	{r7}
 80035d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035d8:	4b04      	ldr	r3, [pc, #16]	; (80035ec <__NVIC_GetPriorityGrouping+0x18>)
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	0a1b      	lsrs	r3, r3, #8
 80035de:	f003 0307 	and.w	r3, r3, #7
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ea:	4770      	bx	lr
 80035ec:	e000ed00 	.word	0xe000ed00

080035f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b083      	sub	sp, #12
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	4603      	mov	r3, r0
 80035f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	db0b      	blt.n	800361a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003602:	79fb      	ldrb	r3, [r7, #7]
 8003604:	f003 021f 	and.w	r2, r3, #31
 8003608:	4907      	ldr	r1, [pc, #28]	; (8003628 <__NVIC_EnableIRQ+0x38>)
 800360a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800360e:	095b      	lsrs	r3, r3, #5
 8003610:	2001      	movs	r0, #1
 8003612:	fa00 f202 	lsl.w	r2, r0, r2
 8003616:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800361a:	bf00      	nop
 800361c:	370c      	adds	r7, #12
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	e000e100 	.word	0xe000e100

0800362c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	db0a      	blt.n	8003656 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	490c      	ldr	r1, [pc, #48]	; (8003678 <__NVIC_SetPriority+0x4c>)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	440b      	add	r3, r1
 8003650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003654:	e00a      	b.n	800366c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4908      	ldr	r1, [pc, #32]	; (800367c <__NVIC_SetPriority+0x50>)
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	3b04      	subs	r3, #4
 8003664:	0112      	lsls	r2, r2, #4
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	440b      	add	r3, r1
 800366a:	761a      	strb	r2, [r3, #24]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000e100 	.word	0xe000e100
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003680:	b480      	push	{r7}
 8003682:	b089      	sub	sp, #36	; 0x24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003694:	69fb      	ldr	r3, [r7, #28]
 8003696:	f1c3 0307 	rsb	r3, r3, #7
 800369a:	2b04      	cmp	r3, #4
 800369c:	bf28      	it	cs
 800369e:	2304      	movcs	r3, #4
 80036a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	3304      	adds	r3, #4
 80036a6:	2b06      	cmp	r3, #6
 80036a8:	d902      	bls.n	80036b0 <NVIC_EncodePriority+0x30>
 80036aa:	69fb      	ldr	r3, [r7, #28]
 80036ac:	3b03      	subs	r3, #3
 80036ae:	e000      	b.n	80036b2 <NVIC_EncodePriority+0x32>
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036b4:	f04f 32ff 	mov.w	r2, #4294967295
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	fa02 f303 	lsl.w	r3, r2, r3
 80036be:	43da      	mvns	r2, r3
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	401a      	ands	r2, r3
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80036c8:	f04f 31ff 	mov.w	r1, #4294967295
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	fa01 f303 	lsl.w	r3, r1, r3
 80036d2:	43d9      	mvns	r1, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036d8:	4313      	orrs	r3, r2
         );
}
 80036da:	4618      	mov	r0, r3
 80036dc:	3724      	adds	r7, #36	; 0x24
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	3b01      	subs	r3, #1
 80036f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f8:	d301      	bcc.n	80036fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036fa:	2301      	movs	r3, #1
 80036fc:	e00f      	b.n	800371e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036fe:	4a0a      	ldr	r2, [pc, #40]	; (8003728 <SysTick_Config+0x40>)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	3b01      	subs	r3, #1
 8003704:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003706:	210f      	movs	r1, #15
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	f7ff ff8e 	bl	800362c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <SysTick_Config+0x40>)
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003716:	4b04      	ldr	r3, [pc, #16]	; (8003728 <SysTick_Config+0x40>)
 8003718:	2207      	movs	r2, #7
 800371a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	3708      	adds	r7, #8
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	e000e010 	.word	0xe000e010

0800372c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003734:	6878      	ldr	r0, [r7, #4]
 8003736:	f7ff ff29 	bl	800358c <__NVIC_SetPriorityGrouping>
}
 800373a:	bf00      	nop
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003742:	b580      	push	{r7, lr}
 8003744:	b086      	sub	sp, #24
 8003746:	af00      	add	r7, sp, #0
 8003748:	4603      	mov	r3, r0
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
 800374e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003750:	2300      	movs	r3, #0
 8003752:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003754:	f7ff ff3e 	bl	80035d4 <__NVIC_GetPriorityGrouping>
 8003758:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	68b9      	ldr	r1, [r7, #8]
 800375e:	6978      	ldr	r0, [r7, #20]
 8003760:	f7ff ff8e 	bl	8003680 <NVIC_EncodePriority>
 8003764:	4602      	mov	r2, r0
 8003766:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f7ff ff5d 	bl	800362c <__NVIC_SetPriority>
}
 8003772:	bf00      	nop
 8003774:	3718      	adds	r7, #24
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	4603      	mov	r3, r0
 8003782:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003784:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003788:	4618      	mov	r0, r3
 800378a:	f7ff ff31 	bl	80035f0 <__NVIC_EnableIRQ>
}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}

08003796 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003796:	b580      	push	{r7, lr}
 8003798:	b082      	sub	sp, #8
 800379a:	af00      	add	r7, sp, #0
 800379c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f7ff ffa2 	bl	80036e8 <SysTick_Config>
 80037a4:	4603      	mov	r3, r0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
	...

080037b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b086      	sub	sp, #24
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80037bc:	f7ff f9a0 	bl	8002b00 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d101      	bne.n	80037cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e099      	b.n	8003900 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2202      	movs	r2, #2
 80037d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 0201 	bic.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ec:	e00f      	b.n	800380e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ee:	f7ff f987 	bl	8002b00 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	2b05      	cmp	r3, #5
 80037fa:	d908      	bls.n	800380e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2220      	movs	r2, #32
 8003800:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2203      	movs	r2, #3
 8003806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800380a:	2303      	movs	r3, #3
 800380c:	e078      	b.n	8003900 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b00      	cmp	r3, #0
 800381a:	d1e8      	bne.n	80037ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003824:	697a      	ldr	r2, [r7, #20]
 8003826:	4b38      	ldr	r3, [pc, #224]	; (8003908 <HAL_DMA_Init+0x158>)
 8003828:	4013      	ands	r3, r2
 800382a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800383a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003846:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	699b      	ldr	r3, [r3, #24]
 800384c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003852:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800385a:	697a      	ldr	r2, [r7, #20]
 800385c:	4313      	orrs	r3, r2
 800385e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	2b04      	cmp	r3, #4
 8003866:	d107      	bne.n	8003878 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003870:	4313      	orrs	r3, r2
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	4313      	orrs	r3, r2
 8003876:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	697a      	ldr	r2, [r7, #20]
 800387e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	f023 0307 	bic.w	r3, r3, #7
 800388e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003894:	697a      	ldr	r2, [r7, #20]
 8003896:	4313      	orrs	r3, r2
 8003898:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d117      	bne.n	80038d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038a6:	697a      	ldr	r2, [r7, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00e      	beq.n	80038d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f000 fa9f 	bl	8003df8 <DMA_CheckFifoParam>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d008      	beq.n	80038d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2240      	movs	r2, #64	; 0x40
 80038c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2201      	movs	r2, #1
 80038ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80038ce:	2301      	movs	r3, #1
 80038d0:	e016      	b.n	8003900 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fa56 	bl	8003d8c <DMA_CalcBaseAndBitshift>
 80038e0:	4603      	mov	r3, r0
 80038e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e8:	223f      	movs	r2, #63	; 0x3f
 80038ea:	409a      	lsls	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2201      	movs	r2, #1
 80038fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80038fe:	2300      	movs	r3, #0
}
 8003900:	4618      	mov	r0, r3
 8003902:	3718      	adds	r7, #24
 8003904:	46bd      	mov	sp, r7
 8003906:	bd80      	pop	{r7, pc}
 8003908:	f010803f 	.word	0xf010803f

0800390c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af00      	add	r7, sp, #0
 8003912:	60f8      	str	r0, [r7, #12]
 8003914:	60b9      	str	r1, [r7, #8]
 8003916:	607a      	str	r2, [r7, #4]
 8003918:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003922:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_DMA_Start_IT+0x26>
 800392e:	2302      	movs	r3, #2
 8003930:	e040      	b.n	80039b4 <HAL_DMA_Start_IT+0xa8>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b01      	cmp	r3, #1
 8003944:	d12f      	bne.n	80039a6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2202      	movs	r2, #2
 800394a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2200      	movs	r2, #0
 8003952:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	68b9      	ldr	r1, [r7, #8]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 f9e8 	bl	8003d30 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	223f      	movs	r2, #63	; 0x3f
 8003966:	409a      	lsls	r2, r3
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f042 0216 	orr.w	r2, r2, #22
 800397a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d007      	beq.n	8003994 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	681a      	ldr	r2, [r3, #0]
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0208 	orr.w	r2, r2, #8
 8003992:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]
 80039a4:	e005      	b.n	80039b2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80039b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3718      	adds	r7, #24
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80039ca:	b2db      	uxtb	r3, r3
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d004      	beq.n	80039da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2280      	movs	r2, #128	; 0x80
 80039d4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e00c      	b.n	80039f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2205      	movs	r2, #5
 80039de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	f022 0201 	bic.w	r2, r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80039f2:	2300      	movs	r3, #0
}
 80039f4:	4618      	mov	r0, r3
 80039f6:	370c      	adds	r7, #12
 80039f8:	46bd      	mov	sp, r7
 80039fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fe:	4770      	bx	lr

08003a00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b086      	sub	sp, #24
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003a0c:	4b8e      	ldr	r3, [pc, #568]	; (8003c48 <HAL_DMA_IRQHandler+0x248>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a8e      	ldr	r2, [pc, #568]	; (8003c4c <HAL_DMA_IRQHandler+0x24c>)
 8003a12:	fba2 2303 	umull	r2, r3, r2, r3
 8003a16:	0a9b      	lsrs	r3, r3, #10
 8003a18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	2208      	movs	r2, #8
 8003a2c:	409a      	lsls	r2, r3
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	4013      	ands	r3, r2
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d01a      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d013      	beq.n	8003a6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681a      	ldr	r2, [r3, #0]
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f022 0204 	bic.w	r2, r2, #4
 8003a52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a58:	2208      	movs	r2, #8
 8003a5a:	409a      	lsls	r2, r3
 8003a5c:	693b      	ldr	r3, [r7, #16]
 8003a5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a70:	2201      	movs	r2, #1
 8003a72:	409a      	lsls	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	4013      	ands	r3, r2
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d012      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d00b      	beq.n	8003aa2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a8e:	2201      	movs	r2, #1
 8003a90:	409a      	lsls	r2, r3
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a9a:	f043 0202 	orr.w	r2, r3, #2
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aa6:	2204      	movs	r2, #4
 8003aa8:	409a      	lsls	r2, r3
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	4013      	ands	r3, r2
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d012      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0302 	and.w	r3, r3, #2
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d00b      	beq.n	8003ad8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ac4:	2204      	movs	r2, #4
 8003ac6:	409a      	lsls	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ad0:	f043 0204 	orr.w	r2, r3, #4
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003adc:	2210      	movs	r2, #16
 8003ade:	409a      	lsls	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d043      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0308 	and.w	r3, r3, #8
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d03c      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	2210      	movs	r2, #16
 8003afc:	409a      	lsls	r2, r3
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d018      	beq.n	8003b42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d108      	bne.n	8003b30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d024      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	4798      	blx	r3
 8003b2e:	e01f      	b.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d01b      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4798      	blx	r3
 8003b40:	e016      	b.n	8003b70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d107      	bne.n	8003b60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f022 0208 	bic.w	r2, r2, #8
 8003b5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d003      	beq.n	8003b70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	2220      	movs	r2, #32
 8003b76:	409a      	lsls	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4013      	ands	r3, r2
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	f000 808f 	beq.w	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f003 0310 	and.w	r3, r3, #16
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 8087 	beq.w	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b96:	2220      	movs	r2, #32
 8003b98:	409a      	lsls	r2, r3
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	2b05      	cmp	r3, #5
 8003ba8:	d136      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f022 0216 	bic.w	r2, r2, #22
 8003bb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	695a      	ldr	r2, [r3, #20]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003bc8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d103      	bne.n	8003bda <HAL_DMA_IRQHandler+0x1da>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d007      	beq.n	8003bea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0208 	bic.w	r2, r2, #8
 8003be8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bee:	223f      	movs	r2, #63	; 0x3f
 8003bf0:	409a      	lsls	r2, r3
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2200      	movs	r2, #0
 8003c02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d07e      	beq.n	8003d0c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	4798      	blx	r3
        }
        return;
 8003c16:	e079      	b.n	8003d0c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d01d      	beq.n	8003c62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10d      	bne.n	8003c50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d031      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	4798      	blx	r3
 8003c44:	e02c      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
 8003c46:	bf00      	nop
 8003c48:	20000008 	.word	0x20000008
 8003c4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d023      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	4798      	blx	r3
 8003c60:	e01e      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d10f      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f022 0210 	bic.w	r2, r2, #16
 8003c7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d032      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cac:	f003 0301 	and.w	r3, r3, #1
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d022      	beq.n	8003cfa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2205      	movs	r2, #5
 8003cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f022 0201 	bic.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	3301      	adds	r3, #1
 8003cd0:	60bb      	str	r3, [r7, #8]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d307      	bcc.n	8003ce8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0301 	and.w	r3, r3, #1
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d1f2      	bne.n	8003ccc <HAL_DMA_IRQHandler+0x2cc>
 8003ce6:	e000      	b.n	8003cea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ce8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2201      	movs	r2, #1
 8003cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d005      	beq.n	8003d0e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	4798      	blx	r3
 8003d0a:	e000      	b.n	8003d0e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003d0c:	bf00      	nop
    }
  }
}
 8003d0e:	3718      	adds	r7, #24
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003d14:	b480      	push	{r7}
 8003d16:	b083      	sub	sp, #12
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003d22:	b2db      	uxtb	r3, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	370c      	adds	r7, #12
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2e:	4770      	bx	lr

08003d30 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	60f8      	str	r0, [r7, #12]
 8003d38:	60b9      	str	r1, [r7, #8]
 8003d3a:	607a      	str	r2, [r7, #4]
 8003d3c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d4c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	2b40      	cmp	r3, #64	; 0x40
 8003d5c:	d108      	bne.n	8003d70 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	687a      	ldr	r2, [r7, #4]
 8003d64:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68ba      	ldr	r2, [r7, #8]
 8003d6c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003d6e:	e007      	b.n	8003d80 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	68ba      	ldr	r2, [r7, #8]
 8003d76:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	687a      	ldr	r2, [r7, #4]
 8003d7e:	60da      	str	r2, [r3, #12]
}
 8003d80:	bf00      	nop
 8003d82:	3714      	adds	r7, #20
 8003d84:	46bd      	mov	sp, r7
 8003d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8a:	4770      	bx	lr

08003d8c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	3b10      	subs	r3, #16
 8003d9c:	4a14      	ldr	r2, [pc, #80]	; (8003df0 <DMA_CalcBaseAndBitshift+0x64>)
 8003d9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003da2:	091b      	lsrs	r3, r3, #4
 8003da4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003da6:	4a13      	ldr	r2, [pc, #76]	; (8003df4 <DMA_CalcBaseAndBitshift+0x68>)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	781b      	ldrb	r3, [r3, #0]
 8003dae:	461a      	mov	r2, r3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2b03      	cmp	r3, #3
 8003db8:	d909      	bls.n	8003dce <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	1d1a      	adds	r2, r3, #4
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	659a      	str	r2, [r3, #88]	; 0x58
 8003dcc:	e007      	b.n	8003dde <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003de2:	4618      	mov	r0, r3
 8003de4:	3714      	adds	r7, #20
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	aaaaaaab 	.word	0xaaaaaaab
 8003df4:	0800bce4 	.word	0x0800bce4

08003df8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e00:	2300      	movs	r3, #0
 8003e02:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e08:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	699b      	ldr	r3, [r3, #24]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d11f      	bne.n	8003e52 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b03      	cmp	r3, #3
 8003e16:	d856      	bhi.n	8003ec6 <DMA_CheckFifoParam+0xce>
 8003e18:	a201      	add	r2, pc, #4	; (adr r2, 8003e20 <DMA_CheckFifoParam+0x28>)
 8003e1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e1e:	bf00      	nop
 8003e20:	08003e31 	.word	0x08003e31
 8003e24:	08003e43 	.word	0x08003e43
 8003e28:	08003e31 	.word	0x08003e31
 8003e2c:	08003ec7 	.word	0x08003ec7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e34:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d046      	beq.n	8003eca <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e40:	e043      	b.n	8003eca <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e4a:	d140      	bne.n	8003ece <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e50:	e03d      	b.n	8003ece <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e5a:	d121      	bne.n	8003ea0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	d837      	bhi.n	8003ed2 <DMA_CheckFifoParam+0xda>
 8003e62:	a201      	add	r2, pc, #4	; (adr r2, 8003e68 <DMA_CheckFifoParam+0x70>)
 8003e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e68:	08003e79 	.word	0x08003e79
 8003e6c:	08003e7f 	.word	0x08003e7f
 8003e70:	08003e79 	.word	0x08003e79
 8003e74:	08003e91 	.word	0x08003e91
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003e78:	2301      	movs	r3, #1
 8003e7a:	73fb      	strb	r3, [r7, #15]
      break;
 8003e7c:	e030      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d025      	beq.n	8003ed6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003e8e:	e022      	b.n	8003ed6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e94:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003e98:	d11f      	bne.n	8003eda <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003e9e:	e01c      	b.n	8003eda <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b02      	cmp	r3, #2
 8003ea4:	d903      	bls.n	8003eae <DMA_CheckFifoParam+0xb6>
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b03      	cmp	r3, #3
 8003eaa:	d003      	beq.n	8003eb4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003eac:	e018      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	73fb      	strb	r3, [r7, #15]
      break;
 8003eb2:	e015      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00e      	beq.n	8003ede <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ec4:	e00b      	b.n	8003ede <DMA_CheckFifoParam+0xe6>
      break;
 8003ec6:	bf00      	nop
 8003ec8:	e00a      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003eca:	bf00      	nop
 8003ecc:	e008      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ece:	bf00      	nop
 8003ed0:	e006      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed2:	bf00      	nop
 8003ed4:	e004      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ed6:	bf00      	nop
 8003ed8:	e002      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003eda:	bf00      	nop
 8003edc:	e000      	b.n	8003ee0 <DMA_CheckFifoParam+0xe8>
      break;
 8003ede:	bf00      	nop
    }
  } 
  
  return status; 
 8003ee0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3714      	adds	r7, #20
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop

08003ef0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b089      	sub	sp, #36	; 0x24
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003f02:	2300      	movs	r3, #0
 8003f04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f06:	2300      	movs	r3, #0
 8003f08:	61fb      	str	r3, [r7, #28]
 8003f0a:	e159      	b.n	80041c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	fa02 f303 	lsl.w	r3, r2, r3
 8003f14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	697a      	ldr	r2, [r7, #20]
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003f20:	693a      	ldr	r2, [r7, #16]
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	f040 8148 	bne.w	80041ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	685b      	ldr	r3, [r3, #4]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	2b01      	cmp	r3, #1
 8003f34:	d005      	beq.n	8003f42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d130      	bne.n	8003fa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	689b      	ldr	r3, [r3, #8]
 8003f46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003f48:	69fb      	ldr	r3, [r7, #28]
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	2203      	movs	r2, #3
 8003f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68da      	ldr	r2, [r3, #12]
 8003f5e:	69fb      	ldr	r3, [r7, #28]
 8003f60:	005b      	lsls	r3, r3, #1
 8003f62:	fa02 f303 	lsl.w	r3, r2, r3
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4313      	orrs	r3, r2
 8003f6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	69ba      	ldr	r2, [r7, #24]
 8003f70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003f78:	2201      	movs	r2, #1
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	091b      	lsrs	r3, r3, #4
 8003f8e:	f003 0201 	and.w	r2, r3, #1
 8003f92:	69fb      	ldr	r3, [r7, #28]
 8003f94:	fa02 f303 	lsl.w	r3, r2, r3
 8003f98:	69ba      	ldr	r2, [r7, #24]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	69ba      	ldr	r2, [r7, #24]
 8003fa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	2b03      	cmp	r3, #3
 8003fae:	d017      	beq.n	8003fe0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	68db      	ldr	r3, [r3, #12]
 8003fb4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003fb6:	69fb      	ldr	r3, [r7, #28]
 8003fb8:	005b      	lsls	r3, r3, #1
 8003fba:	2203      	movs	r2, #3
 8003fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8003fc0:	43db      	mvns	r3, r3
 8003fc2:	69ba      	ldr	r2, [r7, #24]
 8003fc4:	4013      	ands	r3, r2
 8003fc6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	689a      	ldr	r2, [r3, #8]
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd4:	69ba      	ldr	r2, [r7, #24]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	f003 0303 	and.w	r3, r3, #3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d123      	bne.n	8004034 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003fec:	69fb      	ldr	r3, [r7, #28]
 8003fee:	08da      	lsrs	r2, r3, #3
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	3208      	adds	r2, #8
 8003ff4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ff8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	f003 0307 	and.w	r3, r3, #7
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	220f      	movs	r2, #15
 8004004:	fa02 f303 	lsl.w	r3, r2, r3
 8004008:	43db      	mvns	r3, r3
 800400a:	69ba      	ldr	r2, [r7, #24]
 800400c:	4013      	ands	r3, r2
 800400e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	691a      	ldr	r2, [r3, #16]
 8004014:	69fb      	ldr	r3, [r7, #28]
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	69ba      	ldr	r2, [r7, #24]
 8004022:	4313      	orrs	r3, r2
 8004024:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004026:	69fb      	ldr	r3, [r7, #28]
 8004028:	08da      	lsrs	r2, r3, #3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	3208      	adds	r2, #8
 800402e:	69b9      	ldr	r1, [r7, #24]
 8004030:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800403a:	69fb      	ldr	r3, [r7, #28]
 800403c:	005b      	lsls	r3, r3, #1
 800403e:	2203      	movs	r2, #3
 8004040:	fa02 f303 	lsl.w	r3, r2, r3
 8004044:	43db      	mvns	r3, r3
 8004046:	69ba      	ldr	r2, [r7, #24]
 8004048:	4013      	ands	r3, r2
 800404a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f003 0203 	and.w	r2, r3, #3
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	69ba      	ldr	r2, [r7, #24]
 800405e:	4313      	orrs	r3, r2
 8004060:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	69ba      	ldr	r2, [r7, #24]
 8004066:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80a2 	beq.w	80041ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004076:	2300      	movs	r3, #0
 8004078:	60fb      	str	r3, [r7, #12]
 800407a:	4b57      	ldr	r3, [pc, #348]	; (80041d8 <HAL_GPIO_Init+0x2e8>)
 800407c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800407e:	4a56      	ldr	r2, [pc, #344]	; (80041d8 <HAL_GPIO_Init+0x2e8>)
 8004080:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004084:	6453      	str	r3, [r2, #68]	; 0x44
 8004086:	4b54      	ldr	r3, [pc, #336]	; (80041d8 <HAL_GPIO_Init+0x2e8>)
 8004088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800408e:	60fb      	str	r3, [r7, #12]
 8004090:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004092:	4a52      	ldr	r2, [pc, #328]	; (80041dc <HAL_GPIO_Init+0x2ec>)
 8004094:	69fb      	ldr	r3, [r7, #28]
 8004096:	089b      	lsrs	r3, r3, #2
 8004098:	3302      	adds	r3, #2
 800409a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800409e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80040a0:	69fb      	ldr	r3, [r7, #28]
 80040a2:	f003 0303 	and.w	r3, r3, #3
 80040a6:	009b      	lsls	r3, r3, #2
 80040a8:	220f      	movs	r2, #15
 80040aa:	fa02 f303 	lsl.w	r3, r2, r3
 80040ae:	43db      	mvns	r3, r3
 80040b0:	69ba      	ldr	r2, [r7, #24]
 80040b2:	4013      	ands	r3, r2
 80040b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a49      	ldr	r2, [pc, #292]	; (80041e0 <HAL_GPIO_Init+0x2f0>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d019      	beq.n	80040f2 <HAL_GPIO_Init+0x202>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a48      	ldr	r2, [pc, #288]	; (80041e4 <HAL_GPIO_Init+0x2f4>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d013      	beq.n	80040ee <HAL_GPIO_Init+0x1fe>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a47      	ldr	r2, [pc, #284]	; (80041e8 <HAL_GPIO_Init+0x2f8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d00d      	beq.n	80040ea <HAL_GPIO_Init+0x1fa>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a46      	ldr	r2, [pc, #280]	; (80041ec <HAL_GPIO_Init+0x2fc>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d007      	beq.n	80040e6 <HAL_GPIO_Init+0x1f6>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a45      	ldr	r2, [pc, #276]	; (80041f0 <HAL_GPIO_Init+0x300>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d101      	bne.n	80040e2 <HAL_GPIO_Init+0x1f2>
 80040de:	2304      	movs	r3, #4
 80040e0:	e008      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040e2:	2307      	movs	r3, #7
 80040e4:	e006      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040e6:	2303      	movs	r3, #3
 80040e8:	e004      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040ea:	2302      	movs	r3, #2
 80040ec:	e002      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040ee:	2301      	movs	r3, #1
 80040f0:	e000      	b.n	80040f4 <HAL_GPIO_Init+0x204>
 80040f2:	2300      	movs	r3, #0
 80040f4:	69fa      	ldr	r2, [r7, #28]
 80040f6:	f002 0203 	and.w	r2, r2, #3
 80040fa:	0092      	lsls	r2, r2, #2
 80040fc:	4093      	lsls	r3, r2
 80040fe:	69ba      	ldr	r2, [r7, #24]
 8004100:	4313      	orrs	r3, r2
 8004102:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004104:	4935      	ldr	r1, [pc, #212]	; (80041dc <HAL_GPIO_Init+0x2ec>)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	089b      	lsrs	r3, r3, #2
 800410a:	3302      	adds	r3, #2
 800410c:	69ba      	ldr	r2, [r7, #24]
 800410e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004114:	689b      	ldr	r3, [r3, #8]
 8004116:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	43db      	mvns	r3, r3
 800411c:	69ba      	ldr	r2, [r7, #24]
 800411e:	4013      	ands	r3, r2
 8004120:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800412e:	69ba      	ldr	r2, [r7, #24]
 8004130:	693b      	ldr	r3, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004136:	4a2f      	ldr	r2, [pc, #188]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800413c:	4b2d      	ldr	r3, [pc, #180]	; (80041f4 <HAL_GPIO_Init+0x304>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	43db      	mvns	r3, r3
 8004146:	69ba      	ldr	r2, [r7, #24]
 8004148:	4013      	ands	r3, r2
 800414a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	685b      	ldr	r3, [r3, #4]
 8004150:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d003      	beq.n	8004160 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	4313      	orrs	r3, r2
 800415e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004160:	4a24      	ldr	r2, [pc, #144]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004162:	69bb      	ldr	r3, [r7, #24]
 8004164:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004166:	4b23      	ldr	r3, [pc, #140]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	43db      	mvns	r3, r3
 8004170:	69ba      	ldr	r2, [r7, #24]
 8004172:	4013      	ands	r3, r2
 8004174:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004182:	69ba      	ldr	r2, [r7, #24]
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	4313      	orrs	r3, r2
 8004188:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800418a:	4a1a      	ldr	r2, [pc, #104]	; (80041f4 <HAL_GPIO_Init+0x304>)
 800418c:	69bb      	ldr	r3, [r7, #24]
 800418e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004190:	4b18      	ldr	r3, [pc, #96]	; (80041f4 <HAL_GPIO_Init+0x304>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	43db      	mvns	r3, r3
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4013      	ands	r3, r2
 800419e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d003      	beq.n	80041b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80041ac:	69ba      	ldr	r2, [r7, #24]
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80041b4:	4a0f      	ldr	r2, [pc, #60]	; (80041f4 <HAL_GPIO_Init+0x304>)
 80041b6:	69bb      	ldr	r3, [r7, #24]
 80041b8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	3301      	adds	r3, #1
 80041be:	61fb      	str	r3, [r7, #28]
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b0f      	cmp	r3, #15
 80041c4:	f67f aea2 	bls.w	8003f0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop
 80041cc:	3724      	adds	r7, #36	; 0x24
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40023800 	.word	0x40023800
 80041dc:	40013800 	.word	0x40013800
 80041e0:	40020000 	.word	0x40020000
 80041e4:	40020400 	.word	0x40020400
 80041e8:	40020800 	.word	0x40020800
 80041ec:	40020c00 	.word	0x40020c00
 80041f0:	40021000 	.word	0x40021000
 80041f4:	40013c00 	.word	0x40013c00

080041f8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	460b      	mov	r3, r1
 8004202:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	691a      	ldr	r2, [r3, #16]
 8004208:	887b      	ldrh	r3, [r7, #2]
 800420a:	4013      	ands	r3, r2
 800420c:	2b00      	cmp	r3, #0
 800420e:	d002      	beq.n	8004216 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e001      	b.n	800421a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004216:	2300      	movs	r3, #0
 8004218:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800421a:	7bfb      	ldrb	r3, [r7, #15]
}
 800421c:	4618      	mov	r0, r3
 800421e:	3714      	adds	r7, #20
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	460b      	mov	r3, r1
 8004232:	807b      	strh	r3, [r7, #2]
 8004234:	4613      	mov	r3, r2
 8004236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004238:	787b      	ldrb	r3, [r7, #1]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800423e:	887a      	ldrh	r2, [r7, #2]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004244:	e003      	b.n	800424e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004246:	887b      	ldrh	r3, [r7, #2]
 8004248:	041a      	lsls	r2, r3, #16
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800425c:	b580      	push	{r7, lr}
 800425e:	b082      	sub	sp, #8
 8004260:	af00      	add	r7, sp, #0
 8004262:	4603      	mov	r3, r0
 8004264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004268:	695a      	ldr	r2, [r3, #20]
 800426a:	88fb      	ldrh	r3, [r7, #6]
 800426c:	4013      	ands	r3, r2
 800426e:	2b00      	cmp	r3, #0
 8004270:	d006      	beq.n	8004280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004272:	4a05      	ldr	r2, [pc, #20]	; (8004288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004274:	88fb      	ldrh	r3, [r7, #6]
 8004276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004278:	88fb      	ldrh	r3, [r7, #6]
 800427a:	4618      	mov	r0, r3
 800427c:	f000 f806 	bl	800428c <HAL_GPIO_EXTI_Callback>
  }
}
 8004280:	bf00      	nop
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	40013c00 	.word	0x40013c00

0800428c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	4603      	mov	r3, r0
 8004294:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004296:	bf00      	nop
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e12b      	b.n	800450e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fd ffde 	bl	800228c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	; 0x24
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004308:	f002 fc4c 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a81      	ldr	r2, [pc, #516]	; (8004518 <HAL_I2C_Init+0x274>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d807      	bhi.n	8004328 <HAL_I2C_Init+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a80      	ldr	r2, [pc, #512]	; (800451c <HAL_I2C_Init+0x278>)
 800431c:	4293      	cmp	r3, r2
 800431e:	bf94      	ite	ls
 8004320:	2301      	movls	r3, #1
 8004322:	2300      	movhi	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e006      	b.n	8004336 <HAL_I2C_Init+0x92>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a7d      	ldr	r2, [pc, #500]	; (8004520 <HAL_I2C_Init+0x27c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0e7      	b.n	800450e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a78      	ldr	r2, [pc, #480]	; (8004524 <HAL_I2C_Init+0x280>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0c9b      	lsrs	r3, r3, #18
 8004348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a6a      	ldr	r2, [pc, #424]	; (8004518 <HAL_I2C_Init+0x274>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d802      	bhi.n	8004378 <HAL_I2C_Init+0xd4>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3301      	adds	r3, #1
 8004376:	e009      	b.n	800438c <HAL_I2C_Init+0xe8>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	4a69      	ldr	r2, [pc, #420]	; (8004528 <HAL_I2C_Init+0x284>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	099b      	lsrs	r3, r3, #6
 800438a:	3301      	adds	r3, #1
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800439e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	495c      	ldr	r1, [pc, #368]	; (8004518 <HAL_I2C_Init+0x274>)
 80043a8:	428b      	cmp	r3, r1
 80043aa:	d819      	bhi.n	80043e0 <HAL_I2C_Init+0x13c>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e59      	subs	r1, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80043c0:	400b      	ands	r3, r1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_I2C_Init+0x138>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1e59      	subs	r1, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043da:	e051      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043dc:	2304      	movs	r3, #4
 80043de:	e04f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d111      	bne.n	800440c <HAL_I2C_Init+0x168>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e012      	b.n	8004432 <HAL_I2C_Init+0x18e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Init+0x196>
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10e      	bne.n	8004460 <HAL_I2C_Init+0x1bc>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e58      	subs	r0, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	440b      	add	r3, r1
 8004450:	fbb0 f3f3 	udiv	r3, r0, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800445e:	e00f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1e58      	subs	r0, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	0099      	lsls	r1, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6809      	ldr	r1, [r1, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80044ae:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6911      	ldr	r1, [r2, #16]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68d2      	ldr	r2, [r2, #12]
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	000186a0 	.word	0x000186a0
 800451c:	001e847f 	.word	0x001e847f
 8004520:	003d08ff 	.word	0x003d08ff
 8004524:	431bde83 	.word	0x431bde83
 8004528:	10624dd3 	.word	0x10624dd3

0800452c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b088      	sub	sp, #32
 8004530:	af02      	add	r7, sp, #8
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	607a      	str	r2, [r7, #4]
 8004536:	461a      	mov	r2, r3
 8004538:	460b      	mov	r3, r1
 800453a:	817b      	strh	r3, [r7, #10]
 800453c:	4613      	mov	r3, r2
 800453e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004540:	f7fe fade 	bl	8002b00 <HAL_GetTick>
 8004544:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800454c:	b2db      	uxtb	r3, r3
 800454e:	2b20      	cmp	r3, #32
 8004550:	f040 80e0 	bne.w	8004714 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	9300      	str	r3, [sp, #0]
 8004558:	2319      	movs	r3, #25
 800455a:	2201      	movs	r2, #1
 800455c:	4970      	ldr	r1, [pc, #448]	; (8004720 <HAL_I2C_Master_Transmit+0x1f4>)
 800455e:	68f8      	ldr	r0, [r7, #12]
 8004560:	f001 fcdc 	bl	8005f1c <I2C_WaitOnFlagUntilTimeout>
 8004564:	4603      	mov	r3, r0
 8004566:	2b00      	cmp	r3, #0
 8004568:	d001      	beq.n	800456e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800456a:	2302      	movs	r3, #2
 800456c:	e0d3      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_I2C_Master_Transmit+0x50>
 8004578:	2302      	movs	r3, #2
 800457a:	e0cc      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0301 	and.w	r3, r3, #1
 800458e:	2b01      	cmp	r3, #1
 8004590:	d007      	beq.n	80045a2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f042 0201 	orr.w	r2, r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80045b0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2221      	movs	r2, #33	; 0x21
 80045b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2210      	movs	r2, #16
 80045be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	893a      	ldrh	r2, [r7, #8]
 80045d2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d8:	b29a      	uxth	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	4a50      	ldr	r2, [pc, #320]	; (8004724 <HAL_I2C_Master_Transmit+0x1f8>)
 80045e2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80045e4:	8979      	ldrh	r1, [r7, #10]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	6a3a      	ldr	r2, [r7, #32]
 80045ea:	68f8      	ldr	r0, [r7, #12]
 80045ec:	f001 fb6c 	bl	8005cc8 <I2C_MasterRequestWrite>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d001      	beq.n	80045fa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80045f6:	2301      	movs	r3, #1
 80045f8:	e08d      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	613b      	str	r3, [r7, #16]
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	699b      	ldr	r3, [r3, #24]
 800460c:	613b      	str	r3, [r7, #16]
 800460e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004610:	e066      	b.n	80046e0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	6a39      	ldr	r1, [r7, #32]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f001 fd56 	bl	80060c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00d      	beq.n	800463e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b04      	cmp	r3, #4
 8004628:	d107      	bne.n	800463a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	681a      	ldr	r2, [r3, #0]
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004638:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e06b      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004642:	781a      	ldrb	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800464e:	1c5a      	adds	r2, r3, #1
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	3b01      	subs	r3, #1
 800465c:	b29a      	uxth	r2, r3
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004666:	3b01      	subs	r3, #1
 8004668:	b29a      	uxth	r2, r3
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d11b      	bne.n	80046b4 <HAL_I2C_Master_Transmit+0x188>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d017      	beq.n	80046b4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004694:	1c5a      	adds	r2, r3, #1
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800469e:	b29b      	uxth	r3, r3
 80046a0:	3b01      	subs	r3, #1
 80046a2:	b29a      	uxth	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ac:	3b01      	subs	r3, #1
 80046ae:	b29a      	uxth	r2, r3
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	6a39      	ldr	r1, [r7, #32]
 80046b8:	68f8      	ldr	r0, [r7, #12]
 80046ba:	f001 fd46 	bl	800614a <I2C_WaitOnBTFFlagUntilTimeout>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00d      	beq.n	80046e0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c8:	2b04      	cmp	r3, #4
 80046ca:	d107      	bne.n	80046dc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046da:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80046dc:	2301      	movs	r3, #1
 80046de:	e01a      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d194      	bne.n	8004612 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80046f6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2220      	movs	r2, #32
 80046fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004710:	2300      	movs	r3, #0
 8004712:	e000      	b.n	8004716 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004714:	2302      	movs	r3, #2
  }
}
 8004716:	4618      	mov	r0, r3
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}
 800471e:	bf00      	nop
 8004720:	00100002 	.word	0x00100002
 8004724:	ffff0000 	.word	0xffff0000

08004728 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b088      	sub	sp, #32
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004740:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004748:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004750:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004752:	7bfb      	ldrb	r3, [r7, #15]
 8004754:	2b10      	cmp	r3, #16
 8004756:	d003      	beq.n	8004760 <HAL_I2C_EV_IRQHandler+0x38>
 8004758:	7bfb      	ldrb	r3, [r7, #15]
 800475a:	2b40      	cmp	r3, #64	; 0x40
 800475c:	f040 80c1 	bne.w	80048e2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	695b      	ldr	r3, [r3, #20]
 800476e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d10d      	bne.n	8004796 <HAL_I2C_EV_IRQHandler+0x6e>
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004780:	d003      	beq.n	800478a <HAL_I2C_EV_IRQHandler+0x62>
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004788:	d101      	bne.n	800478e <HAL_I2C_EV_IRQHandler+0x66>
 800478a:	2301      	movs	r3, #1
 800478c:	e000      	b.n	8004790 <HAL_I2C_EV_IRQHandler+0x68>
 800478e:	2300      	movs	r3, #0
 8004790:	2b01      	cmp	r3, #1
 8004792:	f000 8132 	beq.w	80049fa <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004796:	69fb      	ldr	r3, [r7, #28]
 8004798:	f003 0301 	and.w	r3, r3, #1
 800479c:	2b00      	cmp	r3, #0
 800479e:	d00c      	beq.n	80047ba <HAL_I2C_EV_IRQHandler+0x92>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	0a5b      	lsrs	r3, r3, #9
 80047a4:	f003 0301 	and.w	r3, r3, #1
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d006      	beq.n	80047ba <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f001 fd6e 	bl	800628e <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fcdc 	bl	8005170 <I2C_Master_SB>
 80047b8:	e092      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047ba:	69fb      	ldr	r3, [r7, #28]
 80047bc:	08db      	lsrs	r3, r3, #3
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d009      	beq.n	80047da <HAL_I2C_EV_IRQHandler+0xb2>
 80047c6:	697b      	ldr	r3, [r7, #20]
 80047c8:	0a5b      	lsrs	r3, r3, #9
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d003      	beq.n	80047da <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 fd52 	bl	800527c <I2C_Master_ADD10>
 80047d8:	e082      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	085b      	lsrs	r3, r3, #1
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d009      	beq.n	80047fa <HAL_I2C_EV_IRQHandler+0xd2>
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	0a5b      	lsrs	r3, r3, #9
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d003      	beq.n	80047fa <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80047f2:	6878      	ldr	r0, [r7, #4]
 80047f4:	f000 fd6c 	bl	80052d0 <I2C_Master_ADDR>
 80047f8:	e072      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	f003 0301 	and.w	r3, r3, #1
 8004802:	2b00      	cmp	r3, #0
 8004804:	d03b      	beq.n	800487e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004810:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004814:	f000 80f3 	beq.w	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	09db      	lsrs	r3, r3, #7
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00f      	beq.n	8004844 <HAL_I2C_EV_IRQHandler+0x11c>
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	0a9b      	lsrs	r3, r3, #10
 8004828:	f003 0301 	and.w	r3, r3, #1
 800482c:	2b00      	cmp	r3, #0
 800482e:	d009      	beq.n	8004844 <HAL_I2C_EV_IRQHandler+0x11c>
 8004830:	69fb      	ldr	r3, [r7, #28]
 8004832:	089b      	lsrs	r3, r3, #2
 8004834:	f003 0301 	and.w	r3, r3, #1
 8004838:	2b00      	cmp	r3, #0
 800483a:	d103      	bne.n	8004844 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 f94c 	bl	8004ada <I2C_MasterTransmit_TXE>
 8004842:	e04d      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	089b      	lsrs	r3, r3, #2
 8004848:	f003 0301 	and.w	r3, r3, #1
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80d6 	beq.w	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	0a5b      	lsrs	r3, r3, #9
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	f000 80cf 	beq.w	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004860:	7bbb      	ldrb	r3, [r7, #14]
 8004862:	2b21      	cmp	r3, #33	; 0x21
 8004864:	d103      	bne.n	800486e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f9d3 	bl	8004c12 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800486c:	e0c7      	b.n	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800486e:	7bfb      	ldrb	r3, [r7, #15]
 8004870:	2b40      	cmp	r3, #64	; 0x40
 8004872:	f040 80c4 	bne.w	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa41 	bl	8004cfe <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800487c:	e0bf      	b.n	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004888:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800488c:	f000 80b7 	beq.w	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	099b      	lsrs	r3, r3, #6
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b00      	cmp	r3, #0
 800489a:	d00f      	beq.n	80048bc <HAL_I2C_EV_IRQHandler+0x194>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	0a9b      	lsrs	r3, r3, #10
 80048a0:	f003 0301 	and.w	r3, r3, #1
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d009      	beq.n	80048bc <HAL_I2C_EV_IRQHandler+0x194>
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	089b      	lsrs	r3, r3, #2
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d103      	bne.n	80048bc <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f000 fab6 	bl	8004e26 <I2C_MasterReceive_RXNE>
 80048ba:	e011      	b.n	80048e0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048bc:	69fb      	ldr	r3, [r7, #28]
 80048be:	089b      	lsrs	r3, r3, #2
 80048c0:	f003 0301 	and.w	r3, r3, #1
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f000 809a 	beq.w	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	0a5b      	lsrs	r3, r3, #9
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f000 8093 	beq.w	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	f000 fb5f 	bl	8004f9c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80048de:	e08e      	b.n	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
 80048e0:	e08d      	b.n	80049fe <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d004      	beq.n	80048f4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695b      	ldr	r3, [r3, #20]
 80048f0:	61fb      	str	r3, [r7, #28]
 80048f2:	e007      	b.n	8004904 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	695b      	ldr	r3, [r3, #20]
 8004902:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	085b      	lsrs	r3, r3, #1
 8004908:	f003 0301 	and.w	r3, r3, #1
 800490c:	2b00      	cmp	r3, #0
 800490e:	d012      	beq.n	8004936 <HAL_I2C_EV_IRQHandler+0x20e>
 8004910:	697b      	ldr	r3, [r7, #20]
 8004912:	0a5b      	lsrs	r3, r3, #9
 8004914:	f003 0301 	and.w	r3, r3, #1
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	699b      	ldr	r3, [r3, #24]
 800492a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800492c:	69b9      	ldr	r1, [r7, #24]
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 ff1d 	bl	800576e <I2C_Slave_ADDR>
 8004934:	e066      	b.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004936:	69fb      	ldr	r3, [r7, #28]
 8004938:	091b      	lsrs	r3, r3, #4
 800493a:	f003 0301 	and.w	r3, r3, #1
 800493e:	2b00      	cmp	r3, #0
 8004940:	d009      	beq.n	8004956 <HAL_I2C_EV_IRQHandler+0x22e>
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	0a5b      	lsrs	r3, r3, #9
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b00      	cmp	r3, #0
 800494c:	d003      	beq.n	8004956 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	f000 ff58 	bl	8005804 <I2C_Slave_STOPF>
 8004954:	e056      	b.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004956:	7bbb      	ldrb	r3, [r7, #14]
 8004958:	2b21      	cmp	r3, #33	; 0x21
 800495a:	d002      	beq.n	8004962 <HAL_I2C_EV_IRQHandler+0x23a>
 800495c:	7bbb      	ldrb	r3, [r7, #14]
 800495e:	2b29      	cmp	r3, #41	; 0x29
 8004960:	d125      	bne.n	80049ae <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	09db      	lsrs	r3, r3, #7
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d00f      	beq.n	800498e <HAL_I2C_EV_IRQHandler+0x266>
 800496e:	697b      	ldr	r3, [r7, #20]
 8004970:	0a9b      	lsrs	r3, r3, #10
 8004972:	f003 0301 	and.w	r3, r3, #1
 8004976:	2b00      	cmp	r3, #0
 8004978:	d009      	beq.n	800498e <HAL_I2C_EV_IRQHandler+0x266>
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	f003 0301 	and.w	r3, r3, #1
 8004982:	2b00      	cmp	r3, #0
 8004984:	d103      	bne.n	800498e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 fe33 	bl	80055f2 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800498c:	e039      	b.n	8004a02 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800498e:	69fb      	ldr	r3, [r7, #28]
 8004990:	089b      	lsrs	r3, r3, #2
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d033      	beq.n	8004a02 <HAL_I2C_EV_IRQHandler+0x2da>
 800499a:	697b      	ldr	r3, [r7, #20]
 800499c:	0a5b      	lsrs	r3, r3, #9
 800499e:	f003 0301 	and.w	r3, r3, #1
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d02d      	beq.n	8004a02 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f000 fe60 	bl	800566c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ac:	e029      	b.n	8004a02 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	099b      	lsrs	r3, r3, #6
 80049b2:	f003 0301 	and.w	r3, r3, #1
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d00f      	beq.n	80049da <HAL_I2C_EV_IRQHandler+0x2b2>
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	0a9b      	lsrs	r3, r3, #10
 80049be:	f003 0301 	and.w	r3, r3, #1
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d009      	beq.n	80049da <HAL_I2C_EV_IRQHandler+0x2b2>
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	089b      	lsrs	r3, r3, #2
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d103      	bne.n	80049da <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80049d2:	6878      	ldr	r0, [r7, #4]
 80049d4:	f000 fe6b 	bl	80056ae <I2C_SlaveReceive_RXNE>
 80049d8:	e014      	b.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049da:	69fb      	ldr	r3, [r7, #28]
 80049dc:	089b      	lsrs	r3, r3, #2
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00e      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	0a5b      	lsrs	r3, r3, #9
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fe99 	bl	800572a <I2C_SlaveReceive_BTF>
 80049f8:	e004      	b.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80049fa:	bf00      	nop
 80049fc:	e002      	b.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80049fe:	bf00      	nop
 8004a00:	e000      	b.n	8004a04 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004a02:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004a04:	3720      	adds	r7, #32
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}

08004a0a <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a0a:	b480      	push	{r7}
 8004a0c:	b083      	sub	sp, #12
 8004a0e:	af00      	add	r7, sp, #0
 8004a10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr

08004a1e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a1e:	b480      	push	{r7}
 8004a20:	b083      	sub	sp, #12
 8004a22:	af00      	add	r7, sp, #0
 8004a24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr

08004a32 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a32:	b480      	push	{r7}
 8004a34:	b083      	sub	sp, #12
 8004a36:	af00      	add	r7, sp, #0
 8004a38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004a3a:	bf00      	nop
 8004a3c:	370c      	adds	r7, #12
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a44:	4770      	bx	lr

08004a46 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a46:	b480      	push	{r7}
 8004a48:	b083      	sub	sp, #12
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004a4e:	bf00      	nop
 8004a50:	370c      	adds	r7, #12
 8004a52:	46bd      	mov	sp, r7
 8004a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a58:	4770      	bx	lr

08004a5a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004a5a:	b480      	push	{r7}
 8004a5c:	b083      	sub	sp, #12
 8004a5e:	af00      	add	r7, sp, #0
 8004a60:	6078      	str	r0, [r7, #4]
 8004a62:	460b      	mov	r3, r1
 8004a64:	70fb      	strb	r3, [r7, #3]
 8004a66:	4613      	mov	r3, r2
 8004a68:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004a6a:	bf00      	nop
 8004a6c:	370c      	adds	r7, #12
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b083      	sub	sp, #12
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004a7e:	bf00      	nop
 8004a80:	370c      	adds	r7, #12
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr

08004a8a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a8a:	b480      	push	{r7}
 8004a8c:	b083      	sub	sp, #12
 8004a8e:	af00      	add	r7, sp, #0
 8004a90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004a92:	bf00      	nop
 8004a94:	370c      	adds	r7, #12
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr

08004a9e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004a9e:	b480      	push	{r7}
 8004aa0:	b083      	sub	sp, #12
 8004aa2:	af00      	add	r7, sp, #0
 8004aa4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004aa6:	bf00      	nop
 8004aa8:	370c      	adds	r7, #12
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr

08004ab2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	b083      	sub	sp, #12
 8004ab6:	af00      	add	r7, sp, #0
 8004ab8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8004aba:	bf00      	nop
 8004abc:	370c      	adds	r7, #12
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b480      	push	{r7}
 8004ac8:	b083      	sub	sp, #12
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr

08004ada <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004af0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004af6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d150      	bne.n	8004ba2 <I2C_MasterTransmit_TXE+0xc8>
 8004b00:	7bfb      	ldrb	r3, [r7, #15]
 8004b02:	2b21      	cmp	r3, #33	; 0x21
 8004b04:	d14d      	bne.n	8004ba2 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b06:	68bb      	ldr	r3, [r7, #8]
 8004b08:	2b08      	cmp	r3, #8
 8004b0a:	d01d      	beq.n	8004b48 <I2C_MasterTransmit_TXE+0x6e>
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b20      	cmp	r3, #32
 8004b10:	d01a      	beq.n	8004b48 <I2C_MasterTransmit_TXE+0x6e>
 8004b12:	68bb      	ldr	r3, [r7, #8]
 8004b14:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004b18:	d016      	beq.n	8004b48 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	685a      	ldr	r2, [r3, #4]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b28:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2211      	movs	r2, #17
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f7ff ff62 	bl	8004a0a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b46:	e060      	b.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685a      	ldr	r2, [r3, #4]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b56:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b66:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2220      	movs	r2, #32
 8004b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b40      	cmp	r3, #64	; 0x40
 8004b80:	d107      	bne.n	8004b92 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7ff ff7d 	bl	8004a8a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004b90:	e03b      	b.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f7ff ff35 	bl	8004a0a <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004ba0:	e033      	b.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
 8004ba4:	2b21      	cmp	r3, #33	; 0x21
 8004ba6:	d005      	beq.n	8004bb4 <I2C_MasterTransmit_TXE+0xda>
 8004ba8:	7bbb      	ldrb	r3, [r7, #14]
 8004baa:	2b40      	cmp	r3, #64	; 0x40
 8004bac:	d12d      	bne.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004bae:	7bfb      	ldrb	r3, [r7, #15]
 8004bb0:	2b22      	cmp	r3, #34	; 0x22
 8004bb2:	d12a      	bne.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d108      	bne.n	8004bd0 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bcc:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004bce:	e01c      	b.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	2b40      	cmp	r3, #64	; 0x40
 8004bda:	d103      	bne.n	8004be4 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f88e 	bl	8004cfe <I2C_MemoryTransmit_TXE_BTF>
}
 8004be2:	e012      	b.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	781a      	ldrb	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf4:	1c5a      	adds	r2, r3, #1
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bfe:	b29b      	uxth	r3, r3
 8004c00:	3b01      	subs	r3, #1
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004c08:	e7ff      	b.n	8004c0a <I2C_MasterTransmit_TXE+0x130>
 8004c0a:	bf00      	nop
 8004c0c:	3710      	adds	r7, #16
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b084      	sub	sp, #16
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c1e:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c26:	b2db      	uxtb	r3, r3
 8004c28:	2b21      	cmp	r3, #33	; 0x21
 8004c2a:	d164      	bne.n	8004cf6 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c30:	b29b      	uxth	r3, r3
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d012      	beq.n	8004c5c <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	781a      	ldrb	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c46:	1c5a      	adds	r2, r3, #1
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c50:	b29b      	uxth	r3, r3
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004c5a:	e04c      	b.n	8004cf6 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	2b08      	cmp	r3, #8
 8004c60:	d01d      	beq.n	8004c9e <I2C_MasterTransmit_BTF+0x8c>
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2b20      	cmp	r3, #32
 8004c66:	d01a      	beq.n	8004c9e <I2C_MasterTransmit_BTF+0x8c>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004c6e:	d016      	beq.n	8004c9e <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c7e:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2211      	movs	r2, #17
 8004c84:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2220      	movs	r2, #32
 8004c92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f7ff feb7 	bl	8004a0a <HAL_I2C_MasterTxCpltCallback>
}
 8004c9c:	e02b      	b.n	8004cf6 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	685a      	ldr	r2, [r3, #4]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cac:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004cbc:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2220      	movs	r2, #32
 8004cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b40      	cmp	r3, #64	; 0x40
 8004cd6:	d107      	bne.n	8004ce8 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8004ce0:	6878      	ldr	r0, [r7, #4]
 8004ce2:	f7ff fed2 	bl	8004a8a <HAL_I2C_MemTxCpltCallback>
}
 8004ce6:	e006      	b.n	8004cf6 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8004cf0:	6878      	ldr	r0, [r7, #4]
 8004cf2:	f7ff fe8a 	bl	8004a0a <HAL_I2C_MasterTxCpltCallback>
}
 8004cf6:	bf00      	nop
 8004cf8:	3710      	adds	r7, #16
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}

08004cfe <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cfe:	b580      	push	{r7, lr}
 8004d00:	b084      	sub	sp, #16
 8004d02:	af00      	add	r7, sp, #0
 8004d04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d0c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d11d      	bne.n	8004d52 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d10b      	bne.n	8004d36 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d22:	b2da      	uxtb	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004d34:	e073      	b.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	121b      	asrs	r3, r3, #8
 8004d3e:	b2da      	uxtb	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d50:	e065      	b.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d10b      	bne.n	8004d72 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d6a:	1c5a      	adds	r2, r3, #1
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d70:	e055      	b.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d151      	bne.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b22      	cmp	r3, #34	; 0x22
 8004d7e:	d10d      	bne.n	8004d9c <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d8e:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d94:	1c5a      	adds	r2, r3, #1
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004d9a:	e040      	b.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d015      	beq.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8004da6:	7bfb      	ldrb	r3, [r7, #15]
 8004da8:	2b21      	cmp	r3, #33	; 0x21
 8004daa:	d112      	bne.n	8004dd2 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db0:	781a      	ldrb	r2, [r3, #0]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	3b01      	subs	r3, #1
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004dd0:	e025      	b.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d120      	bne.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
 8004dde:	2b21      	cmp	r3, #33	; 0x21
 8004de0:	d11d      	bne.n	8004e1e <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	685a      	ldr	r2, [r3, #4]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004df0:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004e00:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2200      	movs	r2, #0
 8004e06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2220      	movs	r2, #32
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7ff fe36 	bl	8004a8a <HAL_I2C_MemTxCpltCallback>
}
 8004e1e:	bf00      	nop
 8004e20:	3710      	adds	r7, #16
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}

08004e26 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	2b22      	cmp	r3, #34	; 0x22
 8004e38:	f040 80ac 	bne.w	8004f94 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b03      	cmp	r3, #3
 8004e48:	d921      	bls.n	8004e8e <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	691a      	ldr	r2, [r3, #16]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e54:	b2d2      	uxtb	r2, r2
 8004e56:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5c:	1c5a      	adds	r2, r3, #1
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e66:	b29b      	uxth	r3, r3
 8004e68:	3b01      	subs	r3, #1
 8004e6a:	b29a      	uxth	r2, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e74:	b29b      	uxth	r3, r3
 8004e76:	2b03      	cmp	r3, #3
 8004e78:	f040 808c 	bne.w	8004f94 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685a      	ldr	r2, [r3, #4]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e8a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004e8c:	e082      	b.n	8004f94 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d075      	beq.n	8004f82 <I2C_MasterReceive_RXNE+0x15c>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d002      	beq.n	8004ea2 <I2C_MasterReceive_RXNE+0x7c>
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d16f      	bne.n	8004f82 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f001 f992 	bl	80061cc <I2C_WaitOnSTOPRequestThroughIT>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d142      	bne.n	8004f34 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	681a      	ldr	r2, [r3, #0]
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ebc:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004ecc:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	691a      	ldr	r2, [r3, #16]
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	b2d2      	uxtb	r2, r2
 8004eda:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	1c5a      	adds	r2, r3, #1
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	3b01      	subs	r3, #1
 8004eee:	b29a      	uxth	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2220      	movs	r2, #32
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	2b40      	cmp	r3, #64	; 0x40
 8004f06:	d10a      	bne.n	8004f1e <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2200      	movs	r2, #0
 8004f14:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7ff fdc1 	bl	8004a9e <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f1c:	e03a      	b.n	8004f94 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2212      	movs	r2, #18
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f7ff fd76 	bl	8004a1e <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f32:	e02f      	b.n	8004f94 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	685a      	ldr	r2, [r3, #4]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004f42:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	691a      	ldr	r2, [r3, #16]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4e:	b2d2      	uxtb	r2, r2
 8004f50:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f56:	1c5a      	adds	r2, r3, #1
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f60:	b29b      	uxth	r3, r3
 8004f62:	3b01      	subs	r3, #1
 8004f64:	b29a      	uxth	r2, r3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004f7a:	6878      	ldr	r0, [r7, #4]
 8004f7c:	f7ff fd99 	bl	8004ab2 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004f80:	e008      	b.n	8004f94 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f90:	605a      	str	r2, [r3, #4]
}
 8004f92:	e7ff      	b.n	8004f94 <I2C_MasterReceive_RXNE+0x16e>
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fa8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	2b04      	cmp	r3, #4
 8004fb2:	d11b      	bne.n	8004fec <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685a      	ldr	r2, [r3, #4]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fc2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	691a      	ldr	r2, [r3, #16]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd6:	1c5a      	adds	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004fe0:	b29b      	uxth	r3, r3
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	b29a      	uxth	r2, r3
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004fea:	e0bd      	b.n	8005168 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d129      	bne.n	800504a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	685a      	ldr	r2, [r3, #4]
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005004:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	2b04      	cmp	r3, #4
 800500a:	d00a      	beq.n	8005022 <I2C_MasterReceive_BTF+0x86>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	2b02      	cmp	r3, #2
 8005010:	d007      	beq.n	8005022 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005020:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	691a      	ldr	r2, [r3, #16]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800502c:	b2d2      	uxtb	r2, r2
 800502e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800503e:	b29b      	uxth	r3, r3
 8005040:	3b01      	subs	r3, #1
 8005042:	b29a      	uxth	r2, r3
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005048:	e08e      	b.n	8005168 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800504e:	b29b      	uxth	r3, r3
 8005050:	2b02      	cmp	r3, #2
 8005052:	d176      	bne.n	8005142 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d002      	beq.n	8005060 <I2C_MasterReceive_BTF+0xc4>
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2b10      	cmp	r3, #16
 800505e:	d108      	bne.n	8005072 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681a      	ldr	r2, [r3, #0]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	e019      	b.n	80050a6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2b04      	cmp	r3, #4
 8005076:	d002      	beq.n	800507e <I2C_MasterReceive_BTF+0xe2>
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	2b02      	cmp	r3, #2
 800507c:	d108      	bne.n	8005090 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e00a      	b.n	80050a6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b10      	cmp	r3, #16
 8005094:	d007      	beq.n	80050a6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	691a      	ldr	r2, [r3, #16]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b8:	1c5a      	adds	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691a      	ldr	r2, [r3, #16]
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050e8:	b29b      	uxth	r3, r3
 80050ea:	3b01      	subs	r3, #1
 80050ec:	b29a      	uxth	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005100:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2220      	movs	r2, #32
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d10a      	bne.n	800512c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2200      	movs	r2, #0
 800511a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005124:	6878      	ldr	r0, [r7, #4]
 8005126:	f7ff fcba 	bl	8004a9e <HAL_I2C_MemRxCpltCallback>
}
 800512a:	e01d      	b.n	8005168 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2212      	movs	r2, #18
 8005138:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f7ff fc6f 	bl	8004a1e <HAL_I2C_MasterRxCpltCallback>
}
 8005140:	e012      	b.n	8005168 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	691a      	ldr	r2, [r3, #16]
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800514c:	b2d2      	uxtb	r2, r2
 800514e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005154:	1c5a      	adds	r2, r3, #1
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800515e:	b29b      	uxth	r3, r3
 8005160:	3b01      	subs	r3, #1
 8005162:	b29a      	uxth	r2, r3
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005168:	bf00      	nop
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005170:	b480      	push	{r7}
 8005172:	b083      	sub	sp, #12
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b40      	cmp	r3, #64	; 0x40
 8005182:	d117      	bne.n	80051b4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005190:	b2db      	uxtb	r3, r3
 8005192:	461a      	mov	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800519c:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800519e:	e067      	b.n	8005270 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	f043 0301 	orr.w	r3, r3, #1
 80051aa:	b2da      	uxtb	r2, r3
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	611a      	str	r2, [r3, #16]
}
 80051b2:	e05d      	b.n	8005270 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80051bc:	d133      	bne.n	8005226 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b21      	cmp	r3, #33	; 0x21
 80051c8:	d109      	bne.n	80051de <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	461a      	mov	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80051da:	611a      	str	r2, [r3, #16]
 80051dc:	e008      	b.n	80051f0 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80051e2:	b2db      	uxtb	r3, r3
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d004      	beq.n	8005202 <I2C_Master_SB+0x92>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d108      	bne.n	8005214 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005206:	2b00      	cmp	r3, #0
 8005208:	d032      	beq.n	8005270 <I2C_Master_SB+0x100>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800520e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005210:	2b00      	cmp	r3, #0
 8005212:	d02d      	beq.n	8005270 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	685a      	ldr	r2, [r3, #4]
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005222:	605a      	str	r2, [r3, #4]
}
 8005224:	e024      	b.n	8005270 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10e      	bne.n	800524c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005232:	b29b      	uxth	r3, r3
 8005234:	11db      	asrs	r3, r3, #7
 8005236:	b2db      	uxtb	r3, r3
 8005238:	f003 0306 	and.w	r3, r3, #6
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f063 030f 	orn	r3, r3, #15
 8005242:	b2da      	uxtb	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	611a      	str	r2, [r3, #16]
}
 800524a:	e011      	b.n	8005270 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005250:	2b01      	cmp	r3, #1
 8005252:	d10d      	bne.n	8005270 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005258:	b29b      	uxth	r3, r3
 800525a:	11db      	asrs	r3, r3, #7
 800525c:	b2db      	uxtb	r3, r3
 800525e:	f003 0306 	and.w	r3, r3, #6
 8005262:	b2db      	uxtb	r3, r3
 8005264:	f063 030e 	orn	r3, r3, #14
 8005268:	b2da      	uxtb	r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	611a      	str	r2, [r3, #16]
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005288:	b2da      	uxtb	r2, r3
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005294:	2b00      	cmp	r3, #0
 8005296:	d004      	beq.n	80052a2 <I2C_Master_ADD10+0x26>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800529c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d108      	bne.n	80052b4 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d00c      	beq.n	80052c4 <I2C_Master_ADD10+0x48>
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	685a      	ldr	r2, [r3, #4]
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80052c2:	605a      	str	r2, [r3, #4]
  }
}
 80052c4:	bf00      	nop
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80052d0:	b480      	push	{r7}
 80052d2:	b091      	sub	sp, #68	; 0x44
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052de:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b22      	cmp	r3, #34	; 0x22
 80052f8:	f040 8169 	bne.w	80055ce <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10f      	bne.n	8005324 <I2C_Master_ADDR+0x54>
 8005304:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005308:	2b40      	cmp	r3, #64	; 0x40
 800530a:	d10b      	bne.n	8005324 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800530c:	2300      	movs	r3, #0
 800530e:	633b      	str	r3, [r7, #48]	; 0x30
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	695b      	ldr	r3, [r3, #20]
 8005316:	633b      	str	r3, [r7, #48]	; 0x30
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	699b      	ldr	r3, [r3, #24]
 800531e:	633b      	str	r3, [r7, #48]	; 0x30
 8005320:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005322:	e160      	b.n	80055e6 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11d      	bne.n	8005368 <I2C_Master_ADDR+0x98>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	691b      	ldr	r3, [r3, #16]
 8005330:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005334:	d118      	bne.n	8005368 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005336:	2300      	movs	r3, #0
 8005338:	62fb      	str	r3, [r7, #44]	; 0x2c
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	695b      	ldr	r3, [r3, #20]
 8005340:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	699b      	ldr	r3, [r3, #24]
 8005348:	62fb      	str	r3, [r7, #44]	; 0x2c
 800534a:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800535a:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005360:	1c5a      	adds	r2, r3, #1
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	651a      	str	r2, [r3, #80]	; 0x50
 8005366:	e13e      	b.n	80055e6 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	2b00      	cmp	r3, #0
 8005370:	d113      	bne.n	800539a <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005372:	2300      	movs	r3, #0
 8005374:	62bb      	str	r3, [r7, #40]	; 0x28
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	62bb      	str	r3, [r7, #40]	; 0x28
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	699b      	ldr	r3, [r3, #24]
 8005384:	62bb      	str	r3, [r7, #40]	; 0x28
 8005386:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005396:	601a      	str	r2, [r3, #0]
 8005398:	e115      	b.n	80055c6 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	f040 808a 	bne.w	80054ba <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80053a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053ac:	d137      	bne.n	800541e <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	681a      	ldr	r2, [r3, #0]
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053bc:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80053c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80053cc:	d113      	bne.n	80053f6 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681a      	ldr	r2, [r3, #0]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053de:	2300      	movs	r3, #0
 80053e0:	627b      	str	r3, [r7, #36]	; 0x24
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	695b      	ldr	r3, [r3, #20]
 80053e8:	627b      	str	r3, [r7, #36]	; 0x24
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	699b      	ldr	r3, [r3, #24]
 80053f0:	627b      	str	r3, [r7, #36]	; 0x24
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	e0e7      	b.n	80055c6 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053f6:	2300      	movs	r3, #0
 80053f8:	623b      	str	r3, [r7, #32]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	623b      	str	r3, [r7, #32]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	699b      	ldr	r3, [r3, #24]
 8005408:	623b      	str	r3, [r7, #32]
 800540a:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	681a      	ldr	r2, [r3, #0]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800541a:	601a      	str	r2, [r3, #0]
 800541c:	e0d3      	b.n	80055c6 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800541e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005420:	2b08      	cmp	r3, #8
 8005422:	d02e      	beq.n	8005482 <I2C_Master_ADDR+0x1b2>
 8005424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005426:	2b20      	cmp	r3, #32
 8005428:	d02b      	beq.n	8005482 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	2b12      	cmp	r3, #18
 800542e:	d102      	bne.n	8005436 <I2C_Master_ADDR+0x166>
 8005430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005432:	2b01      	cmp	r3, #1
 8005434:	d125      	bne.n	8005482 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005438:	2b04      	cmp	r3, #4
 800543a:	d00e      	beq.n	800545a <I2C_Master_ADDR+0x18a>
 800543c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543e:	2b02      	cmp	r3, #2
 8005440:	d00b      	beq.n	800545a <I2C_Master_ADDR+0x18a>
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	2b10      	cmp	r3, #16
 8005446:	d008      	beq.n	800545a <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	681a      	ldr	r2, [r3, #0]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005456:	601a      	str	r2, [r3, #0]
 8005458:	e007      	b.n	800546a <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005468:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800546a:	2300      	movs	r3, #0
 800546c:	61fb      	str	r3, [r7, #28]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	695b      	ldr	r3, [r3, #20]
 8005474:	61fb      	str	r3, [r7, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	e0a1      	b.n	80055c6 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005490:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005492:	2300      	movs	r3, #0
 8005494:	61bb      	str	r3, [r7, #24]
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695b      	ldr	r3, [r3, #20]
 800549c:	61bb      	str	r3, [r7, #24]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	699b      	ldr	r3, [r3, #24]
 80054a4:	61bb      	str	r3, [r7, #24]
 80054a6:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054b6:	601a      	str	r2, [r3, #0]
 80054b8:	e085      	b.n	80055c6 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054be:	b29b      	uxth	r3, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d14d      	bne.n	8005560 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80054c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c6:	2b04      	cmp	r3, #4
 80054c8:	d016      	beq.n	80054f8 <I2C_Master_ADDR+0x228>
 80054ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d013      	beq.n	80054f8 <I2C_Master_ADDR+0x228>
 80054d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d2:	2b10      	cmp	r3, #16
 80054d4:	d010      	beq.n	80054f8 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054e4:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681a      	ldr	r2, [r3, #0]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054f4:	601a      	str	r2, [r3, #0]
 80054f6:	e007      	b.n	8005508 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005506:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005512:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005516:	d117      	bne.n	8005548 <I2C_Master_ADDR+0x278>
 8005518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800551a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800551e:	d00b      	beq.n	8005538 <I2C_Master_ADDR+0x268>
 8005520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005522:	2b01      	cmp	r3, #1
 8005524:	d008      	beq.n	8005538 <I2C_Master_ADDR+0x268>
 8005526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005528:	2b08      	cmp	r3, #8
 800552a:	d005      	beq.n	8005538 <I2C_Master_ADDR+0x268>
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	2b10      	cmp	r3, #16
 8005530:	d002      	beq.n	8005538 <I2C_Master_ADDR+0x268>
 8005532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005534:	2b20      	cmp	r3, #32
 8005536:	d107      	bne.n	8005548 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	685a      	ldr	r2, [r3, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005546:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005548:	2300      	movs	r3, #0
 800554a:	617b      	str	r3, [r7, #20]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	617b      	str	r3, [r7, #20]
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	617b      	str	r3, [r7, #20]
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	e032      	b.n	80055c6 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	681a      	ldr	r2, [r3, #0]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800556e:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800557a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557e:	d117      	bne.n	80055b0 <I2C_Master_ADDR+0x2e0>
 8005580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005582:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005586:	d00b      	beq.n	80055a0 <I2C_Master_ADDR+0x2d0>
 8005588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800558a:	2b01      	cmp	r3, #1
 800558c:	d008      	beq.n	80055a0 <I2C_Master_ADDR+0x2d0>
 800558e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005590:	2b08      	cmp	r3, #8
 8005592:	d005      	beq.n	80055a0 <I2C_Master_ADDR+0x2d0>
 8005594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005596:	2b10      	cmp	r3, #16
 8005598:	d002      	beq.n	80055a0 <I2C_Master_ADDR+0x2d0>
 800559a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800559c:	2b20      	cmp	r3, #32
 800559e:	d107      	bne.n	80055b0 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	685a      	ldr	r2, [r3, #4]
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055ae:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	695b      	ldr	r3, [r3, #20]
 80055ba:	613b      	str	r3, [r7, #16]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	613b      	str	r3, [r7, #16]
 80055c4:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80055cc:	e00b      	b.n	80055e6 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055ce:	2300      	movs	r3, #0
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	695b      	ldr	r3, [r3, #20]
 80055d8:	60fb      	str	r3, [r7, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	699b      	ldr	r3, [r3, #24]
 80055e0:	60fb      	str	r3, [r7, #12]
 80055e2:	68fb      	ldr	r3, [r7, #12]
}
 80055e4:	e7ff      	b.n	80055e6 <I2C_Master_ADDR+0x316>
 80055e6:	bf00      	nop
 80055e8:	3744      	adds	r7, #68	; 0x44
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80055f2:	b580      	push	{r7, lr}
 80055f4:	b084      	sub	sp, #16
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005600:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005606:	b29b      	uxth	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d02b      	beq.n	8005664 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005610:	781a      	ldrb	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800561c:	1c5a      	adds	r2, r3, #1
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005626:	b29b      	uxth	r3, r3
 8005628:	3b01      	subs	r3, #1
 800562a:	b29a      	uxth	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005634:	b29b      	uxth	r3, r3
 8005636:	2b00      	cmp	r3, #0
 8005638:	d114      	bne.n	8005664 <I2C_SlaveTransmit_TXE+0x72>
 800563a:	7bfb      	ldrb	r3, [r7, #15]
 800563c:	2b29      	cmp	r3, #41	; 0x29
 800563e:	d111      	bne.n	8005664 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685a      	ldr	r2, [r3, #4]
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800564e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2221      	movs	r2, #33	; 0x21
 8005654:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2228      	movs	r2, #40	; 0x28
 800565a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff f9e7 	bl	8004a32 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005664:	bf00      	nop
 8005666:	3710      	adds	r7, #16
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005678:	b29b      	uxth	r3, r3
 800567a:	2b00      	cmp	r3, #0
 800567c:	d011      	beq.n	80056a2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005682:	781a      	ldrb	r2, [r3, #0]
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ac:	4770      	bx	lr

080056ae <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80056ae:	b580      	push	{r7, lr}
 80056b0:	b084      	sub	sp, #16
 80056b2:	af00      	add	r7, sp, #0
 80056b4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056bc:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056c2:	b29b      	uxth	r3, r3
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d02c      	beq.n	8005722 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056da:	1c5a      	adds	r2, r3, #1
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e4:	b29b      	uxth	r3, r3
 80056e6:	3b01      	subs	r3, #1
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d114      	bne.n	8005722 <I2C_SlaveReceive_RXNE+0x74>
 80056f8:	7bfb      	ldrb	r3, [r7, #15]
 80056fa:	2b2a      	cmp	r3, #42	; 0x2a
 80056fc:	d111      	bne.n	8005722 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	685a      	ldr	r2, [r3, #4]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800570c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	2222      	movs	r2, #34	; 0x22
 8005712:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	2228      	movs	r2, #40	; 0x28
 8005718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800571c:	6878      	ldr	r0, [r7, #4]
 800571e:	f7ff f992 	bl	8004a46 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005722:	bf00      	nop
 8005724:	3710      	adds	r7, #16
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800572a:	b480      	push	{r7}
 800572c:	b083      	sub	sp, #12
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005736:	b29b      	uxth	r3, r3
 8005738:	2b00      	cmp	r3, #0
 800573a:	d012      	beq.n	8005762 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	691a      	ldr	r2, [r3, #16]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005746:	b2d2      	uxtb	r2, r2
 8005748:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005758:	b29b      	uxth	r3, r3
 800575a:	3b01      	subs	r3, #1
 800575c:	b29a      	uxth	r2, r3
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005762:	bf00      	nop
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b084      	sub	sp, #16
 8005772:	af00      	add	r7, sp, #0
 8005774:	6078      	str	r0, [r7, #4]
 8005776:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005778:	2300      	movs	r3, #0
 800577a:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005782:	b2db      	uxtb	r3, r3
 8005784:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005788:	2b28      	cmp	r3, #40	; 0x28
 800578a:	d127      	bne.n	80057dc <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685a      	ldr	r2, [r3, #4]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800579a:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	089b      	lsrs	r3, r3, #2
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d101      	bne.n	80057ac <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80057a8:	2301      	movs	r3, #1
 80057aa:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	09db      	lsrs	r3, r3, #7
 80057b0:	f003 0301 	and.w	r3, r3, #1
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d103      	bne.n	80057c0 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68db      	ldr	r3, [r3, #12]
 80057bc:	81bb      	strh	r3, [r7, #12]
 80057be:	e002      	b.n	80057c6 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	699b      	ldr	r3, [r3, #24]
 80057c4:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80057ce:	89ba      	ldrh	r2, [r7, #12]
 80057d0:	7bfb      	ldrb	r3, [r7, #15]
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f7ff f940 	bl	8004a5a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80057da:	e00e      	b.n	80057fa <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057dc:	2300      	movs	r3, #0
 80057de:	60bb      	str	r3, [r7, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	60bb      	str	r3, [r7, #8]
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	60bb      	str	r3, [r7, #8]
 80057f0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2200      	movs	r2, #0
 80057f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80057fa:	bf00      	nop
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005812:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	685a      	ldr	r2, [r3, #4]
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005822:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005824:	2300      	movs	r3, #0
 8005826:	60bb      	str	r3, [r7, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	60bb      	str	r3, [r7, #8]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	681a      	ldr	r2, [r3, #0]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f042 0201 	orr.w	r2, r2, #1
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005850:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800585c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005860:	d172      	bne.n	8005948 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005862:	7bfb      	ldrb	r3, [r7, #15]
 8005864:	2b22      	cmp	r3, #34	; 0x22
 8005866:	d002      	beq.n	800586e <I2C_Slave_STOPF+0x6a>
 8005868:	7bfb      	ldrb	r3, [r7, #15]
 800586a:	2b2a      	cmp	r3, #42	; 0x2a
 800586c:	d135      	bne.n	80058da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	b29a      	uxth	r2, r3
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b00      	cmp	r3, #0
 8005884:	d005      	beq.n	8005892 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588a:	f043 0204 	orr.w	r2, r3, #4
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7fe fa34 	bl	8003d14 <HAL_DMA_GetState>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b01      	cmp	r3, #1
 80058b0:	d049      	beq.n	8005946 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058b6:	4a69      	ldr	r2, [pc, #420]	; (8005a5c <I2C_Slave_STOPF+0x258>)
 80058b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fe f87c 	bl	80039bc <HAL_DMA_Abort_IT>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d03d      	beq.n	8005946 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058d0:	687a      	ldr	r2, [r7, #4]
 80058d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80058d4:	4610      	mov	r0, r2
 80058d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80058d8:	e035      	b.n	8005946 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	685b      	ldr	r3, [r3, #4]
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d005      	beq.n	80058fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f043 0204 	orr.w	r2, r3, #4
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	685a      	ldr	r2, [r3, #4]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800590c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	4618      	mov	r0, r3
 8005914:	f7fe f9fe 	bl	8003d14 <HAL_DMA_GetState>
 8005918:	4603      	mov	r3, r0
 800591a:	2b01      	cmp	r3, #1
 800591c:	d014      	beq.n	8005948 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005922:	4a4e      	ldr	r2, [pc, #312]	; (8005a5c <I2C_Slave_STOPF+0x258>)
 8005924:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800592a:	4618      	mov	r0, r3
 800592c:	f7fe f846 	bl	80039bc <HAL_DMA_Abort_IT>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d008      	beq.n	8005948 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800593a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800593c:	687a      	ldr	r2, [r7, #4]
 800593e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005940:	4610      	mov	r0, r2
 8005942:	4798      	blx	r3
 8005944:	e000      	b.n	8005948 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005946:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800594c:	b29b      	uxth	r3, r3
 800594e:	2b00      	cmp	r3, #0
 8005950:	d03e      	beq.n	80059d0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695b      	ldr	r3, [r3, #20]
 8005958:	f003 0304 	and.w	r3, r3, #4
 800595c:	2b04      	cmp	r3, #4
 800595e:	d112      	bne.n	8005986 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	691a      	ldr	r2, [r3, #16]
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	1c5a      	adds	r2, r3, #1
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800597c:	b29b      	uxth	r3, r3
 800597e:	3b01      	subs	r3, #1
 8005980:	b29a      	uxth	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	695b      	ldr	r3, [r3, #20]
 800598c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005990:	2b40      	cmp	r3, #64	; 0x40
 8005992:	d112      	bne.n	80059ba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	691a      	ldr	r2, [r3, #16]
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800599e:	b2d2      	uxtb	r2, r2
 80059a0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059a6:	1c5a      	adds	r2, r3, #1
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059b0:	b29b      	uxth	r3, r3
 80059b2:	3b01      	subs	r3, #1
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059be:	b29b      	uxth	r3, r3
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	f043 0204 	orr.w	r2, r3, #4
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f843 	bl	8005a64 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80059de:	e039      	b.n	8005a54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80059e0:	7bfb      	ldrb	r3, [r7, #15]
 80059e2:	2b2a      	cmp	r3, #42	; 0x2a
 80059e4:	d109      	bne.n	80059fa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2228      	movs	r2, #40	; 0x28
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f7ff f826 	bl	8004a46 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b28      	cmp	r3, #40	; 0x28
 8005a04:	d111      	bne.n	8005a2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <I2C_Slave_STOPF+0x25c>)
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2220      	movs	r2, #32
 8005a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8005a22:	6878      	ldr	r0, [r7, #4]
 8005a24:	f7ff f827 	bl	8004a76 <HAL_I2C_ListenCpltCallback>
}
 8005a28:	e014      	b.n	8005a54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a2e:	2b22      	cmp	r3, #34	; 0x22
 8005a30:	d002      	beq.n	8005a38 <I2C_Slave_STOPF+0x234>
 8005a32:	7bfb      	ldrb	r3, [r7, #15]
 8005a34:	2b22      	cmp	r3, #34	; 0x22
 8005a36:	d10d      	bne.n	8005a54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2220      	movs	r2, #32
 8005a42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7fe fff9 	bl	8004a46 <HAL_I2C_SlaveRxCpltCallback>
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	08005dcd 	.word	0x08005dcd
 8005a60:	ffff0000 	.word	0xffff0000

08005a64 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a72:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a7a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005a7c:	7bbb      	ldrb	r3, [r7, #14]
 8005a7e:	2b10      	cmp	r3, #16
 8005a80:	d002      	beq.n	8005a88 <I2C_ITError+0x24>
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	2b40      	cmp	r3, #64	; 0x40
 8005a86:	d10a      	bne.n	8005a9e <I2C_ITError+0x3a>
 8005a88:	7bfb      	ldrb	r3, [r7, #15]
 8005a8a:	2b22      	cmp	r3, #34	; 0x22
 8005a8c:	d107      	bne.n	8005a9e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005a9c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005a9e:	7bfb      	ldrb	r3, [r7, #15]
 8005aa0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005aa4:	2b28      	cmp	r3, #40	; 0x28
 8005aa6:	d107      	bne.n	8005ab8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2228      	movs	r2, #40	; 0x28
 8005ab2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ab6:	e015      	b.n	8005ae4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ac2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ac6:	d00a      	beq.n	8005ade <I2C_ITError+0x7a>
 8005ac8:	7bfb      	ldrb	r3, [r7, #15]
 8005aca:	2b60      	cmp	r3, #96	; 0x60
 8005acc:	d007      	beq.n	8005ade <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2220      	movs	r2, #32
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005aee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af2:	d162      	bne.n	8005bba <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b02:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d020      	beq.n	8005b54 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b16:	4a6a      	ldr	r2, [pc, #424]	; (8005cc0 <I2C_ITError+0x25c>)
 8005b18:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7fd ff4c 	bl	80039bc <HAL_DMA_Abort_IT>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	f000 8089 	beq.w	8005c3e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f022 0201 	bic.w	r2, r2, #1
 8005b3a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2220      	movs	r2, #32
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b4a:	687a      	ldr	r2, [r7, #4]
 8005b4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005b4e:	4610      	mov	r0, r2
 8005b50:	4798      	blx	r3
 8005b52:	e074      	b.n	8005c3e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	4a59      	ldr	r2, [pc, #356]	; (8005cc0 <I2C_ITError+0x25c>)
 8005b5a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fd ff2b 	bl	80039bc <HAL_DMA_Abort_IT>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d068      	beq.n	8005c3e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	695b      	ldr	r3, [r3, #20]
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	2b40      	cmp	r3, #64	; 0x40
 8005b78:	d10b      	bne.n	8005b92 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	691a      	ldr	r2, [r3, #16]
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b84:	b2d2      	uxtb	r2, r2
 8005b86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8c:	1c5a      	adds	r2, r3, #1
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 0201 	bic.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bb0:	687a      	ldr	r2, [r7, #4]
 8005bb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005bb4:	4610      	mov	r0, r2
 8005bb6:	4798      	blx	r3
 8005bb8:	e041      	b.n	8005c3e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b60      	cmp	r3, #96	; 0x60
 8005bc4:	d125      	bne.n	8005c12 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bde:	2b40      	cmp	r3, #64	; 0x40
 8005be0:	d10b      	bne.n	8005bfa <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	691a      	ldr	r2, [r3, #16]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bec:	b2d2      	uxtb	r2, r2
 8005bee:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bf4:	1c5a      	adds	r2, r3, #1
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0201 	bic.w	r2, r2, #1
 8005c08:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	f7fe ff5b 	bl	8004ac6 <HAL_I2C_AbortCpltCallback>
 8005c10:	e015      	b.n	8005c3e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	695b      	ldr	r3, [r3, #20]
 8005c18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1c:	2b40      	cmp	r3, #64	; 0x40
 8005c1e:	d10b      	bne.n	8005c38 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	691a      	ldr	r2, [r3, #16]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c2a:	b2d2      	uxtb	r2, r2
 8005c2c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c32:	1c5a      	adds	r2, r3, #1
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7fe ff3a 	bl	8004ab2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	f003 0301 	and.w	r3, r3, #1
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d10e      	bne.n	8005c6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d109      	bne.n	8005c6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d104      	bne.n	8005c6c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d007      	beq.n	8005c7c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005c7a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c82:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c88:	f003 0304 	and.w	r3, r3, #4
 8005c8c:	2b04      	cmp	r3, #4
 8005c8e:	d113      	bne.n	8005cb8 <I2C_ITError+0x254>
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b28      	cmp	r3, #40	; 0x28
 8005c94:	d110      	bne.n	8005cb8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a0a      	ldr	r2, [pc, #40]	; (8005cc4 <I2C_ITError+0x260>)
 8005c9a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	2220      	movs	r2, #32
 8005ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f7fe fedf 	bl	8004a76 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005cb8:	bf00      	nop
 8005cba:	3710      	adds	r7, #16
 8005cbc:	46bd      	mov	sp, r7
 8005cbe:	bd80      	pop	{r7, pc}
 8005cc0:	08005dcd 	.word	0x08005dcd
 8005cc4:	ffff0000 	.word	0xffff0000

08005cc8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b088      	sub	sp, #32
 8005ccc:	af02      	add	r7, sp, #8
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	607a      	str	r2, [r7, #4]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cdc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b08      	cmp	r3, #8
 8005ce2:	d006      	beq.n	8005cf2 <I2C_MasterRequestWrite+0x2a>
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b01      	cmp	r3, #1
 8005ce8:	d003      	beq.n	8005cf2 <I2C_MasterRequestWrite+0x2a>
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cf0:	d108      	bne.n	8005d04 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	681a      	ldr	r2, [r3, #0]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	e00b      	b.n	8005d1c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d08:	2b12      	cmp	r3, #18
 8005d0a:	d107      	bne.n	8005d1c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d1a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d1c:	683b      	ldr	r3, [r7, #0]
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2200      	movs	r2, #0
 8005d24:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f8f7 	bl	8005f1c <I2C_WaitOnFlagUntilTimeout>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00d      	beq.n	8005d50 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d42:	d103      	bne.n	8005d4c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	e035      	b.n	8005dbc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	691b      	ldr	r3, [r3, #16]
 8005d54:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d58:	d108      	bne.n	8005d6c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d5a:	897b      	ldrh	r3, [r7, #10]
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	461a      	mov	r2, r3
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005d68:	611a      	str	r2, [r3, #16]
 8005d6a:	e01b      	b.n	8005da4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005d6c:	897b      	ldrh	r3, [r7, #10]
 8005d6e:	11db      	asrs	r3, r3, #7
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	f003 0306 	and.w	r3, r3, #6
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	f063 030f 	orn	r3, r3, #15
 8005d7c:	b2da      	uxtb	r2, r3
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	687a      	ldr	r2, [r7, #4]
 8005d88:	490e      	ldr	r1, [pc, #56]	; (8005dc4 <I2C_MasterRequestWrite+0xfc>)
 8005d8a:	68f8      	ldr	r0, [r7, #12]
 8005d8c:	f000 f91d 	bl	8005fca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d90:	4603      	mov	r3, r0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8005d96:	2301      	movs	r3, #1
 8005d98:	e010      	b.n	8005dbc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005d9a:	897b      	ldrh	r3, [r7, #10]
 8005d9c:	b2da      	uxtb	r2, r3
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	687a      	ldr	r2, [r7, #4]
 8005da8:	4907      	ldr	r1, [pc, #28]	; (8005dc8 <I2C_MasterRequestWrite+0x100>)
 8005daa:	68f8      	ldr	r0, [r7, #12]
 8005dac:	f000 f90d 	bl	8005fca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d001      	beq.n	8005dba <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e000      	b.n	8005dbc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005dba:	2300      	movs	r3, #0
}
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	3718      	adds	r7, #24
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}
 8005dc4:	00010008 	.word	0x00010008
 8005dc8:	00010002 	.word	0x00010002

08005dcc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b086      	sub	sp, #24
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ddc:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dde:	697b      	ldr	r3, [r7, #20]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005de6:	4b4b      	ldr	r3, [pc, #300]	; (8005f14 <I2C_DMAAbort+0x148>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	08db      	lsrs	r3, r3, #3
 8005dec:	4a4a      	ldr	r2, [pc, #296]	; (8005f18 <I2C_DMAAbort+0x14c>)
 8005dee:	fba2 2303 	umull	r2, r3, r2, r3
 8005df2:	0a1a      	lsrs	r2, r3, #8
 8005df4:	4613      	mov	r3, r2
 8005df6:	009b      	lsls	r3, r3, #2
 8005df8:	4413      	add	r3, r2
 8005dfa:	00da      	lsls	r2, r3, #3
 8005dfc:	1ad3      	subs	r3, r2, r3
 8005dfe:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d106      	bne.n	8005e14 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e0a:	f043 0220 	orr.w	r2, r3, #32
 8005e0e:	697b      	ldr	r3, [r7, #20]
 8005e10:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005e12:	e00a      	b.n	8005e2a <I2C_DMAAbort+0x5e>
    }
    count--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	3b01      	subs	r3, #1
 8005e18:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005e1a:	697b      	ldr	r3, [r7, #20]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005e28:	d0ea      	beq.n	8005e00 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e36:	2200      	movs	r2, #0
 8005e38:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d003      	beq.n	8005e4a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e46:	2200      	movs	r2, #0
 8005e48:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	697b      	ldr	r3, [r7, #20]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e58:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d003      	beq.n	8005e70 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d003      	beq.n	8005e80 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005e78:	697b      	ldr	r3, [r7, #20]
 8005e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005e80:	697b      	ldr	r3, [r7, #20]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	681a      	ldr	r2, [r3, #0]
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f022 0201 	bic.w	r2, r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b60      	cmp	r3, #96	; 0x60
 8005e9a:	d10e      	bne.n	8005eba <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	2220      	movs	r2, #32
 8005ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005eac:	697b      	ldr	r3, [r7, #20]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005eb2:	6978      	ldr	r0, [r7, #20]
 8005eb4:	f7fe fe07 	bl	8004ac6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005eb8:	e027      	b.n	8005f0a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eba:	7cfb      	ldrb	r3, [r7, #19]
 8005ebc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ec0:	2b28      	cmp	r3, #40	; 0x28
 8005ec2:	d117      	bne.n	8005ef4 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ee2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005ee4:	697b      	ldr	r3, [r7, #20]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	2228      	movs	r2, #40	; 0x28
 8005eee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005ef2:	e007      	b.n	8005f04 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	2220      	movs	r2, #32
 8005ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	2200      	movs	r2, #0
 8005f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005f04:	6978      	ldr	r0, [r7, #20]
 8005f06:	f7fe fdd4 	bl	8004ab2 <HAL_I2C_ErrorCallback>
}
 8005f0a:	bf00      	nop
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	bd80      	pop	{r7, pc}
 8005f12:	bf00      	nop
 8005f14:	20000008 	.word	0x20000008
 8005f18:	14f8b589 	.word	0x14f8b589

08005f1c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	603b      	str	r3, [r7, #0]
 8005f28:	4613      	mov	r3, r2
 8005f2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f2c:	e025      	b.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f34:	d021      	beq.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f36:	f7fc fde3 	bl	8002b00 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	69bb      	ldr	r3, [r7, #24]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d302      	bcc.n	8005f4c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d116      	bne.n	8005f7a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	2220      	movs	r2, #32
 8005f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	f043 0220 	orr.w	r2, r3, #32
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2200      	movs	r2, #0
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005f76:	2301      	movs	r3, #1
 8005f78:	e023      	b.n	8005fc2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f7a:	68bb      	ldr	r3, [r7, #8]
 8005f7c:	0c1b      	lsrs	r3, r3, #16
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d10d      	bne.n	8005fa0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695b      	ldr	r3, [r3, #20]
 8005f8a:	43da      	mvns	r2, r3
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	4013      	ands	r3, r2
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	bf0c      	ite	eq
 8005f96:	2301      	moveq	r3, #1
 8005f98:	2300      	movne	r3, #0
 8005f9a:	b2db      	uxtb	r3, r3
 8005f9c:	461a      	mov	r2, r3
 8005f9e:	e00c      	b.n	8005fba <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	699b      	ldr	r3, [r3, #24]
 8005fa6:	43da      	mvns	r2, r3
 8005fa8:	68bb      	ldr	r3, [r7, #8]
 8005faa:	4013      	ands	r3, r2
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	bf0c      	ite	eq
 8005fb2:	2301      	moveq	r3, #1
 8005fb4:	2300      	movne	r3, #0
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	79fb      	ldrb	r3, [r7, #7]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d0b6      	beq.n	8005f2e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005fc0:	2300      	movs	r3, #0
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b084      	sub	sp, #16
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	60f8      	str	r0, [r7, #12]
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	607a      	str	r2, [r7, #4]
 8005fd6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fd8:	e051      	b.n	800607e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695b      	ldr	r3, [r3, #20]
 8005fe0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005fe4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fe8:	d123      	bne.n	8006032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	681a      	ldr	r2, [r3, #0]
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005ff8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006002:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	2220      	movs	r2, #32
 800600e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f043 0204 	orr.w	r2, r3, #4
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e046      	b.n	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006038:	d021      	beq.n	800607e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800603a:	f7fc fd61 	bl	8002b00 <HAL_GetTick>
 800603e:	4602      	mov	r2, r0
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	1ad3      	subs	r3, r2, r3
 8006044:	687a      	ldr	r2, [r7, #4]
 8006046:	429a      	cmp	r2, r3
 8006048:	d302      	bcc.n	8006050 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d116      	bne.n	800607e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2200      	movs	r2, #0
 8006054:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2220      	movs	r2, #32
 800605a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	2200      	movs	r2, #0
 8006062:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800606a:	f043 0220 	orr.w	r2, r3, #32
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800607a:	2301      	movs	r3, #1
 800607c:	e020      	b.n	80060c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	0c1b      	lsrs	r3, r3, #16
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b01      	cmp	r3, #1
 8006086:	d10c      	bne.n	80060a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	695b      	ldr	r3, [r3, #20]
 800608e:	43da      	mvns	r2, r3
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	4013      	ands	r3, r2
 8006094:	b29b      	uxth	r3, r3
 8006096:	2b00      	cmp	r3, #0
 8006098:	bf14      	ite	ne
 800609a:	2301      	movne	r3, #1
 800609c:	2300      	moveq	r3, #0
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	e00b      	b.n	80060ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	699b      	ldr	r3, [r3, #24]
 80060a8:	43da      	mvns	r2, r3
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	4013      	ands	r3, r2
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	bf14      	ite	ne
 80060b4:	2301      	movne	r3, #1
 80060b6:	2300      	moveq	r3, #0
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d18d      	bne.n	8005fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80060be:	2300      	movs	r3, #0
}
 80060c0:	4618      	mov	r0, r3
 80060c2:	3710      	adds	r7, #16
 80060c4:	46bd      	mov	sp, r7
 80060c6:	bd80      	pop	{r7, pc}

080060c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060c8:	b580      	push	{r7, lr}
 80060ca:	b084      	sub	sp, #16
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	60f8      	str	r0, [r7, #12]
 80060d0:	60b9      	str	r1, [r7, #8]
 80060d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80060d4:	e02d      	b.n	8006132 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80060d6:	68f8      	ldr	r0, [r7, #12]
 80060d8:	f000 f8aa 	bl	8006230 <I2C_IsAcknowledgeFailed>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	e02d      	b.n	8006142 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d021      	beq.n	8006132 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80060ee:	f7fc fd07 	bl	8002b00 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	1ad3      	subs	r3, r2, r3
 80060f8:	68ba      	ldr	r2, [r7, #8]
 80060fa:	429a      	cmp	r2, r3
 80060fc:	d302      	bcc.n	8006104 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80060fe:	68bb      	ldr	r3, [r7, #8]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d116      	bne.n	8006132 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2200      	movs	r2, #0
 8006108:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2220      	movs	r2, #32
 800610e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f043 0220 	orr.w	r2, r3, #32
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800612e:	2301      	movs	r3, #1
 8006130:	e007      	b.n	8006142 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800613c:	2b80      	cmp	r3, #128	; 0x80
 800613e:	d1ca      	bne.n	80060d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3710      	adds	r7, #16
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	60f8      	str	r0, [r7, #12]
 8006152:	60b9      	str	r1, [r7, #8]
 8006154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006156:	e02d      	b.n	80061b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006158:	68f8      	ldr	r0, [r7, #12]
 800615a:	f000 f869 	bl	8006230 <I2C_IsAcknowledgeFailed>
 800615e:	4603      	mov	r3, r0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d001      	beq.n	8006168 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006164:	2301      	movs	r3, #1
 8006166:	e02d      	b.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006168:	68bb      	ldr	r3, [r7, #8]
 800616a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800616e:	d021      	beq.n	80061b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006170:	f7fc fcc6 	bl	8002b00 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	68ba      	ldr	r2, [r7, #8]
 800617c:	429a      	cmp	r2, r3
 800617e:	d302      	bcc.n	8006186 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d116      	bne.n	80061b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	2220      	movs	r2, #32
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a0:	f043 0220 	orr.w	r2, r3, #32
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e007      	b.n	80061c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f003 0304 	and.w	r3, r3, #4
 80061be:	2b04      	cmp	r3, #4
 80061c0:	d1ca      	bne.n	8006158 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80061c2:	2300      	movs	r3, #0
}
 80061c4:	4618      	mov	r0, r3
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80061d4:	2300      	movs	r3, #0
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80061d8:	4b13      	ldr	r3, [pc, #76]	; (8006228 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	08db      	lsrs	r3, r3, #3
 80061de:	4a13      	ldr	r2, [pc, #76]	; (800622c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80061e0:	fba2 2303 	umull	r2, r3, r2, r3
 80061e4:	0a1a      	lsrs	r2, r3, #8
 80061e6:	4613      	mov	r3, r2
 80061e8:	009b      	lsls	r3, r3, #2
 80061ea:	4413      	add	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d107      	bne.n	800620a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061fe:	f043 0220 	orr.w	r2, r3, #32
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006206:	2301      	movs	r3, #1
 8006208:	e008      	b.n	800621c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006218:	d0e9      	beq.n	80061ee <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800621a:	2300      	movs	r3, #0
}
 800621c:	4618      	mov	r0, r3
 800621e:	3714      	adds	r7, #20
 8006220:	46bd      	mov	sp, r7
 8006222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006226:	4770      	bx	lr
 8006228:	20000008 	.word	0x20000008
 800622c:	14f8b589 	.word	0x14f8b589

08006230 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	695b      	ldr	r3, [r3, #20]
 800623e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006246:	d11b      	bne.n	8006280 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006250:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2220      	movs	r2, #32
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800626c:	f043 0204 	orr.w	r2, r3, #4
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800627c:	2301      	movs	r3, #1
 800627e:	e000      	b.n	8006282 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	370c      	adds	r7, #12
 8006286:	46bd      	mov	sp, r7
 8006288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800628c:	4770      	bx	lr

0800628e <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800628e:	b480      	push	{r7}
 8006290:	b083      	sub	sp, #12
 8006292:	af00      	add	r7, sp, #0
 8006294:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800629a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800629e:	d103      	bne.n	80062a8 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2201      	movs	r2, #1
 80062a4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80062a6:	e007      	b.n	80062b8 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062ac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80062b0:	d102      	bne.n	80062b8 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2208      	movs	r2, #8
 80062b6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e267      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0301 	and.w	r3, r3, #1
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d075      	beq.n	80063ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062e2:	4b88      	ldr	r3, [pc, #544]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b04      	cmp	r3, #4
 80062ec:	d00c      	beq.n	8006308 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062ee:	4b85      	ldr	r3, [pc, #532]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d112      	bne.n	8006320 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062fa:	4b82      	ldr	r3, [pc, #520]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006302:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006306:	d10b      	bne.n	8006320 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006308:	4b7e      	ldr	r3, [pc, #504]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006310:	2b00      	cmp	r3, #0
 8006312:	d05b      	beq.n	80063cc <HAL_RCC_OscConfig+0x108>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d157      	bne.n	80063cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e242      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	685b      	ldr	r3, [r3, #4]
 8006324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006328:	d106      	bne.n	8006338 <HAL_RCC_OscConfig+0x74>
 800632a:	4b76      	ldr	r3, [pc, #472]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a75      	ldr	r2, [pc, #468]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006334:	6013      	str	r3, [r2, #0]
 8006336:	e01d      	b.n	8006374 <HAL_RCC_OscConfig+0xb0>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006340:	d10c      	bne.n	800635c <HAL_RCC_OscConfig+0x98>
 8006342:	4b70      	ldr	r3, [pc, #448]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4a6f      	ldr	r2, [pc, #444]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800634c:	6013      	str	r3, [r2, #0]
 800634e:	4b6d      	ldr	r3, [pc, #436]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a6c      	ldr	r2, [pc, #432]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e00b      	b.n	8006374 <HAL_RCC_OscConfig+0xb0>
 800635c:	4b69      	ldr	r3, [pc, #420]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a68      	ldr	r2, [pc, #416]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006366:	6013      	str	r3, [r2, #0]
 8006368:	4b66      	ldr	r3, [pc, #408]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a65      	ldr	r2, [pc, #404]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 800636e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	685b      	ldr	r3, [r3, #4]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d013      	beq.n	80063a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800637c:	f7fc fbc0 	bl	8002b00 <HAL_GetTick>
 8006380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006382:	e008      	b.n	8006396 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006384:	f7fc fbbc 	bl	8002b00 <HAL_GetTick>
 8006388:	4602      	mov	r2, r0
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	1ad3      	subs	r3, r2, r3
 800638e:	2b64      	cmp	r3, #100	; 0x64
 8006390:	d901      	bls.n	8006396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006392:	2303      	movs	r3, #3
 8006394:	e207      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006396:	4b5b      	ldr	r3, [pc, #364]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d0f0      	beq.n	8006384 <HAL_RCC_OscConfig+0xc0>
 80063a2:	e014      	b.n	80063ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a4:	f7fc fbac 	bl	8002b00 <HAL_GetTick>
 80063a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063aa:	e008      	b.n	80063be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80063ac:	f7fc fba8 	bl	8002b00 <HAL_GetTick>
 80063b0:	4602      	mov	r2, r0
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	1ad3      	subs	r3, r2, r3
 80063b6:	2b64      	cmp	r3, #100	; 0x64
 80063b8:	d901      	bls.n	80063be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e1f3      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063be:	4b51      	ldr	r3, [pc, #324]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d1f0      	bne.n	80063ac <HAL_RCC_OscConfig+0xe8>
 80063ca:	e000      	b.n	80063ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d063      	beq.n	80064a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063da:	4b4a      	ldr	r3, [pc, #296]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80063dc:	689b      	ldr	r3, [r3, #8]
 80063de:	f003 030c 	and.w	r3, r3, #12
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00b      	beq.n	80063fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063e6:	4b47      	ldr	r3, [pc, #284]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80063ee:	2b08      	cmp	r3, #8
 80063f0:	d11c      	bne.n	800642c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80063f2:	4b44      	ldr	r3, [pc, #272]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80063f4:	685b      	ldr	r3, [r3, #4]
 80063f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d116      	bne.n	800642c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80063fe:	4b41      	ldr	r3, [pc, #260]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f003 0302 	and.w	r3, r3, #2
 8006406:	2b00      	cmp	r3, #0
 8006408:	d005      	beq.n	8006416 <HAL_RCC_OscConfig+0x152>
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	2b01      	cmp	r3, #1
 8006410:	d001      	beq.n	8006416 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	e1c7      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006416:	4b3b      	ldr	r3, [pc, #236]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	691b      	ldr	r3, [r3, #16]
 8006422:	00db      	lsls	r3, r3, #3
 8006424:	4937      	ldr	r1, [pc, #220]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006426:	4313      	orrs	r3, r2
 8006428:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800642a:	e03a      	b.n	80064a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d020      	beq.n	8006476 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006434:	4b34      	ldr	r3, [pc, #208]	; (8006508 <HAL_RCC_OscConfig+0x244>)
 8006436:	2201      	movs	r2, #1
 8006438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800643a:	f7fc fb61 	bl	8002b00 <HAL_GetTick>
 800643e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006440:	e008      	b.n	8006454 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006442:	f7fc fb5d 	bl	8002b00 <HAL_GetTick>
 8006446:	4602      	mov	r2, r0
 8006448:	693b      	ldr	r3, [r7, #16]
 800644a:	1ad3      	subs	r3, r2, r3
 800644c:	2b02      	cmp	r3, #2
 800644e:	d901      	bls.n	8006454 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006450:	2303      	movs	r3, #3
 8006452:	e1a8      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006454:	4b2b      	ldr	r3, [pc, #172]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f003 0302 	and.w	r3, r3, #2
 800645c:	2b00      	cmp	r3, #0
 800645e:	d0f0      	beq.n	8006442 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006460:	4b28      	ldr	r3, [pc, #160]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	691b      	ldr	r3, [r3, #16]
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	4925      	ldr	r1, [pc, #148]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006470:	4313      	orrs	r3, r2
 8006472:	600b      	str	r3, [r1, #0]
 8006474:	e015      	b.n	80064a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006476:	4b24      	ldr	r3, [pc, #144]	; (8006508 <HAL_RCC_OscConfig+0x244>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800647c:	f7fc fb40 	bl	8002b00 <HAL_GetTick>
 8006480:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006482:	e008      	b.n	8006496 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006484:	f7fc fb3c 	bl	8002b00 <HAL_GetTick>
 8006488:	4602      	mov	r2, r0
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	1ad3      	subs	r3, r2, r3
 800648e:	2b02      	cmp	r3, #2
 8006490:	d901      	bls.n	8006496 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006492:	2303      	movs	r3, #3
 8006494:	e187      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006496:	4b1b      	ldr	r3, [pc, #108]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d1f0      	bne.n	8006484 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f003 0308 	and.w	r3, r3, #8
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d036      	beq.n	800651c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d016      	beq.n	80064e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064b6:	4b15      	ldr	r3, [pc, #84]	; (800650c <HAL_RCC_OscConfig+0x248>)
 80064b8:	2201      	movs	r2, #1
 80064ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064bc:	f7fc fb20 	bl	8002b00 <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064c4:	f7fc fb1c 	bl	8002b00 <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e167      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064d6:	4b0b      	ldr	r3, [pc, #44]	; (8006504 <HAL_RCC_OscConfig+0x240>)
 80064d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d0f0      	beq.n	80064c4 <HAL_RCC_OscConfig+0x200>
 80064e2:	e01b      	b.n	800651c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80064e4:	4b09      	ldr	r3, [pc, #36]	; (800650c <HAL_RCC_OscConfig+0x248>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80064ea:	f7fc fb09 	bl	8002b00 <HAL_GetTick>
 80064ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80064f0:	e00e      	b.n	8006510 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80064f2:	f7fc fb05 	bl	8002b00 <HAL_GetTick>
 80064f6:	4602      	mov	r2, r0
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	2b02      	cmp	r3, #2
 80064fe:	d907      	bls.n	8006510 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006500:	2303      	movs	r3, #3
 8006502:	e150      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
 8006504:	40023800 	.word	0x40023800
 8006508:	42470000 	.word	0x42470000
 800650c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006510:	4b88      	ldr	r3, [pc, #544]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006512:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006514:	f003 0302 	and.w	r3, r3, #2
 8006518:	2b00      	cmp	r3, #0
 800651a:	d1ea      	bne.n	80064f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f003 0304 	and.w	r3, r3, #4
 8006524:	2b00      	cmp	r3, #0
 8006526:	f000 8097 	beq.w	8006658 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800652a:	2300      	movs	r3, #0
 800652c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800652e:	4b81      	ldr	r3, [pc, #516]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006536:	2b00      	cmp	r3, #0
 8006538:	d10f      	bne.n	800655a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800653a:	2300      	movs	r3, #0
 800653c:	60bb      	str	r3, [r7, #8]
 800653e:	4b7d      	ldr	r3, [pc, #500]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006542:	4a7c      	ldr	r2, [pc, #496]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006548:	6413      	str	r3, [r2, #64]	; 0x40
 800654a:	4b7a      	ldr	r3, [pc, #488]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 800654c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006552:	60bb      	str	r3, [r7, #8]
 8006554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800655a:	4b77      	ldr	r3, [pc, #476]	; (8006738 <HAL_RCC_OscConfig+0x474>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006562:	2b00      	cmp	r3, #0
 8006564:	d118      	bne.n	8006598 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006566:	4b74      	ldr	r3, [pc, #464]	; (8006738 <HAL_RCC_OscConfig+0x474>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a73      	ldr	r2, [pc, #460]	; (8006738 <HAL_RCC_OscConfig+0x474>)
 800656c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006572:	f7fc fac5 	bl	8002b00 <HAL_GetTick>
 8006576:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006578:	e008      	b.n	800658c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800657a:	f7fc fac1 	bl	8002b00 <HAL_GetTick>
 800657e:	4602      	mov	r2, r0
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	1ad3      	subs	r3, r2, r3
 8006584:	2b02      	cmp	r3, #2
 8006586:	d901      	bls.n	800658c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006588:	2303      	movs	r3, #3
 800658a:	e10c      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800658c:	4b6a      	ldr	r3, [pc, #424]	; (8006738 <HAL_RCC_OscConfig+0x474>)
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006594:	2b00      	cmp	r3, #0
 8006596:	d0f0      	beq.n	800657a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	689b      	ldr	r3, [r3, #8]
 800659c:	2b01      	cmp	r3, #1
 800659e:	d106      	bne.n	80065ae <HAL_RCC_OscConfig+0x2ea>
 80065a0:	4b64      	ldr	r3, [pc, #400]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065a4:	4a63      	ldr	r2, [pc, #396]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065a6:	f043 0301 	orr.w	r3, r3, #1
 80065aa:	6713      	str	r3, [r2, #112]	; 0x70
 80065ac:	e01c      	b.n	80065e8 <HAL_RCC_OscConfig+0x324>
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	689b      	ldr	r3, [r3, #8]
 80065b2:	2b05      	cmp	r3, #5
 80065b4:	d10c      	bne.n	80065d0 <HAL_RCC_OscConfig+0x30c>
 80065b6:	4b5f      	ldr	r3, [pc, #380]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065ba:	4a5e      	ldr	r2, [pc, #376]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065bc:	f043 0304 	orr.w	r3, r3, #4
 80065c0:	6713      	str	r3, [r2, #112]	; 0x70
 80065c2:	4b5c      	ldr	r3, [pc, #368]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065c6:	4a5b      	ldr	r2, [pc, #364]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065c8:	f043 0301 	orr.w	r3, r3, #1
 80065cc:	6713      	str	r3, [r2, #112]	; 0x70
 80065ce:	e00b      	b.n	80065e8 <HAL_RCC_OscConfig+0x324>
 80065d0:	4b58      	ldr	r3, [pc, #352]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065d4:	4a57      	ldr	r2, [pc, #348]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065d6:	f023 0301 	bic.w	r3, r3, #1
 80065da:	6713      	str	r3, [r2, #112]	; 0x70
 80065dc:	4b55      	ldr	r3, [pc, #340]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	4a54      	ldr	r2, [pc, #336]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80065e2:	f023 0304 	bic.w	r3, r3, #4
 80065e6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80065f0:	f7fc fa86 	bl	8002b00 <HAL_GetTick>
 80065f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80065f6:	e00a      	b.n	800660e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80065f8:	f7fc fa82 	bl	8002b00 <HAL_GetTick>
 80065fc:	4602      	mov	r2, r0
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	1ad3      	subs	r3, r2, r3
 8006602:	f241 3288 	movw	r2, #5000	; 0x1388
 8006606:	4293      	cmp	r3, r2
 8006608:	d901      	bls.n	800660e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800660a:	2303      	movs	r3, #3
 800660c:	e0cb      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800660e:	4b49      	ldr	r3, [pc, #292]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006610:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006612:	f003 0302 	and.w	r3, r3, #2
 8006616:	2b00      	cmp	r3, #0
 8006618:	d0ee      	beq.n	80065f8 <HAL_RCC_OscConfig+0x334>
 800661a:	e014      	b.n	8006646 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800661c:	f7fc fa70 	bl	8002b00 <HAL_GetTick>
 8006620:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006622:	e00a      	b.n	800663a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006624:	f7fc fa6c 	bl	8002b00 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e0b5      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800663a:	4b3e      	ldr	r3, [pc, #248]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	f003 0302 	and.w	r3, r3, #2
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ee      	bne.n	8006624 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006646:	7dfb      	ldrb	r3, [r7, #23]
 8006648:	2b01      	cmp	r3, #1
 800664a:	d105      	bne.n	8006658 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800664c:	4b39      	ldr	r3, [pc, #228]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 800664e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006650:	4a38      	ldr	r2, [pc, #224]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006656:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	699b      	ldr	r3, [r3, #24]
 800665c:	2b00      	cmp	r3, #0
 800665e:	f000 80a1 	beq.w	80067a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006662:	4b34      	ldr	r3, [pc, #208]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006664:	689b      	ldr	r3, [r3, #8]
 8006666:	f003 030c 	and.w	r3, r3, #12
 800666a:	2b08      	cmp	r3, #8
 800666c:	d05c      	beq.n	8006728 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	2b02      	cmp	r3, #2
 8006674:	d141      	bne.n	80066fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006676:	4b31      	ldr	r3, [pc, #196]	; (800673c <HAL_RCC_OscConfig+0x478>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800667c:	f7fc fa40 	bl	8002b00 <HAL_GetTick>
 8006680:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006682:	e008      	b.n	8006696 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006684:	f7fc fa3c 	bl	8002b00 <HAL_GetTick>
 8006688:	4602      	mov	r2, r0
 800668a:	693b      	ldr	r3, [r7, #16]
 800668c:	1ad3      	subs	r3, r2, r3
 800668e:	2b02      	cmp	r3, #2
 8006690:	d901      	bls.n	8006696 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e087      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006696:	4b27      	ldr	r3, [pc, #156]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d1f0      	bne.n	8006684 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69da      	ldr	r2, [r3, #28]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b0:	019b      	lsls	r3, r3, #6
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b8:	085b      	lsrs	r3, r3, #1
 80066ba:	3b01      	subs	r3, #1
 80066bc:	041b      	lsls	r3, r3, #16
 80066be:	431a      	orrs	r2, r3
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066c4:	061b      	lsls	r3, r3, #24
 80066c6:	491b      	ldr	r1, [pc, #108]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80066c8:	4313      	orrs	r3, r2
 80066ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066cc:	4b1b      	ldr	r3, [pc, #108]	; (800673c <HAL_RCC_OscConfig+0x478>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066d2:	f7fc fa15 	bl	8002b00 <HAL_GetTick>
 80066d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066d8:	e008      	b.n	80066ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80066da:	f7fc fa11 	bl	8002b00 <HAL_GetTick>
 80066de:	4602      	mov	r2, r0
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	1ad3      	subs	r3, r2, r3
 80066e4:	2b02      	cmp	r3, #2
 80066e6:	d901      	bls.n	80066ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80066e8:	2303      	movs	r3, #3
 80066ea:	e05c      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ec:	4b11      	ldr	r3, [pc, #68]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d0f0      	beq.n	80066da <HAL_RCC_OscConfig+0x416>
 80066f8:	e054      	b.n	80067a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066fa:	4b10      	ldr	r3, [pc, #64]	; (800673c <HAL_RCC_OscConfig+0x478>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006700:	f7fc f9fe 	bl	8002b00 <HAL_GetTick>
 8006704:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006706:	e008      	b.n	800671a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006708:	f7fc f9fa 	bl	8002b00 <HAL_GetTick>
 800670c:	4602      	mov	r2, r0
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	1ad3      	subs	r3, r2, r3
 8006712:	2b02      	cmp	r3, #2
 8006714:	d901      	bls.n	800671a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006716:	2303      	movs	r3, #3
 8006718:	e045      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800671a:	4b06      	ldr	r3, [pc, #24]	; (8006734 <HAL_RCC_OscConfig+0x470>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006722:	2b00      	cmp	r3, #0
 8006724:	d1f0      	bne.n	8006708 <HAL_RCC_OscConfig+0x444>
 8006726:	e03d      	b.n	80067a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	699b      	ldr	r3, [r3, #24]
 800672c:	2b01      	cmp	r3, #1
 800672e:	d107      	bne.n	8006740 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e038      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
 8006734:	40023800 	.word	0x40023800
 8006738:	40007000 	.word	0x40007000
 800673c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006740:	4b1b      	ldr	r3, [pc, #108]	; (80067b0 <HAL_RCC_OscConfig+0x4ec>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	699b      	ldr	r3, [r3, #24]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d028      	beq.n	80067a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006758:	429a      	cmp	r2, r3
 800675a:	d121      	bne.n	80067a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006766:	429a      	cmp	r2, r3
 8006768:	d11a      	bne.n	80067a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006770:	4013      	ands	r3, r2
 8006772:	687a      	ldr	r2, [r7, #4]
 8006774:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006776:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006778:	4293      	cmp	r3, r2
 800677a:	d111      	bne.n	80067a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006786:	085b      	lsrs	r3, r3, #1
 8006788:	3b01      	subs	r3, #1
 800678a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800678c:	429a      	cmp	r2, r3
 800678e:	d107      	bne.n	80067a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800679a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800679c:	429a      	cmp	r2, r3
 800679e:	d001      	beq.n	80067a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	40023800 	.word	0x40023800

080067b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d101      	bne.n	80067c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e0cc      	b.n	8006962 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80067c8:	4b68      	ldr	r3, [pc, #416]	; (800696c <HAL_RCC_ClockConfig+0x1b8>)
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	683a      	ldr	r2, [r7, #0]
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d90c      	bls.n	80067f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067d6:	4b65      	ldr	r3, [pc, #404]	; (800696c <HAL_RCC_ClockConfig+0x1b8>)
 80067d8:	683a      	ldr	r2, [r7, #0]
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80067de:	4b63      	ldr	r3, [pc, #396]	; (800696c <HAL_RCC_ClockConfig+0x1b8>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f003 0307 	and.w	r3, r3, #7
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	429a      	cmp	r2, r3
 80067ea:	d001      	beq.n	80067f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e0b8      	b.n	8006962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f003 0302 	and.w	r3, r3, #2
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d020      	beq.n	800683e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0304 	and.w	r3, r3, #4
 8006804:	2b00      	cmp	r3, #0
 8006806:	d005      	beq.n	8006814 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006808:	4b59      	ldr	r3, [pc, #356]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 800680a:	689b      	ldr	r3, [r3, #8]
 800680c:	4a58      	ldr	r2, [pc, #352]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 800680e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006812:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0308 	and.w	r3, r3, #8
 800681c:	2b00      	cmp	r3, #0
 800681e:	d005      	beq.n	800682c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006820:	4b53      	ldr	r3, [pc, #332]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006822:	689b      	ldr	r3, [r3, #8]
 8006824:	4a52      	ldr	r2, [pc, #328]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800682a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800682c:	4b50      	ldr	r3, [pc, #320]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	689b      	ldr	r3, [r3, #8]
 8006838:	494d      	ldr	r1, [pc, #308]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 800683a:	4313      	orrs	r3, r2
 800683c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0301 	and.w	r3, r3, #1
 8006846:	2b00      	cmp	r3, #0
 8006848:	d044      	beq.n	80068d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	2b01      	cmp	r3, #1
 8006850:	d107      	bne.n	8006862 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006852:	4b47      	ldr	r3, [pc, #284]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800685a:	2b00      	cmp	r3, #0
 800685c:	d119      	bne.n	8006892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e07f      	b.n	8006962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	2b02      	cmp	r3, #2
 8006868:	d003      	beq.n	8006872 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800686e:	2b03      	cmp	r3, #3
 8006870:	d107      	bne.n	8006882 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006872:	4b3f      	ldr	r3, [pc, #252]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800687a:	2b00      	cmp	r3, #0
 800687c:	d109      	bne.n	8006892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800687e:	2301      	movs	r3, #1
 8006880:	e06f      	b.n	8006962 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006882:	4b3b      	ldr	r3, [pc, #236]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f003 0302 	and.w	r3, r3, #2
 800688a:	2b00      	cmp	r3, #0
 800688c:	d101      	bne.n	8006892 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	e067      	b.n	8006962 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006892:	4b37      	ldr	r3, [pc, #220]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006894:	689b      	ldr	r3, [r3, #8]
 8006896:	f023 0203 	bic.w	r2, r3, #3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	4934      	ldr	r1, [pc, #208]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 80068a0:	4313      	orrs	r3, r2
 80068a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068a4:	f7fc f92c 	bl	8002b00 <HAL_GetTick>
 80068a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068aa:	e00a      	b.n	80068c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068ac:	f7fc f928 	bl	8002b00 <HAL_GetTick>
 80068b0:	4602      	mov	r2, r0
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	1ad3      	subs	r3, r2, r3
 80068b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d901      	bls.n	80068c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068be:	2303      	movs	r3, #3
 80068c0:	e04f      	b.n	8006962 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068c2:	4b2b      	ldr	r3, [pc, #172]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	689b      	ldr	r3, [r3, #8]
 80068c6:	f003 020c 	and.w	r2, r3, #12
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	009b      	lsls	r3, r3, #2
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d1eb      	bne.n	80068ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80068d4:	4b25      	ldr	r3, [pc, #148]	; (800696c <HAL_RCC_ClockConfig+0x1b8>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	f003 0307 	and.w	r3, r3, #7
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d20c      	bcs.n	80068fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80068e2:	4b22      	ldr	r3, [pc, #136]	; (800696c <HAL_RCC_ClockConfig+0x1b8>)
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	b2d2      	uxtb	r2, r2
 80068e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80068ea:	4b20      	ldr	r3, [pc, #128]	; (800696c <HAL_RCC_ClockConfig+0x1b8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0307 	and.w	r3, r3, #7
 80068f2:	683a      	ldr	r2, [r7, #0]
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d001      	beq.n	80068fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	e032      	b.n	8006962 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f003 0304 	and.w	r3, r3, #4
 8006904:	2b00      	cmp	r3, #0
 8006906:	d008      	beq.n	800691a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006908:	4b19      	ldr	r3, [pc, #100]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	4916      	ldr	r1, [pc, #88]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006916:	4313      	orrs	r3, r2
 8006918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0308 	and.w	r3, r3, #8
 8006922:	2b00      	cmp	r3, #0
 8006924:	d009      	beq.n	800693a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006926:	4b12      	ldr	r3, [pc, #72]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	490e      	ldr	r1, [pc, #56]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006936:	4313      	orrs	r3, r2
 8006938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800693a:	f000 f821 	bl	8006980 <HAL_RCC_GetSysClockFreq>
 800693e:	4602      	mov	r2, r0
 8006940:	4b0b      	ldr	r3, [pc, #44]	; (8006970 <HAL_RCC_ClockConfig+0x1bc>)
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	091b      	lsrs	r3, r3, #4
 8006946:	f003 030f 	and.w	r3, r3, #15
 800694a:	490a      	ldr	r1, [pc, #40]	; (8006974 <HAL_RCC_ClockConfig+0x1c0>)
 800694c:	5ccb      	ldrb	r3, [r1, r3]
 800694e:	fa22 f303 	lsr.w	r3, r2, r3
 8006952:	4a09      	ldr	r2, [pc, #36]	; (8006978 <HAL_RCC_ClockConfig+0x1c4>)
 8006954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006956:	4b09      	ldr	r3, [pc, #36]	; (800697c <HAL_RCC_ClockConfig+0x1c8>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	4618      	mov	r0, r3
 800695c:	f7fc f88c 	bl	8002a78 <HAL_InitTick>

  return HAL_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3710      	adds	r7, #16
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	40023c00 	.word	0x40023c00
 8006970:	40023800 	.word	0x40023800
 8006974:	0800bccc 	.word	0x0800bccc
 8006978:	20000008 	.word	0x20000008
 800697c:	2000000c 	.word	0x2000000c

08006980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006984:	b094      	sub	sp, #80	; 0x50
 8006986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006988:	2300      	movs	r3, #0
 800698a:	647b      	str	r3, [r7, #68]	; 0x44
 800698c:	2300      	movs	r3, #0
 800698e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006990:	2300      	movs	r3, #0
 8006992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006994:	2300      	movs	r3, #0
 8006996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006998:	4b79      	ldr	r3, [pc, #484]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 030c 	and.w	r3, r3, #12
 80069a0:	2b08      	cmp	r3, #8
 80069a2:	d00d      	beq.n	80069c0 <HAL_RCC_GetSysClockFreq+0x40>
 80069a4:	2b08      	cmp	r3, #8
 80069a6:	f200 80e1 	bhi.w	8006b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d002      	beq.n	80069b4 <HAL_RCC_GetSysClockFreq+0x34>
 80069ae:	2b04      	cmp	r3, #4
 80069b0:	d003      	beq.n	80069ba <HAL_RCC_GetSysClockFreq+0x3a>
 80069b2:	e0db      	b.n	8006b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069b4:	4b73      	ldr	r3, [pc, #460]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80069b6:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80069b8:	e0db      	b.n	8006b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069ba:	4b73      	ldr	r3, [pc, #460]	; (8006b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80069bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80069be:	e0d8      	b.n	8006b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069c0:	4b6f      	ldr	r3, [pc, #444]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80069c2:	685b      	ldr	r3, [r3, #4]
 80069c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80069c8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069ca:	4b6d      	ldr	r3, [pc, #436]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80069cc:	685b      	ldr	r3, [r3, #4]
 80069ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d063      	beq.n	8006a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069d6:	4b6a      	ldr	r3, [pc, #424]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	099b      	lsrs	r3, r3, #6
 80069dc:	2200      	movs	r2, #0
 80069de:	63bb      	str	r3, [r7, #56]	; 0x38
 80069e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80069e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80069e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80069e8:	633b      	str	r3, [r7, #48]	; 0x30
 80069ea:	2300      	movs	r3, #0
 80069ec:	637b      	str	r3, [r7, #52]	; 0x34
 80069ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80069f2:	4622      	mov	r2, r4
 80069f4:	462b      	mov	r3, r5
 80069f6:	f04f 0000 	mov.w	r0, #0
 80069fa:	f04f 0100 	mov.w	r1, #0
 80069fe:	0159      	lsls	r1, r3, #5
 8006a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a04:	0150      	lsls	r0, r2, #5
 8006a06:	4602      	mov	r2, r0
 8006a08:	460b      	mov	r3, r1
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	1a51      	subs	r1, r2, r1
 8006a0e:	6139      	str	r1, [r7, #16]
 8006a10:	4629      	mov	r1, r5
 8006a12:	eb63 0301 	sbc.w	r3, r3, r1
 8006a16:	617b      	str	r3, [r7, #20]
 8006a18:	f04f 0200 	mov.w	r2, #0
 8006a1c:	f04f 0300 	mov.w	r3, #0
 8006a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a24:	4659      	mov	r1, fp
 8006a26:	018b      	lsls	r3, r1, #6
 8006a28:	4651      	mov	r1, sl
 8006a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a2e:	4651      	mov	r1, sl
 8006a30:	018a      	lsls	r2, r1, #6
 8006a32:	4651      	mov	r1, sl
 8006a34:	ebb2 0801 	subs.w	r8, r2, r1
 8006a38:	4659      	mov	r1, fp
 8006a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8006a3e:	f04f 0200 	mov.w	r2, #0
 8006a42:	f04f 0300 	mov.w	r3, #0
 8006a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a52:	4690      	mov	r8, r2
 8006a54:	4699      	mov	r9, r3
 8006a56:	4623      	mov	r3, r4
 8006a58:	eb18 0303 	adds.w	r3, r8, r3
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	462b      	mov	r3, r5
 8006a60:	eb49 0303 	adc.w	r3, r9, r3
 8006a64:	60fb      	str	r3, [r7, #12]
 8006a66:	f04f 0200 	mov.w	r2, #0
 8006a6a:	f04f 0300 	mov.w	r3, #0
 8006a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006a72:	4629      	mov	r1, r5
 8006a74:	024b      	lsls	r3, r1, #9
 8006a76:	4621      	mov	r1, r4
 8006a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	024a      	lsls	r2, r1, #9
 8006a80:	4610      	mov	r0, r2
 8006a82:	4619      	mov	r1, r3
 8006a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a86:	2200      	movs	r2, #0
 8006a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a90:	f7fa f8b2 	bl	8000bf8 <__aeabi_uldivmod>
 8006a94:	4602      	mov	r2, r0
 8006a96:	460b      	mov	r3, r1
 8006a98:	4613      	mov	r3, r2
 8006a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a9c:	e058      	b.n	8006b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a9e:	4b38      	ldr	r3, [pc, #224]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	099b      	lsrs	r3, r3, #6
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	4611      	mov	r1, r2
 8006aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006aae:	623b      	str	r3, [r7, #32]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ab8:	4642      	mov	r2, r8
 8006aba:	464b      	mov	r3, r9
 8006abc:	f04f 0000 	mov.w	r0, #0
 8006ac0:	f04f 0100 	mov.w	r1, #0
 8006ac4:	0159      	lsls	r1, r3, #5
 8006ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006aca:	0150      	lsls	r0, r2, #5
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4641      	mov	r1, r8
 8006ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ad6:	4649      	mov	r1, r9
 8006ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006adc:	f04f 0200 	mov.w	r2, #0
 8006ae0:	f04f 0300 	mov.w	r3, #0
 8006ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006af0:	ebb2 040a 	subs.w	r4, r2, sl
 8006af4:	eb63 050b 	sbc.w	r5, r3, fp
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	00eb      	lsls	r3, r5, #3
 8006b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b06:	00e2      	lsls	r2, r4, #3
 8006b08:	4614      	mov	r4, r2
 8006b0a:	461d      	mov	r5, r3
 8006b0c:	4643      	mov	r3, r8
 8006b0e:	18e3      	adds	r3, r4, r3
 8006b10:	603b      	str	r3, [r7, #0]
 8006b12:	464b      	mov	r3, r9
 8006b14:	eb45 0303 	adc.w	r3, r5, r3
 8006b18:	607b      	str	r3, [r7, #4]
 8006b1a:	f04f 0200 	mov.w	r2, #0
 8006b1e:	f04f 0300 	mov.w	r3, #0
 8006b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b26:	4629      	mov	r1, r5
 8006b28:	028b      	lsls	r3, r1, #10
 8006b2a:	4621      	mov	r1, r4
 8006b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b30:	4621      	mov	r1, r4
 8006b32:	028a      	lsls	r2, r1, #10
 8006b34:	4610      	mov	r0, r2
 8006b36:	4619      	mov	r1, r3
 8006b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	61bb      	str	r3, [r7, #24]
 8006b3e:	61fa      	str	r2, [r7, #28]
 8006b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b44:	f7fa f858 	bl	8000bf8 <__aeabi_uldivmod>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	460b      	mov	r3, r1
 8006b4c:	4613      	mov	r3, r2
 8006b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006b50:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b52:	685b      	ldr	r3, [r3, #4]
 8006b54:	0c1b      	lsrs	r3, r3, #16
 8006b56:	f003 0303 	and.w	r3, r3, #3
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	005b      	lsls	r3, r3, #1
 8006b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b6a:	e002      	b.n	8006b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b6c:	4b05      	ldr	r3, [pc, #20]	; (8006b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8006b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3750      	adds	r7, #80	; 0x50
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b7e:	bf00      	nop
 8006b80:	40023800 	.word	0x40023800
 8006b84:	00f42400 	.word	0x00f42400
 8006b88:	007a1200 	.word	0x007a1200

08006b8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b90:	4b03      	ldr	r3, [pc, #12]	; (8006ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b92:	681b      	ldr	r3, [r3, #0]
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	20000008 	.word	0x20000008

08006ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006ba8:	f7ff fff0 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bac:	4602      	mov	r2, r0
 8006bae:	4b05      	ldr	r3, [pc, #20]	; (8006bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	0a9b      	lsrs	r3, r3, #10
 8006bb4:	f003 0307 	and.w	r3, r3, #7
 8006bb8:	4903      	ldr	r1, [pc, #12]	; (8006bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006bba:	5ccb      	ldrb	r3, [r1, r3]
 8006bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	40023800 	.word	0x40023800
 8006bc8:	0800bcdc 	.word	0x0800bcdc

08006bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006bd0:	f7ff ffdc 	bl	8006b8c <HAL_RCC_GetHCLKFreq>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	4b05      	ldr	r3, [pc, #20]	; (8006bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	0b5b      	lsrs	r3, r3, #13
 8006bdc:	f003 0307 	and.w	r3, r3, #7
 8006be0:	4903      	ldr	r1, [pc, #12]	; (8006bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006be2:	5ccb      	ldrb	r3, [r1, r3]
 8006be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006be8:	4618      	mov	r0, r3
 8006bea:	bd80      	pop	{r7, pc}
 8006bec:	40023800 	.word	0x40023800
 8006bf0:	0800bcdc 	.word	0x0800bcdc

08006bf4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b082      	sub	sp, #8
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d101      	bne.n	8006c06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006c02:	2301      	movs	r3, #1
 8006c04:	e07b      	b.n	8006cfe <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d108      	bne.n	8006c20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c16:	d009      	beq.n	8006c2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	61da      	str	r2, [r3, #28]
 8006c1e:	e005      	b.n	8006c2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2200      	movs	r2, #0
 8006c24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	2200      	movs	r2, #0
 8006c2a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2200      	movs	r2, #0
 8006c30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fb fb70 	bl	800232c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2202      	movs	r2, #2
 8006c50:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c62:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006c74:	431a      	orrs	r2, r3
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c7e:	431a      	orrs	r2, r3
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	691b      	ldr	r3, [r3, #16]
 8006c84:	f003 0302 	and.w	r3, r3, #2
 8006c88:	431a      	orrs	r2, r3
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	695b      	ldr	r3, [r3, #20]
 8006c8e:	f003 0301 	and.w	r3, r3, #1
 8006c92:	431a      	orrs	r2, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	699b      	ldr	r3, [r3, #24]
 8006c98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	69db      	ldr	r3, [r3, #28]
 8006ca2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006ca6:	431a      	orrs	r2, r3
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb0:	ea42 0103 	orr.w	r1, r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cb8:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	699b      	ldr	r3, [r3, #24]
 8006cc8:	0c1b      	lsrs	r3, r3, #16
 8006cca:	f003 0104 	and.w	r1, r3, #4
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cd2:	f003 0210 	and.w	r2, r3, #16
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	430a      	orrs	r2, r1
 8006cdc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	69da      	ldr	r2, [r3, #28]
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006cec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2201      	movs	r2, #1
 8006cf8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006cfc:	2300      	movs	r3, #0
}
 8006cfe:	4618      	mov	r0, r3
 8006d00:	3708      	adds	r7, #8
 8006d02:	46bd      	mov	sp, r7
 8006d04:	bd80      	pop	{r7, pc}

08006d06 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d06:	b580      	push	{r7, lr}
 8006d08:	b088      	sub	sp, #32
 8006d0a:	af00      	add	r7, sp, #0
 8006d0c:	60f8      	str	r0, [r7, #12]
 8006d0e:	60b9      	str	r1, [r7, #8]
 8006d10:	603b      	str	r3, [r7, #0]
 8006d12:	4613      	mov	r3, r2
 8006d14:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006d16:	2300      	movs	r3, #0
 8006d18:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d101      	bne.n	8006d28 <HAL_SPI_Transmit+0x22>
 8006d24:	2302      	movs	r3, #2
 8006d26:	e126      	b.n	8006f76 <HAL_SPI_Transmit+0x270>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2201      	movs	r2, #1
 8006d2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006d30:	f7fb fee6 	bl	8002b00 <HAL_GetTick>
 8006d34:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	2b01      	cmp	r3, #1
 8006d44:	d002      	beq.n	8006d4c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006d46:	2302      	movs	r3, #2
 8006d48:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d4a:	e10b      	b.n	8006f64 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d002      	beq.n	8006d58 <HAL_SPI_Transmit+0x52>
 8006d52:	88fb      	ldrh	r3, [r7, #6]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d102      	bne.n	8006d5e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006d5c:	e102      	b.n	8006f64 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	2203      	movs	r2, #3
 8006d62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	68ba      	ldr	r2, [r7, #8]
 8006d70:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	88fa      	ldrh	r2, [r7, #6]
 8006d76:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	88fa      	ldrh	r2, [r7, #6]
 8006d7c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2200      	movs	r2, #0
 8006d88:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	2200      	movs	r2, #0
 8006d94:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006da4:	d10f      	bne.n	8006dc6 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681a      	ldr	r2, [r3, #0]
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006db4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006dc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dd0:	2b40      	cmp	r3, #64	; 0x40
 8006dd2:	d007      	beq.n	8006de4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006de2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68db      	ldr	r3, [r3, #12]
 8006de8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dec:	d14b      	bne.n	8006e86 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	685b      	ldr	r3, [r3, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d002      	beq.n	8006dfc <HAL_SPI_Transmit+0xf6>
 8006df6:	8afb      	ldrh	r3, [r7, #22]
 8006df8:	2b01      	cmp	r3, #1
 8006dfa:	d13e      	bne.n	8006e7a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e00:	881a      	ldrh	r2, [r3, #0]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0c:	1c9a      	adds	r2, r3, #2
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	3b01      	subs	r3, #1
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006e20:	e02b      	b.n	8006e7a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689b      	ldr	r3, [r3, #8]
 8006e28:	f003 0302 	and.w	r3, r3, #2
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d112      	bne.n	8006e56 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e34:	881a      	ldrh	r2, [r3, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	1c9a      	adds	r2, r3, #2
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e4a:	b29b      	uxth	r3, r3
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	b29a      	uxth	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	86da      	strh	r2, [r3, #54]	; 0x36
 8006e54:	e011      	b.n	8006e7a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e56:	f7fb fe53 	bl	8002b00 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	683a      	ldr	r2, [r7, #0]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	d803      	bhi.n	8006e6e <HAL_SPI_Transmit+0x168>
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e6c:	d102      	bne.n	8006e74 <HAL_SPI_Transmit+0x16e>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d102      	bne.n	8006e7a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006e74:	2303      	movs	r3, #3
 8006e76:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006e78:	e074      	b.n	8006f64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d1ce      	bne.n	8006e22 <HAL_SPI_Transmit+0x11c>
 8006e84:	e04c      	b.n	8006f20 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	685b      	ldr	r3, [r3, #4]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <HAL_SPI_Transmit+0x18e>
 8006e8e:	8afb      	ldrh	r3, [r7, #22]
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d140      	bne.n	8006f16 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	330c      	adds	r3, #12
 8006e9e:	7812      	ldrb	r2, [r2, #0]
 8006ea0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ea6:	1c5a      	adds	r2, r3, #1
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006eb0:	b29b      	uxth	r3, r3
 8006eb2:	3b01      	subs	r3, #1
 8006eb4:	b29a      	uxth	r2, r3
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006eba:	e02c      	b.n	8006f16 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 0302 	and.w	r3, r3, #2
 8006ec6:	2b02      	cmp	r3, #2
 8006ec8:	d113      	bne.n	8006ef2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	330c      	adds	r3, #12
 8006ed4:	7812      	ldrb	r2, [r2, #0]
 8006ed6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006edc:	1c5a      	adds	r2, r3, #1
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	3b01      	subs	r3, #1
 8006eea:	b29a      	uxth	r2, r3
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ef0:	e011      	b.n	8006f16 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ef2:	f7fb fe05 	bl	8002b00 <HAL_GetTick>
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	69bb      	ldr	r3, [r7, #24]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	683a      	ldr	r2, [r7, #0]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d803      	bhi.n	8006f0a <HAL_SPI_Transmit+0x204>
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f08:	d102      	bne.n	8006f10 <HAL_SPI_Transmit+0x20a>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d102      	bne.n	8006f16 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006f10:	2303      	movs	r3, #3
 8006f12:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006f14:	e026      	b.n	8006f64 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d1cd      	bne.n	8006ebc <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f20:	69ba      	ldr	r2, [r7, #24]
 8006f22:	6839      	ldr	r1, [r7, #0]
 8006f24:	68f8      	ldr	r0, [r7, #12]
 8006f26:	f000 fbcb 	bl	80076c0 <SPI_EndRxTxTransaction>
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d002      	beq.n	8006f36 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d10a      	bne.n	8006f54 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f3e:	2300      	movs	r3, #0
 8006f40:	613b      	str	r3, [r7, #16]
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	613b      	str	r3, [r7, #16]
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	689b      	ldr	r3, [r3, #8]
 8006f50:	613b      	str	r3, [r7, #16]
 8006f52:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d002      	beq.n	8006f62 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	77fb      	strb	r3, [r7, #31]
 8006f60:	e000      	b.n	8006f64 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006f62:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	2201      	movs	r2, #1
 8006f68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8006f76:	4618      	mov	r0, r3
 8006f78:	3720      	adds	r7, #32
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b088      	sub	sp, #32
 8006f82:	af02      	add	r7, sp, #8
 8006f84:	60f8      	str	r0, [r7, #12]
 8006f86:	60b9      	str	r1, [r7, #8]
 8006f88:	603b      	str	r3, [r7, #0]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006f8e:	2300      	movs	r3, #0
 8006f90:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f9a:	d112      	bne.n	8006fc2 <HAL_SPI_Receive+0x44>
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10e      	bne.n	8006fc2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2204      	movs	r2, #4
 8006fa8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006fac:	88fa      	ldrh	r2, [r7, #6]
 8006fae:	683b      	ldr	r3, [r7, #0]
 8006fb0:	9300      	str	r3, [sp, #0]
 8006fb2:	4613      	mov	r3, r2
 8006fb4:	68ba      	ldr	r2, [r7, #8]
 8006fb6:	68b9      	ldr	r1, [r7, #8]
 8006fb8:	68f8      	ldr	r0, [r7, #12]
 8006fba:	f000 f8f1 	bl	80071a0 <HAL_SPI_TransmitReceive>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	e0ea      	b.n	8007198 <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_SPI_Receive+0x52>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0e3      	b.n	8007198 <HAL_SPI_Receive+0x21a>
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fd8:	f7fb fd92 	bl	8002b00 <HAL_GetTick>
 8006fdc:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006fe4:	b2db      	uxtb	r3, r3
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006fea:	2302      	movs	r3, #2
 8006fec:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006fee:	e0ca      	b.n	8007186 <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8006ff0:	68bb      	ldr	r3, [r7, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <HAL_SPI_Receive+0x7e>
 8006ff6:	88fb      	ldrh	r3, [r7, #6]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d102      	bne.n	8007002 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	75fb      	strb	r3, [r7, #23]
    goto error;
 8007000:	e0c1      	b.n	8007186 <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	2204      	movs	r2, #4
 8007006:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	68ba      	ldr	r2, [r7, #8]
 8007014:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	88fa      	ldrh	r2, [r7, #6]
 800701a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	88fa      	ldrh	r2, [r7, #6]
 8007020:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	2200      	movs	r2, #0
 8007026:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2200      	movs	r2, #0
 800702c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2200      	movs	r2, #0
 8007032:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007048:	d10f      	bne.n	800706a <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	681a      	ldr	r2, [r3, #0]
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007058:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007068:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007074:	2b40      	cmp	r3, #64	; 0x40
 8007076:	d007      	beq.n	8007088 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681a      	ldr	r2, [r3, #0]
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007086:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	68db      	ldr	r3, [r3, #12]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d162      	bne.n	8007156 <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007090:	e02e      	b.n	80070f0 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f003 0301 	and.w	r3, r3, #1
 800709c:	2b01      	cmp	r3, #1
 800709e:	d115      	bne.n	80070cc <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f103 020c 	add.w	r2, r3, #12
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070ac:	7812      	ldrb	r2, [r2, #0]
 80070ae:	b2d2      	uxtb	r2, r2
 80070b0:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070b6:	1c5a      	adds	r2, r3, #1
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	3b01      	subs	r3, #1
 80070c4:	b29a      	uxth	r2, r3
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80070ca:	e011      	b.n	80070f0 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070cc:	f7fb fd18 	bl	8002b00 <HAL_GetTick>
 80070d0:	4602      	mov	r2, r0
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	683a      	ldr	r2, [r7, #0]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d803      	bhi.n	80070e4 <HAL_SPI_Receive+0x166>
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070e2:	d102      	bne.n	80070ea <HAL_SPI_Receive+0x16c>
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d102      	bne.n	80070f0 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80070ea:	2303      	movs	r3, #3
 80070ec:	75fb      	strb	r3, [r7, #23]
          goto error;
 80070ee:	e04a      	b.n	8007186 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80070f4:	b29b      	uxth	r3, r3
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d1cb      	bne.n	8007092 <HAL_SPI_Receive+0x114>
 80070fa:	e031      	b.n	8007160 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b01      	cmp	r3, #1
 8007108:	d113      	bne.n	8007132 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	68da      	ldr	r2, [r3, #12]
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007114:	b292      	uxth	r2, r2
 8007116:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800711c:	1c9a      	adds	r2, r3, #2
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007126:	b29b      	uxth	r3, r3
 8007128:	3b01      	subs	r3, #1
 800712a:	b29a      	uxth	r2, r3
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007130:	e011      	b.n	8007156 <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007132:	f7fb fce5 	bl	8002b00 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	683a      	ldr	r2, [r7, #0]
 800713e:	429a      	cmp	r2, r3
 8007140:	d803      	bhi.n	800714a <HAL_SPI_Receive+0x1cc>
 8007142:	683b      	ldr	r3, [r7, #0]
 8007144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007148:	d102      	bne.n	8007150 <HAL_SPI_Receive+0x1d2>
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d102      	bne.n	8007156 <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	75fb      	strb	r3, [r7, #23]
          goto error;
 8007154:	e017      	b.n	8007186 <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800715a:	b29b      	uxth	r3, r3
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1cd      	bne.n	80070fc <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007160:	693a      	ldr	r2, [r7, #16]
 8007162:	6839      	ldr	r1, [r7, #0]
 8007164:	68f8      	ldr	r0, [r7, #12]
 8007166:	f000 fa45 	bl	80075f4 <SPI_EndRxTransaction>
 800716a:	4603      	mov	r3, r0
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2220      	movs	r2, #32
 8007174:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717a:	2b00      	cmp	r3, #0
 800717c:	d002      	beq.n	8007184 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 800717e:	2301      	movs	r3, #1
 8007180:	75fb      	strb	r3, [r7, #23]
 8007182:	e000      	b.n	8007186 <HAL_SPI_Receive+0x208>
  }

error :
 8007184:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2201      	movs	r2, #1
 800718a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2200      	movs	r2, #0
 8007192:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007196:	7dfb      	ldrb	r3, [r7, #23]
}
 8007198:	4618      	mov	r0, r3
 800719a:	3718      	adds	r7, #24
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b08c      	sub	sp, #48	; 0x30
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
 80071ac:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80071ae:	2301      	movs	r3, #1
 80071b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80071b2:	2300      	movs	r3, #0
 80071b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d101      	bne.n	80071c6 <HAL_SPI_TransmitReceive+0x26>
 80071c2:	2302      	movs	r3, #2
 80071c4:	e18a      	b.n	80074dc <HAL_SPI_TransmitReceive+0x33c>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2201      	movs	r2, #1
 80071ca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071ce:	f7fb fc97 	bl	8002b00 <HAL_GetTick>
 80071d2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80071da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	685b      	ldr	r3, [r3, #4]
 80071e2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80071e4:	887b      	ldrh	r3, [r7, #2]
 80071e6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80071ec:	2b01      	cmp	r3, #1
 80071ee:	d00f      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x70>
 80071f0:	69fb      	ldr	r3, [r7, #28]
 80071f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80071f6:	d107      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	689b      	ldr	r3, [r3, #8]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d103      	bne.n	8007208 <HAL_SPI_TransmitReceive+0x68>
 8007200:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007204:	2b04      	cmp	r3, #4
 8007206:	d003      	beq.n	8007210 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8007208:	2302      	movs	r3, #2
 800720a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800720e:	e15b      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d005      	beq.n	8007222 <HAL_SPI_TransmitReceive+0x82>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_SPI_TransmitReceive+0x82>
 800721c:	887b      	ldrh	r3, [r7, #2]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d103      	bne.n	800722a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8007222:	2301      	movs	r3, #1
 8007224:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007228:	e14e      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b04      	cmp	r3, #4
 8007234:	d003      	beq.n	800723e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	2205      	movs	r2, #5
 800723a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	2200      	movs	r2, #0
 8007242:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	687a      	ldr	r2, [r7, #4]
 8007248:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	887a      	ldrh	r2, [r7, #2]
 800724e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	887a      	ldrh	r2, [r7, #2]
 8007254:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	887a      	ldrh	r2, [r7, #2]
 8007260:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	887a      	ldrh	r2, [r7, #2]
 8007266:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d007      	beq.n	8007292 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007290:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	68db      	ldr	r3, [r3, #12]
 8007296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729a:	d178      	bne.n	800738e <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d002      	beq.n	80072aa <HAL_SPI_TransmitReceive+0x10a>
 80072a4:	8b7b      	ldrh	r3, [r7, #26]
 80072a6:	2b01      	cmp	r3, #1
 80072a8:	d166      	bne.n	8007378 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	881a      	ldrh	r2, [r3, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ba:	1c9a      	adds	r2, r3, #2
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072c4:	b29b      	uxth	r3, r3
 80072c6:	3b01      	subs	r3, #1
 80072c8:	b29a      	uxth	r2, r3
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072ce:	e053      	b.n	8007378 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	f003 0302 	and.w	r3, r3, #2
 80072da:	2b02      	cmp	r3, #2
 80072dc:	d11b      	bne.n	8007316 <HAL_SPI_TransmitReceive+0x176>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d016      	beq.n	8007316 <HAL_SPI_TransmitReceive+0x176>
 80072e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d113      	bne.n	8007316 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f2:	881a      	ldrh	r2, [r3, #0]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072fe:	1c9a      	adds	r2, r3, #2
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007308:	b29b      	uxth	r3, r3
 800730a:	3b01      	subs	r3, #1
 800730c:	b29a      	uxth	r2, r3
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007312:	2300      	movs	r3, #0
 8007314:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	689b      	ldr	r3, [r3, #8]
 800731c:	f003 0301 	and.w	r3, r3, #1
 8007320:	2b01      	cmp	r3, #1
 8007322:	d119      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x1b8>
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007328:	b29b      	uxth	r3, r3
 800732a:	2b00      	cmp	r3, #0
 800732c:	d014      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68da      	ldr	r2, [r3, #12]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007338:	b292      	uxth	r2, r2
 800733a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007340:	1c9a      	adds	r2, r3, #2
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800734a:	b29b      	uxth	r3, r3
 800734c:	3b01      	subs	r3, #1
 800734e:	b29a      	uxth	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007354:	2301      	movs	r3, #1
 8007356:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007358:	f7fb fbd2 	bl	8002b00 <HAL_GetTick>
 800735c:	4602      	mov	r2, r0
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007364:	429a      	cmp	r2, r3
 8007366:	d807      	bhi.n	8007378 <HAL_SPI_TransmitReceive+0x1d8>
 8007368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800736e:	d003      	beq.n	8007378 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007376:	e0a7      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800737c:	b29b      	uxth	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1a6      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x130>
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007386:	b29b      	uxth	r3, r3
 8007388:	2b00      	cmp	r3, #0
 800738a:	d1a1      	bne.n	80072d0 <HAL_SPI_TransmitReceive+0x130>
 800738c:	e07c      	b.n	8007488 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	685b      	ldr	r3, [r3, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <HAL_SPI_TransmitReceive+0x1fc>
 8007396:	8b7b      	ldrh	r3, [r7, #26]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d16b      	bne.n	8007474 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	330c      	adds	r3, #12
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ae:	1c5a      	adds	r2, r3, #1
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	3b01      	subs	r3, #1
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073c2:	e057      	b.n	8007474 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b02      	cmp	r3, #2
 80073d0:	d11c      	bne.n	800740c <HAL_SPI_TransmitReceive+0x26c>
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d017      	beq.n	800740c <HAL_SPI_TransmitReceive+0x26c>
 80073dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d114      	bne.n	800740c <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	330c      	adds	r3, #12
 80073ec:	7812      	ldrb	r2, [r2, #0]
 80073ee:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80073fe:	b29b      	uxth	r3, r3
 8007400:	3b01      	subs	r3, #1
 8007402:	b29a      	uxth	r2, r3
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007408:	2300      	movs	r3, #0
 800740a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b01      	cmp	r3, #1
 8007418:	d119      	bne.n	800744e <HAL_SPI_TransmitReceive+0x2ae>
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800741e:	b29b      	uxth	r3, r3
 8007420:	2b00      	cmp	r3, #0
 8007422:	d014      	beq.n	800744e <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	68da      	ldr	r2, [r3, #12]
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742e:	b2d2      	uxtb	r2, r2
 8007430:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007436:	1c5a      	adds	r2, r3, #1
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007440:	b29b      	uxth	r3, r3
 8007442:	3b01      	subs	r3, #1
 8007444:	b29a      	uxth	r2, r3
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800744a:	2301      	movs	r3, #1
 800744c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800744e:	f7fb fb57 	bl	8002b00 <HAL_GetTick>
 8007452:	4602      	mov	r2, r0
 8007454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007456:	1ad3      	subs	r3, r2, r3
 8007458:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745a:	429a      	cmp	r2, r3
 800745c:	d803      	bhi.n	8007466 <HAL_SPI_TransmitReceive+0x2c6>
 800745e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007460:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007464:	d102      	bne.n	800746c <HAL_SPI_TransmitReceive+0x2cc>
 8007466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007468:	2b00      	cmp	r3, #0
 800746a:	d103      	bne.n	8007474 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800746c:	2303      	movs	r3, #3
 800746e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8007472:	e029      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007478:	b29b      	uxth	r3, r3
 800747a:	2b00      	cmp	r3, #0
 800747c:	d1a2      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x224>
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d19d      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007488:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800748a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800748c:	68f8      	ldr	r0, [r7, #12]
 800748e:	f000 f917 	bl	80076c0 <SPI_EndRxTxTransaction>
 8007492:	4603      	mov	r3, r0
 8007494:	2b00      	cmp	r3, #0
 8007496:	d006      	beq.n	80074a6 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2220      	movs	r2, #32
 80074a2:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80074a4:	e010      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	689b      	ldr	r3, [r3, #8]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d10b      	bne.n	80074c6 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80074ae:	2300      	movs	r3, #0
 80074b0:	617b      	str	r3, [r7, #20]
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	617b      	str	r3, [r7, #20]
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	689b      	ldr	r3, [r3, #8]
 80074c0:	617b      	str	r3, [r7, #20]
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	e000      	b.n	80074c8 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80074c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2201      	movs	r2, #1
 80074cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	2200      	movs	r2, #0
 80074d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80074d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3730      	adds	r7, #48	; 0x30
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b088      	sub	sp, #32
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	60f8      	str	r0, [r7, #12]
 80074ec:	60b9      	str	r1, [r7, #8]
 80074ee:	603b      	str	r3, [r7, #0]
 80074f0:	4613      	mov	r3, r2
 80074f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074f4:	f7fb fb04 	bl	8002b00 <HAL_GetTick>
 80074f8:	4602      	mov	r2, r0
 80074fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074fc:	1a9b      	subs	r3, r3, r2
 80074fe:	683a      	ldr	r2, [r7, #0]
 8007500:	4413      	add	r3, r2
 8007502:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007504:	f7fb fafc 	bl	8002b00 <HAL_GetTick>
 8007508:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800750a:	4b39      	ldr	r3, [pc, #228]	; (80075f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	015b      	lsls	r3, r3, #5
 8007510:	0d1b      	lsrs	r3, r3, #20
 8007512:	69fa      	ldr	r2, [r7, #28]
 8007514:	fb02 f303 	mul.w	r3, r2, r3
 8007518:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800751a:	e054      	b.n	80075c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007522:	d050      	beq.n	80075c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007524:	f7fb faec 	bl	8002b00 <HAL_GetTick>
 8007528:	4602      	mov	r2, r0
 800752a:	69bb      	ldr	r3, [r7, #24]
 800752c:	1ad3      	subs	r3, r2, r3
 800752e:	69fa      	ldr	r2, [r7, #28]
 8007530:	429a      	cmp	r2, r3
 8007532:	d902      	bls.n	800753a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007534:	69fb      	ldr	r3, [r7, #28]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d13d      	bne.n	80075b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	685a      	ldr	r2, [r3, #4]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007548:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007552:	d111      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800755c:	d004      	beq.n	8007568 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007566:	d107      	bne.n	8007578 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007576:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800757c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007580:	d10f      	bne.n	80075a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007590:	601a      	str	r2, [r3, #0]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681a      	ldr	r2, [r3, #0]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80075a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2201      	movs	r2, #1
 80075a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2200      	movs	r2, #0
 80075ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80075b2:	2303      	movs	r3, #3
 80075b4:	e017      	b.n	80075e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d101      	bne.n	80075c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075bc:	2300      	movs	r3, #0
 80075be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	3b01      	subs	r3, #1
 80075c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	689a      	ldr	r2, [r3, #8]
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	4013      	ands	r3, r2
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	429a      	cmp	r2, r3
 80075d4:	bf0c      	ite	eq
 80075d6:	2301      	moveq	r3, #1
 80075d8:	2300      	movne	r3, #0
 80075da:	b2db      	uxtb	r3, r3
 80075dc:	461a      	mov	r2, r3
 80075de:	79fb      	ldrb	r3, [r7, #7]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d19b      	bne.n	800751c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3720      	adds	r7, #32
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}
 80075ee:	bf00      	nop
 80075f0:	20000008 	.word	0x20000008

080075f4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af02      	add	r7, sp, #8
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007608:	d111      	bne.n	800762e <SPI_EndRxTransaction+0x3a>
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007612:	d004      	beq.n	800761e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	689b      	ldr	r3, [r3, #8]
 8007618:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800761c:	d107      	bne.n	800762e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800762c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007636:	d12a      	bne.n	800768e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007640:	d012      	beq.n	8007668 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	2200      	movs	r2, #0
 800764a:	2180      	movs	r1, #128	; 0x80
 800764c:	68f8      	ldr	r0, [r7, #12]
 800764e:	f7ff ff49 	bl	80074e4 <SPI_WaitFlagStateUntilTimeout>
 8007652:	4603      	mov	r3, r0
 8007654:	2b00      	cmp	r3, #0
 8007656:	d02d      	beq.n	80076b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800765c:	f043 0220 	orr.w	r2, r3, #32
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e026      	b.n	80076b6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2200      	movs	r2, #0
 8007670:	2101      	movs	r1, #1
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7ff ff36 	bl	80074e4 <SPI_WaitFlagStateUntilTimeout>
 8007678:	4603      	mov	r3, r0
 800767a:	2b00      	cmp	r3, #0
 800767c:	d01a      	beq.n	80076b4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007682:	f043 0220 	orr.w	r2, r3, #32
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800768a:	2303      	movs	r3, #3
 800768c:	e013      	b.n	80076b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	2200      	movs	r2, #0
 8007696:	2101      	movs	r1, #1
 8007698:	68f8      	ldr	r0, [r7, #12]
 800769a:	f7ff ff23 	bl	80074e4 <SPI_WaitFlagStateUntilTimeout>
 800769e:	4603      	mov	r3, r0
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d007      	beq.n	80076b4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076a8:	f043 0220 	orr.w	r2, r3, #32
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e000      	b.n	80076b6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3710      	adds	r7, #16
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}
	...

080076c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076c0:	b580      	push	{r7, lr}
 80076c2:	b088      	sub	sp, #32
 80076c4:	af02      	add	r7, sp, #8
 80076c6:	60f8      	str	r0, [r7, #12]
 80076c8:	60b9      	str	r1, [r7, #8]
 80076ca:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80076cc:	4b1b      	ldr	r3, [pc, #108]	; (800773c <SPI_EndRxTxTransaction+0x7c>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4a1b      	ldr	r2, [pc, #108]	; (8007740 <SPI_EndRxTxTransaction+0x80>)
 80076d2:	fba2 2303 	umull	r2, r3, r2, r3
 80076d6:	0d5b      	lsrs	r3, r3, #21
 80076d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80076dc:	fb02 f303 	mul.w	r3, r2, r3
 80076e0:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076ea:	d112      	bne.n	8007712 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	9300      	str	r3, [sp, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	2200      	movs	r2, #0
 80076f4:	2180      	movs	r1, #128	; 0x80
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fef4 	bl	80074e4 <SPI_WaitFlagStateUntilTimeout>
 80076fc:	4603      	mov	r3, r0
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d016      	beq.n	8007730 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007706:	f043 0220 	orr.w	r2, r3, #32
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800770e:	2303      	movs	r3, #3
 8007710:	e00f      	b.n	8007732 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d00a      	beq.n	800772e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007718:	697b      	ldr	r3, [r7, #20]
 800771a:	3b01      	subs	r3, #1
 800771c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007728:	2b80      	cmp	r3, #128	; 0x80
 800772a:	d0f2      	beq.n	8007712 <SPI_EndRxTxTransaction+0x52>
 800772c:	e000      	b.n	8007730 <SPI_EndRxTxTransaction+0x70>
        break;
 800772e:	bf00      	nop
  }

  return HAL_OK;
 8007730:	2300      	movs	r3, #0
}
 8007732:	4618      	mov	r0, r3
 8007734:	3718      	adds	r7, #24
 8007736:	46bd      	mov	sp, r7
 8007738:	bd80      	pop	{r7, pc}
 800773a:	bf00      	nop
 800773c:	20000008 	.word	0x20000008
 8007740:	165e9f81 	.word	0x165e9f81

08007744 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d101      	bne.n	8007756 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e041      	b.n	80077da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800775c:	b2db      	uxtb	r3, r3
 800775e:	2b00      	cmp	r3, #0
 8007760:	d106      	bne.n	8007770 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2200      	movs	r2, #0
 8007766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800776a:	6878      	ldr	r0, [r7, #4]
 800776c:	f7fa fe46 	bl	80023fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681a      	ldr	r2, [r3, #0]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3304      	adds	r3, #4
 8007780:	4619      	mov	r1, r3
 8007782:	4610      	mov	r0, r2
 8007784:	f000 fcf8 	bl	8008178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2201      	movs	r2, #1
 800778c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2201      	movs	r2, #1
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2201      	movs	r2, #1
 80077a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2201      	movs	r2, #1
 80077b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2201      	movs	r2, #1
 80077bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2201      	movs	r2, #1
 80077c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2201      	movs	r2, #1
 80077cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077d8:	2300      	movs	r3, #0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b082      	sub	sp, #8
 80077e6:	af00      	add	r7, sp, #0
 80077e8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e041      	b.n	8007878 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077fa:	b2db      	uxtb	r3, r3
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d106      	bne.n	800780e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2200      	movs	r2, #0
 8007804:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f839 	bl	8007880 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	2202      	movs	r2, #2
 8007812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681a      	ldr	r2, [r3, #0]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	3304      	adds	r3, #4
 800781e:	4619      	mov	r1, r3
 8007820:	4610      	mov	r0, r2
 8007822:	f000 fca9 	bl	8008178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	2201      	movs	r2, #1
 800782a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	2201      	movs	r2, #1
 8007832:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2201      	movs	r2, #1
 800783a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2201      	movs	r2, #1
 800784a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	2201      	movs	r2, #1
 8007852:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2201      	movs	r2, #1
 800786a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	2201      	movs	r2, #1
 8007872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b084      	sub	sp, #16
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d109      	bne.n	80078b8 <HAL_TIM_PWM_Start+0x24>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b01      	cmp	r3, #1
 80078ae:	bf14      	ite	ne
 80078b0:	2301      	movne	r3, #1
 80078b2:	2300      	moveq	r3, #0
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	e022      	b.n	80078fe <HAL_TIM_PWM_Start+0x6a>
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	2b04      	cmp	r3, #4
 80078bc:	d109      	bne.n	80078d2 <HAL_TIM_PWM_Start+0x3e>
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80078c4:	b2db      	uxtb	r3, r3
 80078c6:	2b01      	cmp	r3, #1
 80078c8:	bf14      	ite	ne
 80078ca:	2301      	movne	r3, #1
 80078cc:	2300      	moveq	r3, #0
 80078ce:	b2db      	uxtb	r3, r3
 80078d0:	e015      	b.n	80078fe <HAL_TIM_PWM_Start+0x6a>
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	2b08      	cmp	r3, #8
 80078d6:	d109      	bne.n	80078ec <HAL_TIM_PWM_Start+0x58>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	bf14      	ite	ne
 80078e4:	2301      	movne	r3, #1
 80078e6:	2300      	moveq	r3, #0
 80078e8:	b2db      	uxtb	r3, r3
 80078ea:	e008      	b.n	80078fe <HAL_TIM_PWM_Start+0x6a>
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	2b01      	cmp	r3, #1
 80078f6:	bf14      	ite	ne
 80078f8:	2301      	movne	r3, #1
 80078fa:	2300      	moveq	r3, #0
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e068      	b.n	80079d8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d104      	bne.n	8007916 <HAL_TIM_PWM_Start+0x82>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007914:	e013      	b.n	800793e <HAL_TIM_PWM_Start+0xaa>
 8007916:	683b      	ldr	r3, [r7, #0]
 8007918:	2b04      	cmp	r3, #4
 800791a:	d104      	bne.n	8007926 <HAL_TIM_PWM_Start+0x92>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2202      	movs	r2, #2
 8007920:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007924:	e00b      	b.n	800793e <HAL_TIM_PWM_Start+0xaa>
 8007926:	683b      	ldr	r3, [r7, #0]
 8007928:	2b08      	cmp	r3, #8
 800792a:	d104      	bne.n	8007936 <HAL_TIM_PWM_Start+0xa2>
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2202      	movs	r2, #2
 8007930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007934:	e003      	b.n	800793e <HAL_TIM_PWM_Start+0xaa>
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2202      	movs	r2, #2
 800793a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	2201      	movs	r2, #1
 8007944:	6839      	ldr	r1, [r7, #0]
 8007946:	4618      	mov	r0, r3
 8007948:	f000 febc 	bl	80086c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	4a23      	ldr	r2, [pc, #140]	; (80079e0 <HAL_TIM_PWM_Start+0x14c>)
 8007952:	4293      	cmp	r3, r2
 8007954:	d107      	bne.n	8007966 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007964:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	4a1d      	ldr	r2, [pc, #116]	; (80079e0 <HAL_TIM_PWM_Start+0x14c>)
 800796c:	4293      	cmp	r3, r2
 800796e:	d018      	beq.n	80079a2 <HAL_TIM_PWM_Start+0x10e>
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007978:	d013      	beq.n	80079a2 <HAL_TIM_PWM_Start+0x10e>
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	4a19      	ldr	r2, [pc, #100]	; (80079e4 <HAL_TIM_PWM_Start+0x150>)
 8007980:	4293      	cmp	r3, r2
 8007982:	d00e      	beq.n	80079a2 <HAL_TIM_PWM_Start+0x10e>
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <HAL_TIM_PWM_Start+0x154>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d009      	beq.n	80079a2 <HAL_TIM_PWM_Start+0x10e>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a16      	ldr	r2, [pc, #88]	; (80079ec <HAL_TIM_PWM_Start+0x158>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d004      	beq.n	80079a2 <HAL_TIM_PWM_Start+0x10e>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a14      	ldr	r2, [pc, #80]	; (80079f0 <HAL_TIM_PWM_Start+0x15c>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d111      	bne.n	80079c6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	689b      	ldr	r3, [r3, #8]
 80079a8:	f003 0307 	and.w	r3, r3, #7
 80079ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2b06      	cmp	r3, #6
 80079b2:	d010      	beq.n	80079d6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	681a      	ldr	r2, [r3, #0]
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f042 0201 	orr.w	r2, r2, #1
 80079c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c4:	e007      	b.n	80079d6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	f042 0201 	orr.w	r2, r2, #1
 80079d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079d6:	2300      	movs	r3, #0
}
 80079d8:	4618      	mov	r0, r3
 80079da:	3710      	adds	r7, #16
 80079dc:	46bd      	mov	sp, r7
 80079de:	bd80      	pop	{r7, pc}
 80079e0:	40010000 	.word	0x40010000
 80079e4:	40000400 	.word	0x40000400
 80079e8:	40000800 	.word	0x40000800
 80079ec:	40000c00 	.word	0x40000c00
 80079f0:	40014000 	.word	0x40014000

080079f4 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80079f4:	b580      	push	{r7, lr}
 80079f6:	b084      	sub	sp, #16
 80079f8:	af00      	add	r7, sp, #0
 80079fa:	6078      	str	r0, [r7, #4]
 80079fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80079fe:	2300      	movs	r3, #0
 8007a00:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a02:	683b      	ldr	r3, [r7, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d109      	bne.n	8007a1c <HAL_TIM_PWM_Start_IT+0x28>
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b01      	cmp	r3, #1
 8007a12:	bf14      	ite	ne
 8007a14:	2301      	movne	r3, #1
 8007a16:	2300      	moveq	r3, #0
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	e022      	b.n	8007a62 <HAL_TIM_PWM_Start_IT+0x6e>
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	2b04      	cmp	r3, #4
 8007a20:	d109      	bne.n	8007a36 <HAL_TIM_PWM_Start_IT+0x42>
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	bf14      	ite	ne
 8007a2e:	2301      	movne	r3, #1
 8007a30:	2300      	moveq	r3, #0
 8007a32:	b2db      	uxtb	r3, r3
 8007a34:	e015      	b.n	8007a62 <HAL_TIM_PWM_Start_IT+0x6e>
 8007a36:	683b      	ldr	r3, [r7, #0]
 8007a38:	2b08      	cmp	r3, #8
 8007a3a:	d109      	bne.n	8007a50 <HAL_TIM_PWM_Start_IT+0x5c>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	2b01      	cmp	r3, #1
 8007a46:	bf14      	ite	ne
 8007a48:	2301      	movne	r3, #1
 8007a4a:	2300      	moveq	r3, #0
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	e008      	b.n	8007a62 <HAL_TIM_PWM_Start_IT+0x6e>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b01      	cmp	r3, #1
 8007a5a:	bf14      	ite	ne
 8007a5c:	2301      	movne	r3, #1
 8007a5e:	2300      	moveq	r3, #0
 8007a60:	b2db      	uxtb	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d001      	beq.n	8007a6a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8007a66:	2301      	movs	r3, #1
 8007a68:	e0b3      	b.n	8007bd2 <HAL_TIM_PWM_Start_IT+0x1de>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d104      	bne.n	8007a7a <HAL_TIM_PWM_Start_IT+0x86>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2202      	movs	r2, #2
 8007a74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007a78:	e013      	b.n	8007aa2 <HAL_TIM_PWM_Start_IT+0xae>
 8007a7a:	683b      	ldr	r3, [r7, #0]
 8007a7c:	2b04      	cmp	r3, #4
 8007a7e:	d104      	bne.n	8007a8a <HAL_TIM_PWM_Start_IT+0x96>
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2202      	movs	r2, #2
 8007a84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007a88:	e00b      	b.n	8007aa2 <HAL_TIM_PWM_Start_IT+0xae>
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	2b08      	cmp	r3, #8
 8007a8e:	d104      	bne.n	8007a9a <HAL_TIM_PWM_Start_IT+0xa6>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	2202      	movs	r2, #2
 8007a94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007a98:	e003      	b.n	8007aa2 <HAL_TIM_PWM_Start_IT+0xae>
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2202      	movs	r2, #2
 8007a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  switch (Channel)
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b0c      	cmp	r3, #12
 8007aa6:	d841      	bhi.n	8007b2c <HAL_TIM_PWM_Start_IT+0x138>
 8007aa8:	a201      	add	r2, pc, #4	; (adr r2, 8007ab0 <HAL_TIM_PWM_Start_IT+0xbc>)
 8007aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aae:	bf00      	nop
 8007ab0:	08007ae5 	.word	0x08007ae5
 8007ab4:	08007b2d 	.word	0x08007b2d
 8007ab8:	08007b2d 	.word	0x08007b2d
 8007abc:	08007b2d 	.word	0x08007b2d
 8007ac0:	08007af7 	.word	0x08007af7
 8007ac4:	08007b2d 	.word	0x08007b2d
 8007ac8:	08007b2d 	.word	0x08007b2d
 8007acc:	08007b2d 	.word	0x08007b2d
 8007ad0:	08007b09 	.word	0x08007b09
 8007ad4:	08007b2d 	.word	0x08007b2d
 8007ad8:	08007b2d 	.word	0x08007b2d
 8007adc:	08007b2d 	.word	0x08007b2d
 8007ae0:	08007b1b 	.word	0x08007b1b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	68da      	ldr	r2, [r3, #12]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f042 0202 	orr.w	r2, r2, #2
 8007af2:	60da      	str	r2, [r3, #12]
      break;
 8007af4:	e01d      	b.n	8007b32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	68da      	ldr	r2, [r3, #12]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f042 0204 	orr.w	r2, r2, #4
 8007b04:	60da      	str	r2, [r3, #12]
      break;
 8007b06:	e014      	b.n	8007b32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	f042 0208 	orr.w	r2, r2, #8
 8007b16:	60da      	str	r2, [r3, #12]
      break;
 8007b18:	e00b      	b.n	8007b32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	68da      	ldr	r2, [r3, #12]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f042 0210 	orr.w	r2, r2, #16
 8007b28:	60da      	str	r2, [r3, #12]
      break;
 8007b2a:	e002      	b.n	8007b32 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8007b30:	bf00      	nop
  }

  if (status == HAL_OK)
 8007b32:	7bfb      	ldrb	r3, [r7, #15]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d14b      	bne.n	8007bd0 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	6839      	ldr	r1, [r7, #0]
 8007b40:	4618      	mov	r0, r3
 8007b42:	f000 fdbf 	bl	80086c4 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a24      	ldr	r2, [pc, #144]	; (8007bdc <HAL_TIM_PWM_Start_IT+0x1e8>)
 8007b4c:	4293      	cmp	r3, r2
 8007b4e:	d107      	bne.n	8007b60 <HAL_TIM_PWM_Start_IT+0x16c>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b5e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a1d      	ldr	r2, [pc, #116]	; (8007bdc <HAL_TIM_PWM_Start_IT+0x1e8>)
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d018      	beq.n	8007b9c <HAL_TIM_PWM_Start_IT+0x1a8>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b72:	d013      	beq.n	8007b9c <HAL_TIM_PWM_Start_IT+0x1a8>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	4a19      	ldr	r2, [pc, #100]	; (8007be0 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8007b7a:	4293      	cmp	r3, r2
 8007b7c:	d00e      	beq.n	8007b9c <HAL_TIM_PWM_Start_IT+0x1a8>
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	4a18      	ldr	r2, [pc, #96]	; (8007be4 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d009      	beq.n	8007b9c <HAL_TIM_PWM_Start_IT+0x1a8>
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	d004      	beq.n	8007b9c <HAL_TIM_PWM_Start_IT+0x1a8>
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	4a15      	ldr	r2, [pc, #84]	; (8007bec <HAL_TIM_PWM_Start_IT+0x1f8>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d111      	bne.n	8007bc0 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0307 	and.w	r3, r3, #7
 8007ba6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	2b06      	cmp	r3, #6
 8007bac:	d010      	beq.n	8007bd0 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0201 	orr.w	r2, r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbe:	e007      	b.n	8007bd0 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0201 	orr.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007bd0:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	40010000 	.word	0x40010000
 8007be0:	40000400 	.word	0x40000400
 8007be4:	40000800 	.word	0x40000800
 8007be8:	40000c00 	.word	0x40000c00
 8007bec:	40014000 	.word	0x40014000

08007bf0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	b082      	sub	sp, #8
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	691b      	ldr	r3, [r3, #16]
 8007bfe:	f003 0302 	and.w	r3, r3, #2
 8007c02:	2b02      	cmp	r3, #2
 8007c04:	d122      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	68db      	ldr	r3, [r3, #12]
 8007c0c:	f003 0302 	and.w	r3, r3, #2
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d11b      	bne.n	8007c4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f06f 0202 	mvn.w	r2, #2
 8007c1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	2201      	movs	r2, #1
 8007c22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	699b      	ldr	r3, [r3, #24]
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa81 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007c38:	e005      	b.n	8007c46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f000 fa73 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f000 fa84 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	f003 0304 	and.w	r3, r3, #4
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d122      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	68db      	ldr	r3, [r3, #12]
 8007c60:	f003 0304 	and.w	r3, r3, #4
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d11b      	bne.n	8007ca0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f06f 0204 	mvn.w	r2, #4
 8007c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2202      	movs	r2, #2
 8007c76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	699b      	ldr	r3, [r3, #24]
 8007c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d003      	beq.n	8007c8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa57 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007c8c:	e005      	b.n	8007c9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c8e:	6878      	ldr	r0, [r7, #4]
 8007c90:	f000 fa49 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c94:	6878      	ldr	r0, [r7, #4]
 8007c96:	f000 fa5a 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	691b      	ldr	r3, [r3, #16]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b08      	cmp	r3, #8
 8007cac:	d122      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	68db      	ldr	r3, [r3, #12]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d11b      	bne.n	8007cf4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f06f 0208 	mvn.w	r2, #8
 8007cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2204      	movs	r2, #4
 8007cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	69db      	ldr	r3, [r3, #28]
 8007cd2:	f003 0303 	and.w	r3, r3, #3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d003      	beq.n	8007ce2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 fa2d 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007ce0:	e005      	b.n	8007cee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f000 fa1f 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 fa30 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	691b      	ldr	r3, [r3, #16]
 8007cfa:	f003 0310 	and.w	r3, r3, #16
 8007cfe:	2b10      	cmp	r3, #16
 8007d00:	d122      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f003 0310 	and.w	r3, r3, #16
 8007d0c:	2b10      	cmp	r3, #16
 8007d0e:	d11b      	bne.n	8007d48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	f06f 0210 	mvn.w	r2, #16
 8007d18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2208      	movs	r2, #8
 8007d1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	69db      	ldr	r3, [r3, #28]
 8007d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d003      	beq.n	8007d36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 fa03 	bl	800813a <HAL_TIM_IC_CaptureCallback>
 8007d34:	e005      	b.n	8007d42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d36:	6878      	ldr	r0, [r7, #4]
 8007d38:	f000 f9f5 	bl	8008126 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 fa06 	bl	800814e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d10e      	bne.n	8007d74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	68db      	ldr	r3, [r3, #12]
 8007d5c:	f003 0301 	and.w	r3, r3, #1
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d107      	bne.n	8007d74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f06f 0201 	mvn.w	r2, #1
 8007d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f000 f9cf 	bl	8008112 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	691b      	ldr	r3, [r3, #16]
 8007d7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d7e:	2b80      	cmp	r3, #128	; 0x80
 8007d80:	d10e      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8c:	2b80      	cmp	r3, #128	; 0x80
 8007d8e:	d107      	bne.n	8007da0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f000 fd30 	bl	8008800 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007daa:	2b40      	cmp	r3, #64	; 0x40
 8007dac:	d10e      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	68db      	ldr	r3, [r3, #12]
 8007db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db8:	2b40      	cmp	r3, #64	; 0x40
 8007dba:	d107      	bne.n	8007dcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 f9cb 	bl	8008162 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	691b      	ldr	r3, [r3, #16]
 8007dd2:	f003 0320 	and.w	r3, r3, #32
 8007dd6:	2b20      	cmp	r3, #32
 8007dd8:	d10e      	bne.n	8007df8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68db      	ldr	r3, [r3, #12]
 8007de0:	f003 0320 	and.w	r3, r3, #32
 8007de4:	2b20      	cmp	r3, #32
 8007de6:	d107      	bne.n	8007df8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f06f 0220 	mvn.w	r2, #32
 8007df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f000 fcfa 	bl	80087ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007df8:	bf00      	nop
 8007dfa:	3708      	adds	r7, #8
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b086      	sub	sp, #24
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d101      	bne.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007e1a:	2302      	movs	r3, #2
 8007e1c:	e0ae      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2b0c      	cmp	r3, #12
 8007e2a:	f200 809f 	bhi.w	8007f6c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e2e:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e34:	08007e69 	.word	0x08007e69
 8007e38:	08007f6d 	.word	0x08007f6d
 8007e3c:	08007f6d 	.word	0x08007f6d
 8007e40:	08007f6d 	.word	0x08007f6d
 8007e44:	08007ea9 	.word	0x08007ea9
 8007e48:	08007f6d 	.word	0x08007f6d
 8007e4c:	08007f6d 	.word	0x08007f6d
 8007e50:	08007f6d 	.word	0x08007f6d
 8007e54:	08007eeb 	.word	0x08007eeb
 8007e58:	08007f6d 	.word	0x08007f6d
 8007e5c:	08007f6d 	.word	0x08007f6d
 8007e60:	08007f6d 	.word	0x08007f6d
 8007e64:	08007f2b 	.word	0x08007f2b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	68b9      	ldr	r1, [r7, #8]
 8007e6e:	4618      	mov	r0, r3
 8007e70:	f000 fa02 	bl	8008278 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	699a      	ldr	r2, [r3, #24]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f042 0208 	orr.w	r2, r2, #8
 8007e82:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699a      	ldr	r2, [r3, #24]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0204 	bic.w	r2, r2, #4
 8007e92:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	6999      	ldr	r1, [r3, #24]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	691a      	ldr	r2, [r3, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	430a      	orrs	r2, r1
 8007ea4:	619a      	str	r2, [r3, #24]
      break;
 8007ea6:	e064      	b.n	8007f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68b9      	ldr	r1, [r7, #8]
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 fa48 	bl	8008344 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	699a      	ldr	r2, [r3, #24]
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ec2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	699a      	ldr	r2, [r3, #24]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	6999      	ldr	r1, [r3, #24]
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	021a      	lsls	r2, r3, #8
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	430a      	orrs	r2, r1
 8007ee6:	619a      	str	r2, [r3, #24]
      break;
 8007ee8:	e043      	b.n	8007f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	68b9      	ldr	r1, [r7, #8]
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f000 fa93 	bl	800841c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	69da      	ldr	r2, [r3, #28]
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	f042 0208 	orr.w	r2, r2, #8
 8007f04:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	69da      	ldr	r2, [r3, #28]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f022 0204 	bic.w	r2, r2, #4
 8007f14:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	69d9      	ldr	r1, [r3, #28]
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	691a      	ldr	r2, [r3, #16]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	430a      	orrs	r2, r1
 8007f26:	61da      	str	r2, [r3, #28]
      break;
 8007f28:	e023      	b.n	8007f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	68b9      	ldr	r1, [r7, #8]
 8007f30:	4618      	mov	r0, r3
 8007f32:	f000 fadd 	bl	80084f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	69da      	ldr	r2, [r3, #28]
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	69da      	ldr	r2, [r3, #28]
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	69d9      	ldr	r1, [r3, #28]
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	691b      	ldr	r3, [r3, #16]
 8007f60:	021a      	lsls	r2, r3, #8
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	430a      	orrs	r2, r1
 8007f68:	61da      	str	r2, [r3, #28]
      break;
 8007f6a:	e002      	b.n	8007f72 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f6c:	2301      	movs	r3, #1
 8007f6e:	75fb      	strb	r3, [r7, #23]
      break;
 8007f70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3718      	adds	r7, #24
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f8e:	2300      	movs	r3, #0
 8007f90:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f98:	2b01      	cmp	r3, #1
 8007f9a:	d101      	bne.n	8007fa0 <HAL_TIM_ConfigClockSource+0x1c>
 8007f9c:	2302      	movs	r3, #2
 8007f9e:	e0b4      	b.n	800810a <HAL_TIM_ConfigClockSource+0x186>
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2201      	movs	r2, #1
 8007fa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007fb8:	68bb      	ldr	r3, [r7, #8]
 8007fba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007fbe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007fc6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68ba      	ldr	r2, [r7, #8]
 8007fce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fd8:	d03e      	beq.n	8008058 <HAL_TIM_ConfigClockSource+0xd4>
 8007fda:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007fde:	f200 8087 	bhi.w	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fe6:	f000 8086 	beq.w	80080f6 <HAL_TIM_ConfigClockSource+0x172>
 8007fea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fee:	d87f      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff0:	2b70      	cmp	r3, #112	; 0x70
 8007ff2:	d01a      	beq.n	800802a <HAL_TIM_ConfigClockSource+0xa6>
 8007ff4:	2b70      	cmp	r3, #112	; 0x70
 8007ff6:	d87b      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff8:	2b60      	cmp	r3, #96	; 0x60
 8007ffa:	d050      	beq.n	800809e <HAL_TIM_ConfigClockSource+0x11a>
 8007ffc:	2b60      	cmp	r3, #96	; 0x60
 8007ffe:	d877      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008000:	2b50      	cmp	r3, #80	; 0x50
 8008002:	d03c      	beq.n	800807e <HAL_TIM_ConfigClockSource+0xfa>
 8008004:	2b50      	cmp	r3, #80	; 0x50
 8008006:	d873      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008008:	2b40      	cmp	r3, #64	; 0x40
 800800a:	d058      	beq.n	80080be <HAL_TIM_ConfigClockSource+0x13a>
 800800c:	2b40      	cmp	r3, #64	; 0x40
 800800e:	d86f      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008010:	2b30      	cmp	r3, #48	; 0x30
 8008012:	d064      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x15a>
 8008014:	2b30      	cmp	r3, #48	; 0x30
 8008016:	d86b      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008018:	2b20      	cmp	r3, #32
 800801a:	d060      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x15a>
 800801c:	2b20      	cmp	r3, #32
 800801e:	d867      	bhi.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
 8008020:	2b00      	cmp	r3, #0
 8008022:	d05c      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x15a>
 8008024:	2b10      	cmp	r3, #16
 8008026:	d05a      	beq.n	80080de <HAL_TIM_ConfigClockSource+0x15a>
 8008028:	e062      	b.n	80080f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6899      	ldr	r1, [r3, #8]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	683b      	ldr	r3, [r7, #0]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	f000 fb23 	bl	8008684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	689b      	ldr	r3, [r3, #8]
 8008044:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800804c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	68ba      	ldr	r2, [r7, #8]
 8008054:	609a      	str	r2, [r3, #8]
      break;
 8008056:	e04f      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6818      	ldr	r0, [r3, #0]
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	6899      	ldr	r1, [r3, #8]
 8008060:	683b      	ldr	r3, [r7, #0]
 8008062:	685a      	ldr	r2, [r3, #4]
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	f000 fb0c 	bl	8008684 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	689a      	ldr	r2, [r3, #8]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800807a:	609a      	str	r2, [r3, #8]
      break;
 800807c:	e03c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6818      	ldr	r0, [r3, #0]
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	6859      	ldr	r1, [r3, #4]
 8008086:	683b      	ldr	r3, [r7, #0]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	461a      	mov	r2, r3
 800808c:	f000 fa80 	bl	8008590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	2150      	movs	r1, #80	; 0x50
 8008096:	4618      	mov	r0, r3
 8008098:	f000 fad9 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 800809c:	e02c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6818      	ldr	r0, [r3, #0]
 80080a2:	683b      	ldr	r3, [r7, #0]
 80080a4:	6859      	ldr	r1, [r3, #4]
 80080a6:	683b      	ldr	r3, [r7, #0]
 80080a8:	68db      	ldr	r3, [r3, #12]
 80080aa:	461a      	mov	r2, r3
 80080ac:	f000 fa9f 	bl	80085ee <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2160      	movs	r1, #96	; 0x60
 80080b6:	4618      	mov	r0, r3
 80080b8:	f000 fac9 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 80080bc:	e01c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6818      	ldr	r0, [r3, #0]
 80080c2:	683b      	ldr	r3, [r7, #0]
 80080c4:	6859      	ldr	r1, [r3, #4]
 80080c6:	683b      	ldr	r3, [r7, #0]
 80080c8:	68db      	ldr	r3, [r3, #12]
 80080ca:	461a      	mov	r2, r3
 80080cc:	f000 fa60 	bl	8008590 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2140      	movs	r1, #64	; 0x40
 80080d6:	4618      	mov	r0, r3
 80080d8:	f000 fab9 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 80080dc:	e00c      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681a      	ldr	r2, [r3, #0]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	4619      	mov	r1, r3
 80080e8:	4610      	mov	r0, r2
 80080ea:	f000 fab0 	bl	800864e <TIM_ITRx_SetConfig>
      break;
 80080ee:	e003      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080f0:	2301      	movs	r3, #1
 80080f2:	73fb      	strb	r3, [r7, #15]
      break;
 80080f4:	e000      	b.n	80080f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2201      	movs	r2, #1
 80080fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2200      	movs	r2, #0
 8008104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008108:	7bfb      	ldrb	r3, [r7, #15]
}
 800810a:	4618      	mov	r0, r3
 800810c:	3710      	adds	r7, #16
 800810e:	46bd      	mov	sp, r7
 8008110:	bd80      	pop	{r7, pc}

08008112 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008112:	b480      	push	{r7}
 8008114:	b083      	sub	sp, #12
 8008116:	af00      	add	r7, sp, #0
 8008118:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008124:	4770      	bx	lr

08008126 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008126:	b480      	push	{r7}
 8008128:	b083      	sub	sp, #12
 800812a:	af00      	add	r7, sp, #0
 800812c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800812e:	bf00      	nop
 8008130:	370c      	adds	r7, #12
 8008132:	46bd      	mov	sp, r7
 8008134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008138:	4770      	bx	lr

0800813a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800813a:	b480      	push	{r7}
 800813c:	b083      	sub	sp, #12
 800813e:	af00      	add	r7, sp, #0
 8008140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008142:	bf00      	nop
 8008144:	370c      	adds	r7, #12
 8008146:	46bd      	mov	sp, r7
 8008148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814c:	4770      	bx	lr

0800814e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800814e:	b480      	push	{r7}
 8008150:	b083      	sub	sp, #12
 8008152:	af00      	add	r7, sp, #0
 8008154:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008156:	bf00      	nop
 8008158:	370c      	adds	r7, #12
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr

08008162 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800816a:	bf00      	nop
 800816c:	370c      	adds	r7, #12
 800816e:	46bd      	mov	sp, r7
 8008170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008174:	4770      	bx	lr
	...

08008178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008178:	b480      	push	{r7}
 800817a:	b085      	sub	sp, #20
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	4a34      	ldr	r2, [pc, #208]	; (800825c <TIM_Base_SetConfig+0xe4>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d00f      	beq.n	80081b0 <TIM_Base_SetConfig+0x38>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008196:	d00b      	beq.n	80081b0 <TIM_Base_SetConfig+0x38>
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a31      	ldr	r2, [pc, #196]	; (8008260 <TIM_Base_SetConfig+0xe8>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d007      	beq.n	80081b0 <TIM_Base_SetConfig+0x38>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a30      	ldr	r2, [pc, #192]	; (8008264 <TIM_Base_SetConfig+0xec>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d003      	beq.n	80081b0 <TIM_Base_SetConfig+0x38>
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	4a2f      	ldr	r2, [pc, #188]	; (8008268 <TIM_Base_SetConfig+0xf0>)
 80081ac:	4293      	cmp	r3, r2
 80081ae:	d108      	bne.n	80081c2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80081b8:	683b      	ldr	r3, [r7, #0]
 80081ba:	685b      	ldr	r3, [r3, #4]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4313      	orrs	r3, r2
 80081c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a25      	ldr	r2, [pc, #148]	; (800825c <TIM_Base_SetConfig+0xe4>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d01b      	beq.n	8008202 <TIM_Base_SetConfig+0x8a>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081d0:	d017      	beq.n	8008202 <TIM_Base_SetConfig+0x8a>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a22      	ldr	r2, [pc, #136]	; (8008260 <TIM_Base_SetConfig+0xe8>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d013      	beq.n	8008202 <TIM_Base_SetConfig+0x8a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a21      	ldr	r2, [pc, #132]	; (8008264 <TIM_Base_SetConfig+0xec>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d00f      	beq.n	8008202 <TIM_Base_SetConfig+0x8a>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a20      	ldr	r2, [pc, #128]	; (8008268 <TIM_Base_SetConfig+0xf0>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d00b      	beq.n	8008202 <TIM_Base_SetConfig+0x8a>
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a1f      	ldr	r2, [pc, #124]	; (800826c <TIM_Base_SetConfig+0xf4>)
 80081ee:	4293      	cmp	r3, r2
 80081f0:	d007      	beq.n	8008202 <TIM_Base_SetConfig+0x8a>
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	4a1e      	ldr	r2, [pc, #120]	; (8008270 <TIM_Base_SetConfig+0xf8>)
 80081f6:	4293      	cmp	r3, r2
 80081f8:	d003      	beq.n	8008202 <TIM_Base_SetConfig+0x8a>
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	4a1d      	ldr	r2, [pc, #116]	; (8008274 <TIM_Base_SetConfig+0xfc>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d108      	bne.n	8008214 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008208:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	68db      	ldr	r3, [r3, #12]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4313      	orrs	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800821a:	683b      	ldr	r3, [r7, #0]
 800821c:	695b      	ldr	r3, [r3, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	68fa      	ldr	r2, [r7, #12]
 8008226:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	689a      	ldr	r2, [r3, #8]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	681a      	ldr	r2, [r3, #0]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a08      	ldr	r2, [pc, #32]	; (800825c <TIM_Base_SetConfig+0xe4>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d103      	bne.n	8008248 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	691a      	ldr	r2, [r3, #16]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	615a      	str	r2, [r3, #20]
}
 800824e:	bf00      	nop
 8008250:	3714      	adds	r7, #20
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40014000 	.word	0x40014000
 8008270:	40014400 	.word	0x40014400
 8008274:	40014800 	.word	0x40014800

08008278 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	6078      	str	r0, [r7, #4]
 8008280:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	6a1b      	ldr	r3, [r3, #32]
 8008286:	f023 0201 	bic.w	r2, r3, #1
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6a1b      	ldr	r3, [r3, #32]
 8008292:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	699b      	ldr	r3, [r3, #24]
 800829e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80082a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	f023 0303 	bic.w	r3, r3, #3
 80082ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082b0:	683b      	ldr	r3, [r7, #0]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	68fa      	ldr	r2, [r7, #12]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082ba:	697b      	ldr	r3, [r7, #20]
 80082bc:	f023 0302 	bic.w	r3, r3, #2
 80082c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	689b      	ldr	r3, [r3, #8]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	4313      	orrs	r3, r2
 80082ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	4a1c      	ldr	r2, [pc, #112]	; (8008340 <TIM_OC1_SetConfig+0xc8>)
 80082d0:	4293      	cmp	r3, r2
 80082d2:	d10c      	bne.n	80082ee <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f023 0308 	bic.w	r3, r3, #8
 80082da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082dc:	683b      	ldr	r3, [r7, #0]
 80082de:	68db      	ldr	r3, [r3, #12]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	f023 0304 	bic.w	r3, r3, #4
 80082ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a13      	ldr	r2, [pc, #76]	; (8008340 <TIM_OC1_SetConfig+0xc8>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d111      	bne.n	800831a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	4313      	orrs	r3, r2
 800830e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	693a      	ldr	r2, [r7, #16]
 8008316:	4313      	orrs	r3, r2
 8008318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	693a      	ldr	r2, [r7, #16]
 800831e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	697a      	ldr	r2, [r7, #20]
 8008332:	621a      	str	r2, [r3, #32]
}
 8008334:	bf00      	nop
 8008336:	371c      	adds	r7, #28
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr
 8008340:	40010000 	.word	0x40010000

08008344 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008344:	b480      	push	{r7}
 8008346:	b087      	sub	sp, #28
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
 800834c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	6a1b      	ldr	r3, [r3, #32]
 8008352:	f023 0210 	bic.w	r2, r3, #16
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a1b      	ldr	r3, [r3, #32]
 800835e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	685b      	ldr	r3, [r3, #4]
 8008364:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	699b      	ldr	r3, [r3, #24]
 800836a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800837a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800837c:	683b      	ldr	r3, [r7, #0]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	021b      	lsls	r3, r3, #8
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008388:	697b      	ldr	r3, [r7, #20]
 800838a:	f023 0320 	bic.w	r3, r3, #32
 800838e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	689b      	ldr	r3, [r3, #8]
 8008394:	011b      	lsls	r3, r3, #4
 8008396:	697a      	ldr	r2, [r7, #20]
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	4a1e      	ldr	r2, [pc, #120]	; (8008418 <TIM_OC2_SetConfig+0xd4>)
 80083a0:	4293      	cmp	r3, r2
 80083a2:	d10d      	bne.n	80083c0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083ac:	683b      	ldr	r3, [r7, #0]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	011b      	lsls	r3, r3, #4
 80083b2:	697a      	ldr	r2, [r7, #20]
 80083b4:	4313      	orrs	r3, r2
 80083b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80083be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4a15      	ldr	r2, [pc, #84]	; (8008418 <TIM_OC2_SetConfig+0xd4>)
 80083c4:	4293      	cmp	r3, r2
 80083c6:	d113      	bne.n	80083f0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80083c8:	693b      	ldr	r3, [r7, #16]
 80083ca:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083ce:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80083d0:	693b      	ldr	r3, [r7, #16]
 80083d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083d6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80083d8:	683b      	ldr	r3, [r7, #0]
 80083da:	695b      	ldr	r3, [r3, #20]
 80083dc:	009b      	lsls	r3, r3, #2
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	699b      	ldr	r3, [r3, #24]
 80083e8:	009b      	lsls	r3, r3, #2
 80083ea:	693a      	ldr	r2, [r7, #16]
 80083ec:	4313      	orrs	r3, r2
 80083ee:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	68fa      	ldr	r2, [r7, #12]
 80083fa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	685a      	ldr	r2, [r3, #4]
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	697a      	ldr	r2, [r7, #20]
 8008408:	621a      	str	r2, [r3, #32]
}
 800840a:	bf00      	nop
 800840c:	371c      	adds	r7, #28
 800840e:	46bd      	mov	sp, r7
 8008410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008414:	4770      	bx	lr
 8008416:	bf00      	nop
 8008418:	40010000 	.word	0x40010000

0800841c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800841c:	b480      	push	{r7}
 800841e:	b087      	sub	sp, #28
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	6a1b      	ldr	r3, [r3, #32]
 800842a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	6a1b      	ldr	r3, [r3, #32]
 8008436:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	685b      	ldr	r3, [r3, #4]
 800843c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	69db      	ldr	r3, [r3, #28]
 8008442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800844a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f023 0303 	bic.w	r3, r3, #3
 8008452:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	68fa      	ldr	r2, [r7, #12]
 800845a:	4313      	orrs	r3, r2
 800845c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008464:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008466:	683b      	ldr	r3, [r7, #0]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	021b      	lsls	r3, r3, #8
 800846c:	697a      	ldr	r2, [r7, #20]
 800846e:	4313      	orrs	r3, r2
 8008470:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4a1d      	ldr	r2, [pc, #116]	; (80084ec <TIM_OC3_SetConfig+0xd0>)
 8008476:	4293      	cmp	r3, r2
 8008478:	d10d      	bne.n	8008496 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008480:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	68db      	ldr	r3, [r3, #12]
 8008486:	021b      	lsls	r3, r3, #8
 8008488:	697a      	ldr	r2, [r7, #20]
 800848a:	4313      	orrs	r3, r2
 800848c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800848e:	697b      	ldr	r3, [r7, #20]
 8008490:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008494:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	4a14      	ldr	r2, [pc, #80]	; (80084ec <TIM_OC3_SetConfig+0xd0>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d113      	bne.n	80084c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800849e:	693b      	ldr	r3, [r7, #16]
 80084a0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80084a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	695b      	ldr	r3, [r3, #20]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	699b      	ldr	r3, [r3, #24]
 80084be:	011b      	lsls	r3, r3, #4
 80084c0:	693a      	ldr	r2, [r7, #16]
 80084c2:	4313      	orrs	r3, r2
 80084c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	693a      	ldr	r2, [r7, #16]
 80084ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	685a      	ldr	r2, [r3, #4]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	697a      	ldr	r2, [r7, #20]
 80084de:	621a      	str	r2, [r3, #32]
}
 80084e0:	bf00      	nop
 80084e2:	371c      	adds	r7, #28
 80084e4:	46bd      	mov	sp, r7
 80084e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ea:	4770      	bx	lr
 80084ec:	40010000 	.word	0x40010000

080084f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b087      	sub	sp, #28
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6a1b      	ldr	r3, [r3, #32]
 80084fe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6a1b      	ldr	r3, [r3, #32]
 800850a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	685b      	ldr	r3, [r3, #4]
 8008510:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	69db      	ldr	r3, [r3, #28]
 8008516:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800851e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008526:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	021b      	lsls	r3, r3, #8
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	4313      	orrs	r3, r2
 8008532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800853a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800853c:	683b      	ldr	r3, [r7, #0]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	031b      	lsls	r3, r3, #12
 8008542:	693a      	ldr	r2, [r7, #16]
 8008544:	4313      	orrs	r3, r2
 8008546:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	4a10      	ldr	r2, [pc, #64]	; (800858c <TIM_OC4_SetConfig+0x9c>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d109      	bne.n	8008564 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008556:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	695b      	ldr	r3, [r3, #20]
 800855c:	019b      	lsls	r3, r3, #6
 800855e:	697a      	ldr	r2, [r7, #20]
 8008560:	4313      	orrs	r3, r2
 8008562:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	697a      	ldr	r2, [r7, #20]
 8008568:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	685a      	ldr	r2, [r3, #4]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	693a      	ldr	r2, [r7, #16]
 800857c:	621a      	str	r2, [r3, #32]
}
 800857e:	bf00      	nop
 8008580:	371c      	adds	r7, #28
 8008582:	46bd      	mov	sp, r7
 8008584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008588:	4770      	bx	lr
 800858a:	bf00      	nop
 800858c:	40010000 	.word	0x40010000

08008590 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008590:	b480      	push	{r7}
 8008592:	b087      	sub	sp, #28
 8008594:	af00      	add	r7, sp, #0
 8008596:	60f8      	str	r0, [r7, #12]
 8008598:	60b9      	str	r1, [r7, #8]
 800859a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6a1b      	ldr	r3, [r3, #32]
 80085a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	6a1b      	ldr	r3, [r3, #32]
 80085a6:	f023 0201 	bic.w	r2, r3, #1
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	699b      	ldr	r3, [r3, #24]
 80085b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	011b      	lsls	r3, r3, #4
 80085c0:	693a      	ldr	r2, [r7, #16]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	f023 030a 	bic.w	r3, r3, #10
 80085cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085ce:	697a      	ldr	r2, [r7, #20]
 80085d0:	68bb      	ldr	r3, [r7, #8]
 80085d2:	4313      	orrs	r3, r2
 80085d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	693a      	ldr	r2, [r7, #16]
 80085da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	697a      	ldr	r2, [r7, #20]
 80085e0:	621a      	str	r2, [r3, #32]
}
 80085e2:	bf00      	nop
 80085e4:	371c      	adds	r7, #28
 80085e6:	46bd      	mov	sp, r7
 80085e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ec:	4770      	bx	lr

080085ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085ee:	b480      	push	{r7}
 80085f0:	b087      	sub	sp, #28
 80085f2:	af00      	add	r7, sp, #0
 80085f4:	60f8      	str	r0, [r7, #12]
 80085f6:	60b9      	str	r1, [r7, #8]
 80085f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	6a1b      	ldr	r3, [r3, #32]
 80085fe:	f023 0210 	bic.w	r2, r3, #16
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	699b      	ldr	r3, [r3, #24]
 800860a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6a1b      	ldr	r3, [r3, #32]
 8008610:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008618:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	031b      	lsls	r3, r3, #12
 800861e:	697a      	ldr	r2, [r7, #20]
 8008620:	4313      	orrs	r3, r2
 8008622:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008624:	693b      	ldr	r3, [r7, #16]
 8008626:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800862a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	011b      	lsls	r3, r3, #4
 8008630:	693a      	ldr	r2, [r7, #16]
 8008632:	4313      	orrs	r3, r2
 8008634:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	697a      	ldr	r2, [r7, #20]
 800863a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	693a      	ldr	r2, [r7, #16]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800864e:	b480      	push	{r7}
 8008650:	b085      	sub	sp, #20
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
 8008656:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	689b      	ldr	r3, [r3, #8]
 800865c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008664:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4313      	orrs	r3, r2
 800866c:	f043 0307 	orr.w	r3, r3, #7
 8008670:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	68fa      	ldr	r2, [r7, #12]
 8008676:	609a      	str	r2, [r3, #8]
}
 8008678:	bf00      	nop
 800867a:	3714      	adds	r7, #20
 800867c:	46bd      	mov	sp, r7
 800867e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008682:	4770      	bx	lr

08008684 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008684:	b480      	push	{r7}
 8008686:	b087      	sub	sp, #28
 8008688:	af00      	add	r7, sp, #0
 800868a:	60f8      	str	r0, [r7, #12]
 800868c:	60b9      	str	r1, [r7, #8]
 800868e:	607a      	str	r2, [r7, #4]
 8008690:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	689b      	ldr	r3, [r3, #8]
 8008696:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008698:	697b      	ldr	r3, [r7, #20]
 800869a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800869e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	021a      	lsls	r2, r3, #8
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	431a      	orrs	r2, r3
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	4313      	orrs	r3, r2
 80086ac:	697a      	ldr	r2, [r7, #20]
 80086ae:	4313      	orrs	r3, r2
 80086b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	697a      	ldr	r2, [r7, #20]
 80086b6:	609a      	str	r2, [r3, #8]
}
 80086b8:	bf00      	nop
 80086ba:	371c      	adds	r7, #28
 80086bc:	46bd      	mov	sp, r7
 80086be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c2:	4770      	bx	lr

080086c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80086c4:	b480      	push	{r7}
 80086c6:	b087      	sub	sp, #28
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	60f8      	str	r0, [r7, #12]
 80086cc:	60b9      	str	r1, [r7, #8]
 80086ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	f003 031f 	and.w	r3, r3, #31
 80086d6:	2201      	movs	r2, #1
 80086d8:	fa02 f303 	lsl.w	r3, r2, r3
 80086dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	6a1a      	ldr	r2, [r3, #32]
 80086e2:	697b      	ldr	r3, [r7, #20]
 80086e4:	43db      	mvns	r3, r3
 80086e6:	401a      	ands	r2, r3
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	6a1a      	ldr	r2, [r3, #32]
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f003 031f 	and.w	r3, r3, #31
 80086f6:	6879      	ldr	r1, [r7, #4]
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	431a      	orrs	r2, r3
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	621a      	str	r2, [r3, #32]
}
 8008702:	bf00      	nop
 8008704:	371c      	adds	r7, #28
 8008706:	46bd      	mov	sp, r7
 8008708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800870c:	4770      	bx	lr
	...

08008710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008710:	b480      	push	{r7}
 8008712:	b085      	sub	sp, #20
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008720:	2b01      	cmp	r3, #1
 8008722:	d101      	bne.n	8008728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008724:	2302      	movs	r3, #2
 8008726:	e050      	b.n	80087ca <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	2202      	movs	r2, #2
 8008734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689b      	ldr	r3, [r3, #8]
 8008746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800874e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008750:	683b      	ldr	r3, [r7, #0]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68fa      	ldr	r2, [r7, #12]
 8008756:	4313      	orrs	r3, r2
 8008758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	68fa      	ldr	r2, [r7, #12]
 8008760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	4a1c      	ldr	r2, [pc, #112]	; (80087d8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008768:	4293      	cmp	r3, r2
 800876a:	d018      	beq.n	800879e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008774:	d013      	beq.n	800879e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	4a18      	ldr	r2, [pc, #96]	; (80087dc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800877c:	4293      	cmp	r3, r2
 800877e:	d00e      	beq.n	800879e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d009      	beq.n	800879e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a15      	ldr	r2, [pc, #84]	; (80087e4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d004      	beq.n	800879e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a13      	ldr	r2, [pc, #76]	; (80087e8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d10c      	bne.n	80087b8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80087a4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80087a6:	683b      	ldr	r3, [r7, #0]
 80087a8:	685b      	ldr	r3, [r3, #4]
 80087aa:	68ba      	ldr	r2, [r7, #8]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68ba      	ldr	r2, [r7, #8]
 80087b6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	3714      	adds	r7, #20
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr
 80087d6:	bf00      	nop
 80087d8:	40010000 	.word	0x40010000
 80087dc:	40000400 	.word	0x40000400
 80087e0:	40000800 	.word	0x40000800
 80087e4:	40000c00 	.word	0x40000c00
 80087e8:	40014000 	.word	0x40014000

080087ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80087ec:	b480      	push	{r7}
 80087ee:	b083      	sub	sp, #12
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80087f4:	bf00      	nop
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008808:	bf00      	nop
 800880a:	370c      	adds	r7, #12
 800880c:	46bd      	mov	sp, r7
 800880e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008812:	4770      	bx	lr

08008814 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008814:	b580      	push	{r7, lr}
 8008816:	b082      	sub	sp, #8
 8008818:	af00      	add	r7, sp, #0
 800881a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	2b00      	cmp	r3, #0
 8008820:	d101      	bne.n	8008826 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e03f      	b.n	80088a6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800882c:	b2db      	uxtb	r3, r3
 800882e:	2b00      	cmp	r3, #0
 8008830:	d106      	bne.n	8008840 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f7f9 fe22 	bl	8002484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2224      	movs	r2, #36	; 0x24
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	68da      	ldr	r2, [r3, #12]
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008856:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f000 f929 	bl	8008ab0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	691a      	ldr	r2, [r3, #16]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800886c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	695a      	ldr	r2, [r3, #20]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800887c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	68da      	ldr	r2, [r3, #12]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800888c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	2200      	movs	r2, #0
 8008892:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2220      	movs	r2, #32
 80088a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80088a4:	2300      	movs	r3, #0
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3708      	adds	r7, #8
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}

080088ae <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80088ae:	b580      	push	{r7, lr}
 80088b0:	b08a      	sub	sp, #40	; 0x28
 80088b2:	af02      	add	r7, sp, #8
 80088b4:	60f8      	str	r0, [r7, #12]
 80088b6:	60b9      	str	r1, [r7, #8]
 80088b8:	603b      	str	r3, [r7, #0]
 80088ba:	4613      	mov	r3, r2
 80088bc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c8:	b2db      	uxtb	r3, r3
 80088ca:	2b20      	cmp	r3, #32
 80088cc:	d17c      	bne.n	80089c8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d002      	beq.n	80088da <HAL_UART_Transmit+0x2c>
 80088d4:	88fb      	ldrh	r3, [r7, #6]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d101      	bne.n	80088de <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	e075      	b.n	80089ca <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e4:	2b01      	cmp	r3, #1
 80088e6:	d101      	bne.n	80088ec <HAL_UART_Transmit+0x3e>
 80088e8:	2302      	movs	r3, #2
 80088ea:	e06e      	b.n	80089ca <HAL_UART_Transmit+0x11c>
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	2201      	movs	r2, #1
 80088f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2221      	movs	r2, #33	; 0x21
 80088fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008902:	f7fa f8fd 	bl	8002b00 <HAL_GetTick>
 8008906:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	88fa      	ldrh	r2, [r7, #6]
 800890c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	88fa      	ldrh	r2, [r7, #6]
 8008912:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	689b      	ldr	r3, [r3, #8]
 8008918:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800891c:	d108      	bne.n	8008930 <HAL_UART_Transmit+0x82>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	691b      	ldr	r3, [r3, #16]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d104      	bne.n	8008930 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008926:	2300      	movs	r3, #0
 8008928:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800892a:	68bb      	ldr	r3, [r7, #8]
 800892c:	61bb      	str	r3, [r7, #24]
 800892e:	e003      	b.n	8008938 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008934:	2300      	movs	r3, #0
 8008936:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	2200      	movs	r2, #0
 800893c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008940:	e02a      	b.n	8008998 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	9300      	str	r3, [sp, #0]
 8008946:	697b      	ldr	r3, [r7, #20]
 8008948:	2200      	movs	r2, #0
 800894a:	2180      	movs	r1, #128	; 0x80
 800894c:	68f8      	ldr	r0, [r7, #12]
 800894e:	f000 f840 	bl	80089d2 <UART_WaitOnFlagUntilTimeout>
 8008952:	4603      	mov	r3, r0
 8008954:	2b00      	cmp	r3, #0
 8008956:	d001      	beq.n	800895c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008958:	2303      	movs	r3, #3
 800895a:	e036      	b.n	80089ca <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d10b      	bne.n	800897a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008962:	69bb      	ldr	r3, [r7, #24]
 8008964:	881b      	ldrh	r3, [r3, #0]
 8008966:	461a      	mov	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008970:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008972:	69bb      	ldr	r3, [r7, #24]
 8008974:	3302      	adds	r3, #2
 8008976:	61bb      	str	r3, [r7, #24]
 8008978:	e007      	b.n	800898a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800897a:	69fb      	ldr	r3, [r7, #28]
 800897c:	781a      	ldrb	r2, [r3, #0]
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	3301      	adds	r3, #1
 8008988:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800898e:	b29b      	uxth	r3, r3
 8008990:	3b01      	subs	r3, #1
 8008992:	b29a      	uxth	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800899c:	b29b      	uxth	r3, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1cf      	bne.n	8008942 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80089a2:	683b      	ldr	r3, [r7, #0]
 80089a4:	9300      	str	r3, [sp, #0]
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	2200      	movs	r2, #0
 80089aa:	2140      	movs	r1, #64	; 0x40
 80089ac:	68f8      	ldr	r0, [r7, #12]
 80089ae:	f000 f810 	bl	80089d2 <UART_WaitOnFlagUntilTimeout>
 80089b2:	4603      	mov	r3, r0
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d001      	beq.n	80089bc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80089b8:	2303      	movs	r3, #3
 80089ba:	e006      	b.n	80089ca <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	2220      	movs	r2, #32
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80089c4:	2300      	movs	r3, #0
 80089c6:	e000      	b.n	80089ca <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80089c8:	2302      	movs	r3, #2
  }
}
 80089ca:	4618      	mov	r0, r3
 80089cc:	3720      	adds	r7, #32
 80089ce:	46bd      	mov	sp, r7
 80089d0:	bd80      	pop	{r7, pc}

080089d2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80089d2:	b580      	push	{r7, lr}
 80089d4:	b090      	sub	sp, #64	; 0x40
 80089d6:	af00      	add	r7, sp, #0
 80089d8:	60f8      	str	r0, [r7, #12]
 80089da:	60b9      	str	r1, [r7, #8]
 80089dc:	603b      	str	r3, [r7, #0]
 80089de:	4613      	mov	r3, r2
 80089e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089e2:	e050      	b.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089ea:	d04c      	beq.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80089ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d007      	beq.n	8008a02 <UART_WaitOnFlagUntilTimeout+0x30>
 80089f2:	f7fa f885 	bl	8002b00 <HAL_GetTick>
 80089f6:	4602      	mov	r2, r0
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	1ad3      	subs	r3, r2, r3
 80089fc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d241      	bcs.n	8008a86 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	330c      	adds	r3, #12
 8008a08:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a0c:	e853 3f00 	ldrex	r3, [r3]
 8008a10:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a14:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a18:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a1a:	68fb      	ldr	r3, [r7, #12]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	330c      	adds	r3, #12
 8008a20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008a22:	637a      	str	r2, [r7, #52]	; 0x34
 8008a24:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a26:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a2a:	e841 2300 	strex	r3, r2, [r1]
 8008a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d1e5      	bne.n	8008a02 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	3314      	adds	r3, #20
 8008a3c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	e853 3f00 	ldrex	r3, [r3]
 8008a44:	613b      	str	r3, [r7, #16]
   return(result);
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	f023 0301 	bic.w	r3, r3, #1
 8008a4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	3314      	adds	r3, #20
 8008a54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008a56:	623a      	str	r2, [r7, #32]
 8008a58:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a5a:	69f9      	ldr	r1, [r7, #28]
 8008a5c:	6a3a      	ldr	r2, [r7, #32]
 8008a5e:	e841 2300 	strex	r3, r2, [r1]
 8008a62:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a64:	69bb      	ldr	r3, [r7, #24]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d1e5      	bne.n	8008a36 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2220      	movs	r2, #32
 8008a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2220      	movs	r2, #32
 8008a76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e00f      	b.n	8008aa6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	681a      	ldr	r2, [r3, #0]
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	4013      	ands	r3, r2
 8008a90:	68ba      	ldr	r2, [r7, #8]
 8008a92:	429a      	cmp	r2, r3
 8008a94:	bf0c      	ite	eq
 8008a96:	2301      	moveq	r3, #1
 8008a98:	2300      	movne	r3, #0
 8008a9a:	b2db      	uxtb	r3, r3
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	79fb      	ldrb	r3, [r7, #7]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d09f      	beq.n	80089e4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008aa4:	2300      	movs	r3, #0
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3740      	adds	r7, #64	; 0x40
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
	...

08008ab0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008ab0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008ab4:	b0c0      	sub	sp, #256	; 0x100
 8008ab6:	af00      	add	r7, sp, #0
 8008ab8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008acc:	68d9      	ldr	r1, [r3, #12]
 8008ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ad2:	681a      	ldr	r2, [r3, #0]
 8008ad4:	ea40 0301 	orr.w	r3, r0, r1
 8008ad8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008ada:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ade:	689a      	ldr	r2, [r3, #8]
 8008ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008aec:	695b      	ldr	r3, [r3, #20]
 8008aee:	431a      	orrs	r2, r3
 8008af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008af4:	69db      	ldr	r3, [r3, #28]
 8008af6:	4313      	orrs	r3, r2
 8008af8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008afc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	68db      	ldr	r3, [r3, #12]
 8008b04:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008b08:	f021 010c 	bic.w	r1, r1, #12
 8008b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b10:	681a      	ldr	r2, [r3, #0]
 8008b12:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b16:	430b      	orrs	r3, r1
 8008b18:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	695b      	ldr	r3, [r3, #20]
 8008b22:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008b26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b2a:	6999      	ldr	r1, [r3, #24]
 8008b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	ea40 0301 	orr.w	r3, r0, r1
 8008b36:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	4b8f      	ldr	r3, [pc, #572]	; (8008d7c <UART_SetConfig+0x2cc>)
 8008b40:	429a      	cmp	r2, r3
 8008b42:	d005      	beq.n	8008b50 <UART_SetConfig+0xa0>
 8008b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b48:	681a      	ldr	r2, [r3, #0]
 8008b4a:	4b8d      	ldr	r3, [pc, #564]	; (8008d80 <UART_SetConfig+0x2d0>)
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d104      	bne.n	8008b5a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008b50:	f7fe f83c 	bl	8006bcc <HAL_RCC_GetPCLK2Freq>
 8008b54:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008b58:	e003      	b.n	8008b62 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008b5a:	f7fe f823 	bl	8006ba4 <HAL_RCC_GetPCLK1Freq>
 8008b5e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008b66:	69db      	ldr	r3, [r3, #28]
 8008b68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008b6c:	f040 810c 	bne.w	8008d88 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008b70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b74:	2200      	movs	r2, #0
 8008b76:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008b7a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008b7e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008b82:	4622      	mov	r2, r4
 8008b84:	462b      	mov	r3, r5
 8008b86:	1891      	adds	r1, r2, r2
 8008b88:	65b9      	str	r1, [r7, #88]	; 0x58
 8008b8a:	415b      	adcs	r3, r3
 8008b8c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008b92:	4621      	mov	r1, r4
 8008b94:	eb12 0801 	adds.w	r8, r2, r1
 8008b98:	4629      	mov	r1, r5
 8008b9a:	eb43 0901 	adc.w	r9, r3, r1
 8008b9e:	f04f 0200 	mov.w	r2, #0
 8008ba2:	f04f 0300 	mov.w	r3, #0
 8008ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008bb2:	4690      	mov	r8, r2
 8008bb4:	4699      	mov	r9, r3
 8008bb6:	4623      	mov	r3, r4
 8008bb8:	eb18 0303 	adds.w	r3, r8, r3
 8008bbc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008bc0:	462b      	mov	r3, r5
 8008bc2:	eb49 0303 	adc.w	r3, r9, r3
 8008bc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008bce:	685b      	ldr	r3, [r3, #4]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008bd6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008bda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8008bde:	460b      	mov	r3, r1
 8008be0:	18db      	adds	r3, r3, r3
 8008be2:	653b      	str	r3, [r7, #80]	; 0x50
 8008be4:	4613      	mov	r3, r2
 8008be6:	eb42 0303 	adc.w	r3, r2, r3
 8008bea:	657b      	str	r3, [r7, #84]	; 0x54
 8008bec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8008bf0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008bf4:	f7f8 f800 	bl	8000bf8 <__aeabi_uldivmod>
 8008bf8:	4602      	mov	r2, r0
 8008bfa:	460b      	mov	r3, r1
 8008bfc:	4b61      	ldr	r3, [pc, #388]	; (8008d84 <UART_SetConfig+0x2d4>)
 8008bfe:	fba3 2302 	umull	r2, r3, r3, r2
 8008c02:	095b      	lsrs	r3, r3, #5
 8008c04:	011c      	lsls	r4, r3, #4
 8008c06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008c10:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008c14:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008c18:	4642      	mov	r2, r8
 8008c1a:	464b      	mov	r3, r9
 8008c1c:	1891      	adds	r1, r2, r2
 8008c1e:	64b9      	str	r1, [r7, #72]	; 0x48
 8008c20:	415b      	adcs	r3, r3
 8008c22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c24:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008c28:	4641      	mov	r1, r8
 8008c2a:	eb12 0a01 	adds.w	sl, r2, r1
 8008c2e:	4649      	mov	r1, r9
 8008c30:	eb43 0b01 	adc.w	fp, r3, r1
 8008c34:	f04f 0200 	mov.w	r2, #0
 8008c38:	f04f 0300 	mov.w	r3, #0
 8008c3c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008c40:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008c44:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008c48:	4692      	mov	sl, r2
 8008c4a:	469b      	mov	fp, r3
 8008c4c:	4643      	mov	r3, r8
 8008c4e:	eb1a 0303 	adds.w	r3, sl, r3
 8008c52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c56:	464b      	mov	r3, r9
 8008c58:	eb4b 0303 	adc.w	r3, fp, r3
 8008c5c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	2200      	movs	r2, #0
 8008c68:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008c6c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008c70:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008c74:	460b      	mov	r3, r1
 8008c76:	18db      	adds	r3, r3, r3
 8008c78:	643b      	str	r3, [r7, #64]	; 0x40
 8008c7a:	4613      	mov	r3, r2
 8008c7c:	eb42 0303 	adc.w	r3, r2, r3
 8008c80:	647b      	str	r3, [r7, #68]	; 0x44
 8008c82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008c86:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8008c8a:	f7f7 ffb5 	bl	8000bf8 <__aeabi_uldivmod>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4611      	mov	r1, r2
 8008c94:	4b3b      	ldr	r3, [pc, #236]	; (8008d84 <UART_SetConfig+0x2d4>)
 8008c96:	fba3 2301 	umull	r2, r3, r3, r1
 8008c9a:	095b      	lsrs	r3, r3, #5
 8008c9c:	2264      	movs	r2, #100	; 0x64
 8008c9e:	fb02 f303 	mul.w	r3, r2, r3
 8008ca2:	1acb      	subs	r3, r1, r3
 8008ca4:	00db      	lsls	r3, r3, #3
 8008ca6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8008caa:	4b36      	ldr	r3, [pc, #216]	; (8008d84 <UART_SetConfig+0x2d4>)
 8008cac:	fba3 2302 	umull	r2, r3, r3, r2
 8008cb0:	095b      	lsrs	r3, r3, #5
 8008cb2:	005b      	lsls	r3, r3, #1
 8008cb4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008cb8:	441c      	add	r4, r3
 8008cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008cc4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008cc8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008ccc:	4642      	mov	r2, r8
 8008cce:	464b      	mov	r3, r9
 8008cd0:	1891      	adds	r1, r2, r2
 8008cd2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008cd4:	415b      	adcs	r3, r3
 8008cd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008cd8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008cdc:	4641      	mov	r1, r8
 8008cde:	1851      	adds	r1, r2, r1
 8008ce0:	6339      	str	r1, [r7, #48]	; 0x30
 8008ce2:	4649      	mov	r1, r9
 8008ce4:	414b      	adcs	r3, r1
 8008ce6:	637b      	str	r3, [r7, #52]	; 0x34
 8008ce8:	f04f 0200 	mov.w	r2, #0
 8008cec:	f04f 0300 	mov.w	r3, #0
 8008cf0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008cf4:	4659      	mov	r1, fp
 8008cf6:	00cb      	lsls	r3, r1, #3
 8008cf8:	4651      	mov	r1, sl
 8008cfa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008cfe:	4651      	mov	r1, sl
 8008d00:	00ca      	lsls	r2, r1, #3
 8008d02:	4610      	mov	r0, r2
 8008d04:	4619      	mov	r1, r3
 8008d06:	4603      	mov	r3, r0
 8008d08:	4642      	mov	r2, r8
 8008d0a:	189b      	adds	r3, r3, r2
 8008d0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008d10:	464b      	mov	r3, r9
 8008d12:	460a      	mov	r2, r1
 8008d14:	eb42 0303 	adc.w	r3, r2, r3
 8008d18:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d20:	685b      	ldr	r3, [r3, #4]
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008d28:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008d2c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008d30:	460b      	mov	r3, r1
 8008d32:	18db      	adds	r3, r3, r3
 8008d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d36:	4613      	mov	r3, r2
 8008d38:	eb42 0303 	adc.w	r3, r2, r3
 8008d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d42:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008d46:	f7f7 ff57 	bl	8000bf8 <__aeabi_uldivmod>
 8008d4a:	4602      	mov	r2, r0
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	4b0d      	ldr	r3, [pc, #52]	; (8008d84 <UART_SetConfig+0x2d4>)
 8008d50:	fba3 1302 	umull	r1, r3, r3, r2
 8008d54:	095b      	lsrs	r3, r3, #5
 8008d56:	2164      	movs	r1, #100	; 0x64
 8008d58:	fb01 f303 	mul.w	r3, r1, r3
 8008d5c:	1ad3      	subs	r3, r2, r3
 8008d5e:	00db      	lsls	r3, r3, #3
 8008d60:	3332      	adds	r3, #50	; 0x32
 8008d62:	4a08      	ldr	r2, [pc, #32]	; (8008d84 <UART_SetConfig+0x2d4>)
 8008d64:	fba2 2303 	umull	r2, r3, r2, r3
 8008d68:	095b      	lsrs	r3, r3, #5
 8008d6a:	f003 0207 	and.w	r2, r3, #7
 8008d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4422      	add	r2, r4
 8008d76:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008d78:	e105      	b.n	8008f86 <UART_SetConfig+0x4d6>
 8008d7a:	bf00      	nop
 8008d7c:	40011000 	.word	0x40011000
 8008d80:	40011400 	.word	0x40011400
 8008d84:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008d88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008d92:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8008d96:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8008d9a:	4642      	mov	r2, r8
 8008d9c:	464b      	mov	r3, r9
 8008d9e:	1891      	adds	r1, r2, r2
 8008da0:	6239      	str	r1, [r7, #32]
 8008da2:	415b      	adcs	r3, r3
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
 8008da6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008daa:	4641      	mov	r1, r8
 8008dac:	1854      	adds	r4, r2, r1
 8008dae:	4649      	mov	r1, r9
 8008db0:	eb43 0501 	adc.w	r5, r3, r1
 8008db4:	f04f 0200 	mov.w	r2, #0
 8008db8:	f04f 0300 	mov.w	r3, #0
 8008dbc:	00eb      	lsls	r3, r5, #3
 8008dbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008dc2:	00e2      	lsls	r2, r4, #3
 8008dc4:	4614      	mov	r4, r2
 8008dc6:	461d      	mov	r5, r3
 8008dc8:	4643      	mov	r3, r8
 8008dca:	18e3      	adds	r3, r4, r3
 8008dcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8008dd0:	464b      	mov	r3, r9
 8008dd2:	eb45 0303 	adc.w	r3, r5, r3
 8008dd6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008dda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008dde:	685b      	ldr	r3, [r3, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008de6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008dea:	f04f 0200 	mov.w	r2, #0
 8008dee:	f04f 0300 	mov.w	r3, #0
 8008df2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008df6:	4629      	mov	r1, r5
 8008df8:	008b      	lsls	r3, r1, #2
 8008dfa:	4621      	mov	r1, r4
 8008dfc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e00:	4621      	mov	r1, r4
 8008e02:	008a      	lsls	r2, r1, #2
 8008e04:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008e08:	f7f7 fef6 	bl	8000bf8 <__aeabi_uldivmod>
 8008e0c:	4602      	mov	r2, r0
 8008e0e:	460b      	mov	r3, r1
 8008e10:	4b60      	ldr	r3, [pc, #384]	; (8008f94 <UART_SetConfig+0x4e4>)
 8008e12:	fba3 2302 	umull	r2, r3, r3, r2
 8008e16:	095b      	lsrs	r3, r3, #5
 8008e18:	011c      	lsls	r4, r3, #4
 8008e1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008e1e:	2200      	movs	r2, #0
 8008e20:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008e24:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008e28:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008e2c:	4642      	mov	r2, r8
 8008e2e:	464b      	mov	r3, r9
 8008e30:	1891      	adds	r1, r2, r2
 8008e32:	61b9      	str	r1, [r7, #24]
 8008e34:	415b      	adcs	r3, r3
 8008e36:	61fb      	str	r3, [r7, #28]
 8008e38:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008e3c:	4641      	mov	r1, r8
 8008e3e:	1851      	adds	r1, r2, r1
 8008e40:	6139      	str	r1, [r7, #16]
 8008e42:	4649      	mov	r1, r9
 8008e44:	414b      	adcs	r3, r1
 8008e46:	617b      	str	r3, [r7, #20]
 8008e48:	f04f 0200 	mov.w	r2, #0
 8008e4c:	f04f 0300 	mov.w	r3, #0
 8008e50:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e54:	4659      	mov	r1, fp
 8008e56:	00cb      	lsls	r3, r1, #3
 8008e58:	4651      	mov	r1, sl
 8008e5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e5e:	4651      	mov	r1, sl
 8008e60:	00ca      	lsls	r2, r1, #3
 8008e62:	4610      	mov	r0, r2
 8008e64:	4619      	mov	r1, r3
 8008e66:	4603      	mov	r3, r0
 8008e68:	4642      	mov	r2, r8
 8008e6a:	189b      	adds	r3, r3, r2
 8008e6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008e70:	464b      	mov	r3, r9
 8008e72:	460a      	mov	r2, r1
 8008e74:	eb42 0303 	adc.w	r3, r2, r3
 8008e78:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	2200      	movs	r2, #0
 8008e84:	67bb      	str	r3, [r7, #120]	; 0x78
 8008e86:	67fa      	str	r2, [r7, #124]	; 0x7c
 8008e88:	f04f 0200 	mov.w	r2, #0
 8008e8c:	f04f 0300 	mov.w	r3, #0
 8008e90:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008e94:	4649      	mov	r1, r9
 8008e96:	008b      	lsls	r3, r1, #2
 8008e98:	4641      	mov	r1, r8
 8008e9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e9e:	4641      	mov	r1, r8
 8008ea0:	008a      	lsls	r2, r1, #2
 8008ea2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8008ea6:	f7f7 fea7 	bl	8000bf8 <__aeabi_uldivmod>
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	4b39      	ldr	r3, [pc, #228]	; (8008f94 <UART_SetConfig+0x4e4>)
 8008eb0:	fba3 1302 	umull	r1, r3, r3, r2
 8008eb4:	095b      	lsrs	r3, r3, #5
 8008eb6:	2164      	movs	r1, #100	; 0x64
 8008eb8:	fb01 f303 	mul.w	r3, r1, r3
 8008ebc:	1ad3      	subs	r3, r2, r3
 8008ebe:	011b      	lsls	r3, r3, #4
 8008ec0:	3332      	adds	r3, #50	; 0x32
 8008ec2:	4a34      	ldr	r2, [pc, #208]	; (8008f94 <UART_SetConfig+0x4e4>)
 8008ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ec8:	095b      	lsrs	r3, r3, #5
 8008eca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008ece:	441c      	add	r4, r3
 8008ed0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ed4:	2200      	movs	r2, #0
 8008ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8008ed8:	677a      	str	r2, [r7, #116]	; 0x74
 8008eda:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008ede:	4642      	mov	r2, r8
 8008ee0:	464b      	mov	r3, r9
 8008ee2:	1891      	adds	r1, r2, r2
 8008ee4:	60b9      	str	r1, [r7, #8]
 8008ee6:	415b      	adcs	r3, r3
 8008ee8:	60fb      	str	r3, [r7, #12]
 8008eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008eee:	4641      	mov	r1, r8
 8008ef0:	1851      	adds	r1, r2, r1
 8008ef2:	6039      	str	r1, [r7, #0]
 8008ef4:	4649      	mov	r1, r9
 8008ef6:	414b      	adcs	r3, r1
 8008ef8:	607b      	str	r3, [r7, #4]
 8008efa:	f04f 0200 	mov.w	r2, #0
 8008efe:	f04f 0300 	mov.w	r3, #0
 8008f02:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008f06:	4659      	mov	r1, fp
 8008f08:	00cb      	lsls	r3, r1, #3
 8008f0a:	4651      	mov	r1, sl
 8008f0c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008f10:	4651      	mov	r1, sl
 8008f12:	00ca      	lsls	r2, r1, #3
 8008f14:	4610      	mov	r0, r2
 8008f16:	4619      	mov	r1, r3
 8008f18:	4603      	mov	r3, r0
 8008f1a:	4642      	mov	r2, r8
 8008f1c:	189b      	adds	r3, r3, r2
 8008f1e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008f20:	464b      	mov	r3, r9
 8008f22:	460a      	mov	r2, r1
 8008f24:	eb42 0303 	adc.w	r3, r2, r3
 8008f28:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	2200      	movs	r2, #0
 8008f32:	663b      	str	r3, [r7, #96]	; 0x60
 8008f34:	667a      	str	r2, [r7, #100]	; 0x64
 8008f36:	f04f 0200 	mov.w	r2, #0
 8008f3a:	f04f 0300 	mov.w	r3, #0
 8008f3e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008f42:	4649      	mov	r1, r9
 8008f44:	008b      	lsls	r3, r1, #2
 8008f46:	4641      	mov	r1, r8
 8008f48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008f4c:	4641      	mov	r1, r8
 8008f4e:	008a      	lsls	r2, r1, #2
 8008f50:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008f54:	f7f7 fe50 	bl	8000bf8 <__aeabi_uldivmod>
 8008f58:	4602      	mov	r2, r0
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4b0d      	ldr	r3, [pc, #52]	; (8008f94 <UART_SetConfig+0x4e4>)
 8008f5e:	fba3 1302 	umull	r1, r3, r3, r2
 8008f62:	095b      	lsrs	r3, r3, #5
 8008f64:	2164      	movs	r1, #100	; 0x64
 8008f66:	fb01 f303 	mul.w	r3, r1, r3
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	011b      	lsls	r3, r3, #4
 8008f6e:	3332      	adds	r3, #50	; 0x32
 8008f70:	4a08      	ldr	r2, [pc, #32]	; (8008f94 <UART_SetConfig+0x4e4>)
 8008f72:	fba2 2303 	umull	r2, r3, r2, r3
 8008f76:	095b      	lsrs	r3, r3, #5
 8008f78:	f003 020f 	and.w	r2, r3, #15
 8008f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	4422      	add	r2, r4
 8008f84:	609a      	str	r2, [r3, #8]
}
 8008f86:	bf00      	nop
 8008f88:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008f8c:	46bd      	mov	sp, r7
 8008f8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008f92:	bf00      	nop
 8008f94:	51eb851f 	.word	0x51eb851f

08008f98 <__errno>:
 8008f98:	4b01      	ldr	r3, [pc, #4]	; (8008fa0 <__errno+0x8>)
 8008f9a:	6818      	ldr	r0, [r3, #0]
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000014 	.word	0x20000014

08008fa4 <__libc_init_array>:
 8008fa4:	b570      	push	{r4, r5, r6, lr}
 8008fa6:	4d0d      	ldr	r5, [pc, #52]	; (8008fdc <__libc_init_array+0x38>)
 8008fa8:	4c0d      	ldr	r4, [pc, #52]	; (8008fe0 <__libc_init_array+0x3c>)
 8008faa:	1b64      	subs	r4, r4, r5
 8008fac:	10a4      	asrs	r4, r4, #2
 8008fae:	2600      	movs	r6, #0
 8008fb0:	42a6      	cmp	r6, r4
 8008fb2:	d109      	bne.n	8008fc8 <__libc_init_array+0x24>
 8008fb4:	4d0b      	ldr	r5, [pc, #44]	; (8008fe4 <__libc_init_array+0x40>)
 8008fb6:	4c0c      	ldr	r4, [pc, #48]	; (8008fe8 <__libc_init_array+0x44>)
 8008fb8:	f002 fdce 	bl	800bb58 <_init>
 8008fbc:	1b64      	subs	r4, r4, r5
 8008fbe:	10a4      	asrs	r4, r4, #2
 8008fc0:	2600      	movs	r6, #0
 8008fc2:	42a6      	cmp	r6, r4
 8008fc4:	d105      	bne.n	8008fd2 <__libc_init_array+0x2e>
 8008fc6:	bd70      	pop	{r4, r5, r6, pc}
 8008fc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fcc:	4798      	blx	r3
 8008fce:	3601      	adds	r6, #1
 8008fd0:	e7ee      	b.n	8008fb0 <__libc_init_array+0xc>
 8008fd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008fd6:	4798      	blx	r3
 8008fd8:	3601      	adds	r6, #1
 8008fda:	e7f2      	b.n	8008fc2 <__libc_init_array+0x1e>
 8008fdc:	0800c0cc 	.word	0x0800c0cc
 8008fe0:	0800c0cc 	.word	0x0800c0cc
 8008fe4:	0800c0cc 	.word	0x0800c0cc
 8008fe8:	0800c0d0 	.word	0x0800c0d0

08008fec <memset>:
 8008fec:	4402      	add	r2, r0
 8008fee:	4603      	mov	r3, r0
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d100      	bne.n	8008ff6 <memset+0xa>
 8008ff4:	4770      	bx	lr
 8008ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8008ffa:	e7f9      	b.n	8008ff0 <memset+0x4>

08008ffc <__cvt>:
 8008ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009000:	ec55 4b10 	vmov	r4, r5, d0
 8009004:	2d00      	cmp	r5, #0
 8009006:	460e      	mov	r6, r1
 8009008:	4619      	mov	r1, r3
 800900a:	462b      	mov	r3, r5
 800900c:	bfbb      	ittet	lt
 800900e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009012:	461d      	movlt	r5, r3
 8009014:	2300      	movge	r3, #0
 8009016:	232d      	movlt	r3, #45	; 0x2d
 8009018:	700b      	strb	r3, [r1, #0]
 800901a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800901c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009020:	4691      	mov	r9, r2
 8009022:	f023 0820 	bic.w	r8, r3, #32
 8009026:	bfbc      	itt	lt
 8009028:	4622      	movlt	r2, r4
 800902a:	4614      	movlt	r4, r2
 800902c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009030:	d005      	beq.n	800903e <__cvt+0x42>
 8009032:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009036:	d100      	bne.n	800903a <__cvt+0x3e>
 8009038:	3601      	adds	r6, #1
 800903a:	2102      	movs	r1, #2
 800903c:	e000      	b.n	8009040 <__cvt+0x44>
 800903e:	2103      	movs	r1, #3
 8009040:	ab03      	add	r3, sp, #12
 8009042:	9301      	str	r3, [sp, #4]
 8009044:	ab02      	add	r3, sp, #8
 8009046:	9300      	str	r3, [sp, #0]
 8009048:	ec45 4b10 	vmov	d0, r4, r5
 800904c:	4653      	mov	r3, sl
 800904e:	4632      	mov	r2, r6
 8009050:	f000 fce2 	bl	8009a18 <_dtoa_r>
 8009054:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009058:	4607      	mov	r7, r0
 800905a:	d102      	bne.n	8009062 <__cvt+0x66>
 800905c:	f019 0f01 	tst.w	r9, #1
 8009060:	d022      	beq.n	80090a8 <__cvt+0xac>
 8009062:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009066:	eb07 0906 	add.w	r9, r7, r6
 800906a:	d110      	bne.n	800908e <__cvt+0x92>
 800906c:	783b      	ldrb	r3, [r7, #0]
 800906e:	2b30      	cmp	r3, #48	; 0x30
 8009070:	d10a      	bne.n	8009088 <__cvt+0x8c>
 8009072:	2200      	movs	r2, #0
 8009074:	2300      	movs	r3, #0
 8009076:	4620      	mov	r0, r4
 8009078:	4629      	mov	r1, r5
 800907a:	f7f7 fd2d 	bl	8000ad8 <__aeabi_dcmpeq>
 800907e:	b918      	cbnz	r0, 8009088 <__cvt+0x8c>
 8009080:	f1c6 0601 	rsb	r6, r6, #1
 8009084:	f8ca 6000 	str.w	r6, [sl]
 8009088:	f8da 3000 	ldr.w	r3, [sl]
 800908c:	4499      	add	r9, r3
 800908e:	2200      	movs	r2, #0
 8009090:	2300      	movs	r3, #0
 8009092:	4620      	mov	r0, r4
 8009094:	4629      	mov	r1, r5
 8009096:	f7f7 fd1f 	bl	8000ad8 <__aeabi_dcmpeq>
 800909a:	b108      	cbz	r0, 80090a0 <__cvt+0xa4>
 800909c:	f8cd 900c 	str.w	r9, [sp, #12]
 80090a0:	2230      	movs	r2, #48	; 0x30
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	454b      	cmp	r3, r9
 80090a6:	d307      	bcc.n	80090b8 <__cvt+0xbc>
 80090a8:	9b03      	ldr	r3, [sp, #12]
 80090aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090ac:	1bdb      	subs	r3, r3, r7
 80090ae:	4638      	mov	r0, r7
 80090b0:	6013      	str	r3, [r2, #0]
 80090b2:	b004      	add	sp, #16
 80090b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090b8:	1c59      	adds	r1, r3, #1
 80090ba:	9103      	str	r1, [sp, #12]
 80090bc:	701a      	strb	r2, [r3, #0]
 80090be:	e7f0      	b.n	80090a2 <__cvt+0xa6>

080090c0 <__exponent>:
 80090c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090c2:	4603      	mov	r3, r0
 80090c4:	2900      	cmp	r1, #0
 80090c6:	bfb8      	it	lt
 80090c8:	4249      	neglt	r1, r1
 80090ca:	f803 2b02 	strb.w	r2, [r3], #2
 80090ce:	bfb4      	ite	lt
 80090d0:	222d      	movlt	r2, #45	; 0x2d
 80090d2:	222b      	movge	r2, #43	; 0x2b
 80090d4:	2909      	cmp	r1, #9
 80090d6:	7042      	strb	r2, [r0, #1]
 80090d8:	dd2a      	ble.n	8009130 <__exponent+0x70>
 80090da:	f10d 0407 	add.w	r4, sp, #7
 80090de:	46a4      	mov	ip, r4
 80090e0:	270a      	movs	r7, #10
 80090e2:	46a6      	mov	lr, r4
 80090e4:	460a      	mov	r2, r1
 80090e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80090ea:	fb07 1516 	mls	r5, r7, r6, r1
 80090ee:	3530      	adds	r5, #48	; 0x30
 80090f0:	2a63      	cmp	r2, #99	; 0x63
 80090f2:	f104 34ff 	add.w	r4, r4, #4294967295
 80090f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80090fa:	4631      	mov	r1, r6
 80090fc:	dcf1      	bgt.n	80090e2 <__exponent+0x22>
 80090fe:	3130      	adds	r1, #48	; 0x30
 8009100:	f1ae 0502 	sub.w	r5, lr, #2
 8009104:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009108:	1c44      	adds	r4, r0, #1
 800910a:	4629      	mov	r1, r5
 800910c:	4561      	cmp	r1, ip
 800910e:	d30a      	bcc.n	8009126 <__exponent+0x66>
 8009110:	f10d 0209 	add.w	r2, sp, #9
 8009114:	eba2 020e 	sub.w	r2, r2, lr
 8009118:	4565      	cmp	r5, ip
 800911a:	bf88      	it	hi
 800911c:	2200      	movhi	r2, #0
 800911e:	4413      	add	r3, r2
 8009120:	1a18      	subs	r0, r3, r0
 8009122:	b003      	add	sp, #12
 8009124:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009126:	f811 2b01 	ldrb.w	r2, [r1], #1
 800912a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800912e:	e7ed      	b.n	800910c <__exponent+0x4c>
 8009130:	2330      	movs	r3, #48	; 0x30
 8009132:	3130      	adds	r1, #48	; 0x30
 8009134:	7083      	strb	r3, [r0, #2]
 8009136:	70c1      	strb	r1, [r0, #3]
 8009138:	1d03      	adds	r3, r0, #4
 800913a:	e7f1      	b.n	8009120 <__exponent+0x60>

0800913c <_printf_float>:
 800913c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009140:	ed2d 8b02 	vpush	{d8}
 8009144:	b08d      	sub	sp, #52	; 0x34
 8009146:	460c      	mov	r4, r1
 8009148:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800914c:	4616      	mov	r6, r2
 800914e:	461f      	mov	r7, r3
 8009150:	4605      	mov	r5, r0
 8009152:	f001 fb45 	bl	800a7e0 <_localeconv_r>
 8009156:	f8d0 a000 	ldr.w	sl, [r0]
 800915a:	4650      	mov	r0, sl
 800915c:	f7f7 f840 	bl	80001e0 <strlen>
 8009160:	2300      	movs	r3, #0
 8009162:	930a      	str	r3, [sp, #40]	; 0x28
 8009164:	6823      	ldr	r3, [r4, #0]
 8009166:	9305      	str	r3, [sp, #20]
 8009168:	f8d8 3000 	ldr.w	r3, [r8]
 800916c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009170:	3307      	adds	r3, #7
 8009172:	f023 0307 	bic.w	r3, r3, #7
 8009176:	f103 0208 	add.w	r2, r3, #8
 800917a:	f8c8 2000 	str.w	r2, [r8]
 800917e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009182:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009186:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800918a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800918e:	9307      	str	r3, [sp, #28]
 8009190:	f8cd 8018 	str.w	r8, [sp, #24]
 8009194:	ee08 0a10 	vmov	s16, r0
 8009198:	4b9f      	ldr	r3, [pc, #636]	; (8009418 <_printf_float+0x2dc>)
 800919a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800919e:	f04f 32ff 	mov.w	r2, #4294967295
 80091a2:	f7f7 fccb 	bl	8000b3c <__aeabi_dcmpun>
 80091a6:	bb88      	cbnz	r0, 800920c <_printf_float+0xd0>
 80091a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80091ac:	4b9a      	ldr	r3, [pc, #616]	; (8009418 <_printf_float+0x2dc>)
 80091ae:	f04f 32ff 	mov.w	r2, #4294967295
 80091b2:	f7f7 fca5 	bl	8000b00 <__aeabi_dcmple>
 80091b6:	bb48      	cbnz	r0, 800920c <_printf_float+0xd0>
 80091b8:	2200      	movs	r2, #0
 80091ba:	2300      	movs	r3, #0
 80091bc:	4640      	mov	r0, r8
 80091be:	4649      	mov	r1, r9
 80091c0:	f7f7 fc94 	bl	8000aec <__aeabi_dcmplt>
 80091c4:	b110      	cbz	r0, 80091cc <_printf_float+0x90>
 80091c6:	232d      	movs	r3, #45	; 0x2d
 80091c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091cc:	4b93      	ldr	r3, [pc, #588]	; (800941c <_printf_float+0x2e0>)
 80091ce:	4894      	ldr	r0, [pc, #592]	; (8009420 <_printf_float+0x2e4>)
 80091d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80091d4:	bf94      	ite	ls
 80091d6:	4698      	movls	r8, r3
 80091d8:	4680      	movhi	r8, r0
 80091da:	2303      	movs	r3, #3
 80091dc:	6123      	str	r3, [r4, #16]
 80091de:	9b05      	ldr	r3, [sp, #20]
 80091e0:	f023 0204 	bic.w	r2, r3, #4
 80091e4:	6022      	str	r2, [r4, #0]
 80091e6:	f04f 0900 	mov.w	r9, #0
 80091ea:	9700      	str	r7, [sp, #0]
 80091ec:	4633      	mov	r3, r6
 80091ee:	aa0b      	add	r2, sp, #44	; 0x2c
 80091f0:	4621      	mov	r1, r4
 80091f2:	4628      	mov	r0, r5
 80091f4:	f000 f9d8 	bl	80095a8 <_printf_common>
 80091f8:	3001      	adds	r0, #1
 80091fa:	f040 8090 	bne.w	800931e <_printf_float+0x1e2>
 80091fe:	f04f 30ff 	mov.w	r0, #4294967295
 8009202:	b00d      	add	sp, #52	; 0x34
 8009204:	ecbd 8b02 	vpop	{d8}
 8009208:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800920c:	4642      	mov	r2, r8
 800920e:	464b      	mov	r3, r9
 8009210:	4640      	mov	r0, r8
 8009212:	4649      	mov	r1, r9
 8009214:	f7f7 fc92 	bl	8000b3c <__aeabi_dcmpun>
 8009218:	b140      	cbz	r0, 800922c <_printf_float+0xf0>
 800921a:	464b      	mov	r3, r9
 800921c:	2b00      	cmp	r3, #0
 800921e:	bfbc      	itt	lt
 8009220:	232d      	movlt	r3, #45	; 0x2d
 8009222:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009226:	487f      	ldr	r0, [pc, #508]	; (8009424 <_printf_float+0x2e8>)
 8009228:	4b7f      	ldr	r3, [pc, #508]	; (8009428 <_printf_float+0x2ec>)
 800922a:	e7d1      	b.n	80091d0 <_printf_float+0x94>
 800922c:	6863      	ldr	r3, [r4, #4]
 800922e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009232:	9206      	str	r2, [sp, #24]
 8009234:	1c5a      	adds	r2, r3, #1
 8009236:	d13f      	bne.n	80092b8 <_printf_float+0x17c>
 8009238:	2306      	movs	r3, #6
 800923a:	6063      	str	r3, [r4, #4]
 800923c:	9b05      	ldr	r3, [sp, #20]
 800923e:	6861      	ldr	r1, [r4, #4]
 8009240:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009244:	2300      	movs	r3, #0
 8009246:	9303      	str	r3, [sp, #12]
 8009248:	ab0a      	add	r3, sp, #40	; 0x28
 800924a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800924e:	ab09      	add	r3, sp, #36	; 0x24
 8009250:	ec49 8b10 	vmov	d0, r8, r9
 8009254:	9300      	str	r3, [sp, #0]
 8009256:	6022      	str	r2, [r4, #0]
 8009258:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800925c:	4628      	mov	r0, r5
 800925e:	f7ff fecd 	bl	8008ffc <__cvt>
 8009262:	9b06      	ldr	r3, [sp, #24]
 8009264:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009266:	2b47      	cmp	r3, #71	; 0x47
 8009268:	4680      	mov	r8, r0
 800926a:	d108      	bne.n	800927e <_printf_float+0x142>
 800926c:	1cc8      	adds	r0, r1, #3
 800926e:	db02      	blt.n	8009276 <_printf_float+0x13a>
 8009270:	6863      	ldr	r3, [r4, #4]
 8009272:	4299      	cmp	r1, r3
 8009274:	dd41      	ble.n	80092fa <_printf_float+0x1be>
 8009276:	f1ab 0b02 	sub.w	fp, fp, #2
 800927a:	fa5f fb8b 	uxtb.w	fp, fp
 800927e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009282:	d820      	bhi.n	80092c6 <_printf_float+0x18a>
 8009284:	3901      	subs	r1, #1
 8009286:	465a      	mov	r2, fp
 8009288:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800928c:	9109      	str	r1, [sp, #36]	; 0x24
 800928e:	f7ff ff17 	bl	80090c0 <__exponent>
 8009292:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009294:	1813      	adds	r3, r2, r0
 8009296:	2a01      	cmp	r2, #1
 8009298:	4681      	mov	r9, r0
 800929a:	6123      	str	r3, [r4, #16]
 800929c:	dc02      	bgt.n	80092a4 <_printf_float+0x168>
 800929e:	6822      	ldr	r2, [r4, #0]
 80092a0:	07d2      	lsls	r2, r2, #31
 80092a2:	d501      	bpl.n	80092a8 <_printf_float+0x16c>
 80092a4:	3301      	adds	r3, #1
 80092a6:	6123      	str	r3, [r4, #16]
 80092a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d09c      	beq.n	80091ea <_printf_float+0xae>
 80092b0:	232d      	movs	r3, #45	; 0x2d
 80092b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092b6:	e798      	b.n	80091ea <_printf_float+0xae>
 80092b8:	9a06      	ldr	r2, [sp, #24]
 80092ba:	2a47      	cmp	r2, #71	; 0x47
 80092bc:	d1be      	bne.n	800923c <_printf_float+0x100>
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d1bc      	bne.n	800923c <_printf_float+0x100>
 80092c2:	2301      	movs	r3, #1
 80092c4:	e7b9      	b.n	800923a <_printf_float+0xfe>
 80092c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80092ca:	d118      	bne.n	80092fe <_printf_float+0x1c2>
 80092cc:	2900      	cmp	r1, #0
 80092ce:	6863      	ldr	r3, [r4, #4]
 80092d0:	dd0b      	ble.n	80092ea <_printf_float+0x1ae>
 80092d2:	6121      	str	r1, [r4, #16]
 80092d4:	b913      	cbnz	r3, 80092dc <_printf_float+0x1a0>
 80092d6:	6822      	ldr	r2, [r4, #0]
 80092d8:	07d0      	lsls	r0, r2, #31
 80092da:	d502      	bpl.n	80092e2 <_printf_float+0x1a6>
 80092dc:	3301      	adds	r3, #1
 80092de:	440b      	add	r3, r1
 80092e0:	6123      	str	r3, [r4, #16]
 80092e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80092e4:	f04f 0900 	mov.w	r9, #0
 80092e8:	e7de      	b.n	80092a8 <_printf_float+0x16c>
 80092ea:	b913      	cbnz	r3, 80092f2 <_printf_float+0x1b6>
 80092ec:	6822      	ldr	r2, [r4, #0]
 80092ee:	07d2      	lsls	r2, r2, #31
 80092f0:	d501      	bpl.n	80092f6 <_printf_float+0x1ba>
 80092f2:	3302      	adds	r3, #2
 80092f4:	e7f4      	b.n	80092e0 <_printf_float+0x1a4>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e7f2      	b.n	80092e0 <_printf_float+0x1a4>
 80092fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80092fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009300:	4299      	cmp	r1, r3
 8009302:	db05      	blt.n	8009310 <_printf_float+0x1d4>
 8009304:	6823      	ldr	r3, [r4, #0]
 8009306:	6121      	str	r1, [r4, #16]
 8009308:	07d8      	lsls	r0, r3, #31
 800930a:	d5ea      	bpl.n	80092e2 <_printf_float+0x1a6>
 800930c:	1c4b      	adds	r3, r1, #1
 800930e:	e7e7      	b.n	80092e0 <_printf_float+0x1a4>
 8009310:	2900      	cmp	r1, #0
 8009312:	bfd4      	ite	le
 8009314:	f1c1 0202 	rsble	r2, r1, #2
 8009318:	2201      	movgt	r2, #1
 800931a:	4413      	add	r3, r2
 800931c:	e7e0      	b.n	80092e0 <_printf_float+0x1a4>
 800931e:	6823      	ldr	r3, [r4, #0]
 8009320:	055a      	lsls	r2, r3, #21
 8009322:	d407      	bmi.n	8009334 <_printf_float+0x1f8>
 8009324:	6923      	ldr	r3, [r4, #16]
 8009326:	4642      	mov	r2, r8
 8009328:	4631      	mov	r1, r6
 800932a:	4628      	mov	r0, r5
 800932c:	47b8      	blx	r7
 800932e:	3001      	adds	r0, #1
 8009330:	d12c      	bne.n	800938c <_printf_float+0x250>
 8009332:	e764      	b.n	80091fe <_printf_float+0xc2>
 8009334:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009338:	f240 80e0 	bls.w	80094fc <_printf_float+0x3c0>
 800933c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009340:	2200      	movs	r2, #0
 8009342:	2300      	movs	r3, #0
 8009344:	f7f7 fbc8 	bl	8000ad8 <__aeabi_dcmpeq>
 8009348:	2800      	cmp	r0, #0
 800934a:	d034      	beq.n	80093b6 <_printf_float+0x27a>
 800934c:	4a37      	ldr	r2, [pc, #220]	; (800942c <_printf_float+0x2f0>)
 800934e:	2301      	movs	r3, #1
 8009350:	4631      	mov	r1, r6
 8009352:	4628      	mov	r0, r5
 8009354:	47b8      	blx	r7
 8009356:	3001      	adds	r0, #1
 8009358:	f43f af51 	beq.w	80091fe <_printf_float+0xc2>
 800935c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009360:	429a      	cmp	r2, r3
 8009362:	db02      	blt.n	800936a <_printf_float+0x22e>
 8009364:	6823      	ldr	r3, [r4, #0]
 8009366:	07d8      	lsls	r0, r3, #31
 8009368:	d510      	bpl.n	800938c <_printf_float+0x250>
 800936a:	ee18 3a10 	vmov	r3, s16
 800936e:	4652      	mov	r2, sl
 8009370:	4631      	mov	r1, r6
 8009372:	4628      	mov	r0, r5
 8009374:	47b8      	blx	r7
 8009376:	3001      	adds	r0, #1
 8009378:	f43f af41 	beq.w	80091fe <_printf_float+0xc2>
 800937c:	f04f 0800 	mov.w	r8, #0
 8009380:	f104 091a 	add.w	r9, r4, #26
 8009384:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009386:	3b01      	subs	r3, #1
 8009388:	4543      	cmp	r3, r8
 800938a:	dc09      	bgt.n	80093a0 <_printf_float+0x264>
 800938c:	6823      	ldr	r3, [r4, #0]
 800938e:	079b      	lsls	r3, r3, #30
 8009390:	f100 8105 	bmi.w	800959e <_printf_float+0x462>
 8009394:	68e0      	ldr	r0, [r4, #12]
 8009396:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009398:	4298      	cmp	r0, r3
 800939a:	bfb8      	it	lt
 800939c:	4618      	movlt	r0, r3
 800939e:	e730      	b.n	8009202 <_printf_float+0xc6>
 80093a0:	2301      	movs	r3, #1
 80093a2:	464a      	mov	r2, r9
 80093a4:	4631      	mov	r1, r6
 80093a6:	4628      	mov	r0, r5
 80093a8:	47b8      	blx	r7
 80093aa:	3001      	adds	r0, #1
 80093ac:	f43f af27 	beq.w	80091fe <_printf_float+0xc2>
 80093b0:	f108 0801 	add.w	r8, r8, #1
 80093b4:	e7e6      	b.n	8009384 <_printf_float+0x248>
 80093b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	dc39      	bgt.n	8009430 <_printf_float+0x2f4>
 80093bc:	4a1b      	ldr	r2, [pc, #108]	; (800942c <_printf_float+0x2f0>)
 80093be:	2301      	movs	r3, #1
 80093c0:	4631      	mov	r1, r6
 80093c2:	4628      	mov	r0, r5
 80093c4:	47b8      	blx	r7
 80093c6:	3001      	adds	r0, #1
 80093c8:	f43f af19 	beq.w	80091fe <_printf_float+0xc2>
 80093cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093d0:	4313      	orrs	r3, r2
 80093d2:	d102      	bne.n	80093da <_printf_float+0x29e>
 80093d4:	6823      	ldr	r3, [r4, #0]
 80093d6:	07d9      	lsls	r1, r3, #31
 80093d8:	d5d8      	bpl.n	800938c <_printf_float+0x250>
 80093da:	ee18 3a10 	vmov	r3, s16
 80093de:	4652      	mov	r2, sl
 80093e0:	4631      	mov	r1, r6
 80093e2:	4628      	mov	r0, r5
 80093e4:	47b8      	blx	r7
 80093e6:	3001      	adds	r0, #1
 80093e8:	f43f af09 	beq.w	80091fe <_printf_float+0xc2>
 80093ec:	f04f 0900 	mov.w	r9, #0
 80093f0:	f104 0a1a 	add.w	sl, r4, #26
 80093f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093f6:	425b      	negs	r3, r3
 80093f8:	454b      	cmp	r3, r9
 80093fa:	dc01      	bgt.n	8009400 <_printf_float+0x2c4>
 80093fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fe:	e792      	b.n	8009326 <_printf_float+0x1ea>
 8009400:	2301      	movs	r3, #1
 8009402:	4652      	mov	r2, sl
 8009404:	4631      	mov	r1, r6
 8009406:	4628      	mov	r0, r5
 8009408:	47b8      	blx	r7
 800940a:	3001      	adds	r0, #1
 800940c:	f43f aef7 	beq.w	80091fe <_printf_float+0xc2>
 8009410:	f109 0901 	add.w	r9, r9, #1
 8009414:	e7ee      	b.n	80093f4 <_printf_float+0x2b8>
 8009416:	bf00      	nop
 8009418:	7fefffff 	.word	0x7fefffff
 800941c:	0800bcf0 	.word	0x0800bcf0
 8009420:	0800bcf4 	.word	0x0800bcf4
 8009424:	0800bcfc 	.word	0x0800bcfc
 8009428:	0800bcf8 	.word	0x0800bcf8
 800942c:	0800bd00 	.word	0x0800bd00
 8009430:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009432:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009434:	429a      	cmp	r2, r3
 8009436:	bfa8      	it	ge
 8009438:	461a      	movge	r2, r3
 800943a:	2a00      	cmp	r2, #0
 800943c:	4691      	mov	r9, r2
 800943e:	dc37      	bgt.n	80094b0 <_printf_float+0x374>
 8009440:	f04f 0b00 	mov.w	fp, #0
 8009444:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009448:	f104 021a 	add.w	r2, r4, #26
 800944c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800944e:	9305      	str	r3, [sp, #20]
 8009450:	eba3 0309 	sub.w	r3, r3, r9
 8009454:	455b      	cmp	r3, fp
 8009456:	dc33      	bgt.n	80094c0 <_printf_float+0x384>
 8009458:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800945c:	429a      	cmp	r2, r3
 800945e:	db3b      	blt.n	80094d8 <_printf_float+0x39c>
 8009460:	6823      	ldr	r3, [r4, #0]
 8009462:	07da      	lsls	r2, r3, #31
 8009464:	d438      	bmi.n	80094d8 <_printf_float+0x39c>
 8009466:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009468:	9a05      	ldr	r2, [sp, #20]
 800946a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800946c:	1a9a      	subs	r2, r3, r2
 800946e:	eba3 0901 	sub.w	r9, r3, r1
 8009472:	4591      	cmp	r9, r2
 8009474:	bfa8      	it	ge
 8009476:	4691      	movge	r9, r2
 8009478:	f1b9 0f00 	cmp.w	r9, #0
 800947c:	dc35      	bgt.n	80094ea <_printf_float+0x3ae>
 800947e:	f04f 0800 	mov.w	r8, #0
 8009482:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009486:	f104 0a1a 	add.w	sl, r4, #26
 800948a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800948e:	1a9b      	subs	r3, r3, r2
 8009490:	eba3 0309 	sub.w	r3, r3, r9
 8009494:	4543      	cmp	r3, r8
 8009496:	f77f af79 	ble.w	800938c <_printf_float+0x250>
 800949a:	2301      	movs	r3, #1
 800949c:	4652      	mov	r2, sl
 800949e:	4631      	mov	r1, r6
 80094a0:	4628      	mov	r0, r5
 80094a2:	47b8      	blx	r7
 80094a4:	3001      	adds	r0, #1
 80094a6:	f43f aeaa 	beq.w	80091fe <_printf_float+0xc2>
 80094aa:	f108 0801 	add.w	r8, r8, #1
 80094ae:	e7ec      	b.n	800948a <_printf_float+0x34e>
 80094b0:	4613      	mov	r3, r2
 80094b2:	4631      	mov	r1, r6
 80094b4:	4642      	mov	r2, r8
 80094b6:	4628      	mov	r0, r5
 80094b8:	47b8      	blx	r7
 80094ba:	3001      	adds	r0, #1
 80094bc:	d1c0      	bne.n	8009440 <_printf_float+0x304>
 80094be:	e69e      	b.n	80091fe <_printf_float+0xc2>
 80094c0:	2301      	movs	r3, #1
 80094c2:	4631      	mov	r1, r6
 80094c4:	4628      	mov	r0, r5
 80094c6:	9205      	str	r2, [sp, #20]
 80094c8:	47b8      	blx	r7
 80094ca:	3001      	adds	r0, #1
 80094cc:	f43f ae97 	beq.w	80091fe <_printf_float+0xc2>
 80094d0:	9a05      	ldr	r2, [sp, #20]
 80094d2:	f10b 0b01 	add.w	fp, fp, #1
 80094d6:	e7b9      	b.n	800944c <_printf_float+0x310>
 80094d8:	ee18 3a10 	vmov	r3, s16
 80094dc:	4652      	mov	r2, sl
 80094de:	4631      	mov	r1, r6
 80094e0:	4628      	mov	r0, r5
 80094e2:	47b8      	blx	r7
 80094e4:	3001      	adds	r0, #1
 80094e6:	d1be      	bne.n	8009466 <_printf_float+0x32a>
 80094e8:	e689      	b.n	80091fe <_printf_float+0xc2>
 80094ea:	9a05      	ldr	r2, [sp, #20]
 80094ec:	464b      	mov	r3, r9
 80094ee:	4442      	add	r2, r8
 80094f0:	4631      	mov	r1, r6
 80094f2:	4628      	mov	r0, r5
 80094f4:	47b8      	blx	r7
 80094f6:	3001      	adds	r0, #1
 80094f8:	d1c1      	bne.n	800947e <_printf_float+0x342>
 80094fa:	e680      	b.n	80091fe <_printf_float+0xc2>
 80094fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80094fe:	2a01      	cmp	r2, #1
 8009500:	dc01      	bgt.n	8009506 <_printf_float+0x3ca>
 8009502:	07db      	lsls	r3, r3, #31
 8009504:	d538      	bpl.n	8009578 <_printf_float+0x43c>
 8009506:	2301      	movs	r3, #1
 8009508:	4642      	mov	r2, r8
 800950a:	4631      	mov	r1, r6
 800950c:	4628      	mov	r0, r5
 800950e:	47b8      	blx	r7
 8009510:	3001      	adds	r0, #1
 8009512:	f43f ae74 	beq.w	80091fe <_printf_float+0xc2>
 8009516:	ee18 3a10 	vmov	r3, s16
 800951a:	4652      	mov	r2, sl
 800951c:	4631      	mov	r1, r6
 800951e:	4628      	mov	r0, r5
 8009520:	47b8      	blx	r7
 8009522:	3001      	adds	r0, #1
 8009524:	f43f ae6b 	beq.w	80091fe <_printf_float+0xc2>
 8009528:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800952c:	2200      	movs	r2, #0
 800952e:	2300      	movs	r3, #0
 8009530:	f7f7 fad2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009534:	b9d8      	cbnz	r0, 800956e <_printf_float+0x432>
 8009536:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009538:	f108 0201 	add.w	r2, r8, #1
 800953c:	3b01      	subs	r3, #1
 800953e:	4631      	mov	r1, r6
 8009540:	4628      	mov	r0, r5
 8009542:	47b8      	blx	r7
 8009544:	3001      	adds	r0, #1
 8009546:	d10e      	bne.n	8009566 <_printf_float+0x42a>
 8009548:	e659      	b.n	80091fe <_printf_float+0xc2>
 800954a:	2301      	movs	r3, #1
 800954c:	4652      	mov	r2, sl
 800954e:	4631      	mov	r1, r6
 8009550:	4628      	mov	r0, r5
 8009552:	47b8      	blx	r7
 8009554:	3001      	adds	r0, #1
 8009556:	f43f ae52 	beq.w	80091fe <_printf_float+0xc2>
 800955a:	f108 0801 	add.w	r8, r8, #1
 800955e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009560:	3b01      	subs	r3, #1
 8009562:	4543      	cmp	r3, r8
 8009564:	dcf1      	bgt.n	800954a <_printf_float+0x40e>
 8009566:	464b      	mov	r3, r9
 8009568:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800956c:	e6dc      	b.n	8009328 <_printf_float+0x1ec>
 800956e:	f04f 0800 	mov.w	r8, #0
 8009572:	f104 0a1a 	add.w	sl, r4, #26
 8009576:	e7f2      	b.n	800955e <_printf_float+0x422>
 8009578:	2301      	movs	r3, #1
 800957a:	4642      	mov	r2, r8
 800957c:	e7df      	b.n	800953e <_printf_float+0x402>
 800957e:	2301      	movs	r3, #1
 8009580:	464a      	mov	r2, r9
 8009582:	4631      	mov	r1, r6
 8009584:	4628      	mov	r0, r5
 8009586:	47b8      	blx	r7
 8009588:	3001      	adds	r0, #1
 800958a:	f43f ae38 	beq.w	80091fe <_printf_float+0xc2>
 800958e:	f108 0801 	add.w	r8, r8, #1
 8009592:	68e3      	ldr	r3, [r4, #12]
 8009594:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009596:	1a5b      	subs	r3, r3, r1
 8009598:	4543      	cmp	r3, r8
 800959a:	dcf0      	bgt.n	800957e <_printf_float+0x442>
 800959c:	e6fa      	b.n	8009394 <_printf_float+0x258>
 800959e:	f04f 0800 	mov.w	r8, #0
 80095a2:	f104 0919 	add.w	r9, r4, #25
 80095a6:	e7f4      	b.n	8009592 <_printf_float+0x456>

080095a8 <_printf_common>:
 80095a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095ac:	4616      	mov	r6, r2
 80095ae:	4699      	mov	r9, r3
 80095b0:	688a      	ldr	r2, [r1, #8]
 80095b2:	690b      	ldr	r3, [r1, #16]
 80095b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80095b8:	4293      	cmp	r3, r2
 80095ba:	bfb8      	it	lt
 80095bc:	4613      	movlt	r3, r2
 80095be:	6033      	str	r3, [r6, #0]
 80095c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80095c4:	4607      	mov	r7, r0
 80095c6:	460c      	mov	r4, r1
 80095c8:	b10a      	cbz	r2, 80095ce <_printf_common+0x26>
 80095ca:	3301      	adds	r3, #1
 80095cc:	6033      	str	r3, [r6, #0]
 80095ce:	6823      	ldr	r3, [r4, #0]
 80095d0:	0699      	lsls	r1, r3, #26
 80095d2:	bf42      	ittt	mi
 80095d4:	6833      	ldrmi	r3, [r6, #0]
 80095d6:	3302      	addmi	r3, #2
 80095d8:	6033      	strmi	r3, [r6, #0]
 80095da:	6825      	ldr	r5, [r4, #0]
 80095dc:	f015 0506 	ands.w	r5, r5, #6
 80095e0:	d106      	bne.n	80095f0 <_printf_common+0x48>
 80095e2:	f104 0a19 	add.w	sl, r4, #25
 80095e6:	68e3      	ldr	r3, [r4, #12]
 80095e8:	6832      	ldr	r2, [r6, #0]
 80095ea:	1a9b      	subs	r3, r3, r2
 80095ec:	42ab      	cmp	r3, r5
 80095ee:	dc26      	bgt.n	800963e <_printf_common+0x96>
 80095f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80095f4:	1e13      	subs	r3, r2, #0
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	bf18      	it	ne
 80095fa:	2301      	movne	r3, #1
 80095fc:	0692      	lsls	r2, r2, #26
 80095fe:	d42b      	bmi.n	8009658 <_printf_common+0xb0>
 8009600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009604:	4649      	mov	r1, r9
 8009606:	4638      	mov	r0, r7
 8009608:	47c0      	blx	r8
 800960a:	3001      	adds	r0, #1
 800960c:	d01e      	beq.n	800964c <_printf_common+0xa4>
 800960e:	6823      	ldr	r3, [r4, #0]
 8009610:	68e5      	ldr	r5, [r4, #12]
 8009612:	6832      	ldr	r2, [r6, #0]
 8009614:	f003 0306 	and.w	r3, r3, #6
 8009618:	2b04      	cmp	r3, #4
 800961a:	bf08      	it	eq
 800961c:	1aad      	subeq	r5, r5, r2
 800961e:	68a3      	ldr	r3, [r4, #8]
 8009620:	6922      	ldr	r2, [r4, #16]
 8009622:	bf0c      	ite	eq
 8009624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009628:	2500      	movne	r5, #0
 800962a:	4293      	cmp	r3, r2
 800962c:	bfc4      	itt	gt
 800962e:	1a9b      	subgt	r3, r3, r2
 8009630:	18ed      	addgt	r5, r5, r3
 8009632:	2600      	movs	r6, #0
 8009634:	341a      	adds	r4, #26
 8009636:	42b5      	cmp	r5, r6
 8009638:	d11a      	bne.n	8009670 <_printf_common+0xc8>
 800963a:	2000      	movs	r0, #0
 800963c:	e008      	b.n	8009650 <_printf_common+0xa8>
 800963e:	2301      	movs	r3, #1
 8009640:	4652      	mov	r2, sl
 8009642:	4649      	mov	r1, r9
 8009644:	4638      	mov	r0, r7
 8009646:	47c0      	blx	r8
 8009648:	3001      	adds	r0, #1
 800964a:	d103      	bne.n	8009654 <_printf_common+0xac>
 800964c:	f04f 30ff 	mov.w	r0, #4294967295
 8009650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009654:	3501      	adds	r5, #1
 8009656:	e7c6      	b.n	80095e6 <_printf_common+0x3e>
 8009658:	18e1      	adds	r1, r4, r3
 800965a:	1c5a      	adds	r2, r3, #1
 800965c:	2030      	movs	r0, #48	; 0x30
 800965e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009662:	4422      	add	r2, r4
 8009664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800966c:	3302      	adds	r3, #2
 800966e:	e7c7      	b.n	8009600 <_printf_common+0x58>
 8009670:	2301      	movs	r3, #1
 8009672:	4622      	mov	r2, r4
 8009674:	4649      	mov	r1, r9
 8009676:	4638      	mov	r0, r7
 8009678:	47c0      	blx	r8
 800967a:	3001      	adds	r0, #1
 800967c:	d0e6      	beq.n	800964c <_printf_common+0xa4>
 800967e:	3601      	adds	r6, #1
 8009680:	e7d9      	b.n	8009636 <_printf_common+0x8e>
	...

08009684 <_printf_i>:
 8009684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009688:	7e0f      	ldrb	r7, [r1, #24]
 800968a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800968c:	2f78      	cmp	r7, #120	; 0x78
 800968e:	4691      	mov	r9, r2
 8009690:	4680      	mov	r8, r0
 8009692:	460c      	mov	r4, r1
 8009694:	469a      	mov	sl, r3
 8009696:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800969a:	d807      	bhi.n	80096ac <_printf_i+0x28>
 800969c:	2f62      	cmp	r7, #98	; 0x62
 800969e:	d80a      	bhi.n	80096b6 <_printf_i+0x32>
 80096a0:	2f00      	cmp	r7, #0
 80096a2:	f000 80d8 	beq.w	8009856 <_printf_i+0x1d2>
 80096a6:	2f58      	cmp	r7, #88	; 0x58
 80096a8:	f000 80a3 	beq.w	80097f2 <_printf_i+0x16e>
 80096ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80096b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80096b4:	e03a      	b.n	800972c <_printf_i+0xa8>
 80096b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80096ba:	2b15      	cmp	r3, #21
 80096bc:	d8f6      	bhi.n	80096ac <_printf_i+0x28>
 80096be:	a101      	add	r1, pc, #4	; (adr r1, 80096c4 <_printf_i+0x40>)
 80096c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80096c4:	0800971d 	.word	0x0800971d
 80096c8:	08009731 	.word	0x08009731
 80096cc:	080096ad 	.word	0x080096ad
 80096d0:	080096ad 	.word	0x080096ad
 80096d4:	080096ad 	.word	0x080096ad
 80096d8:	080096ad 	.word	0x080096ad
 80096dc:	08009731 	.word	0x08009731
 80096e0:	080096ad 	.word	0x080096ad
 80096e4:	080096ad 	.word	0x080096ad
 80096e8:	080096ad 	.word	0x080096ad
 80096ec:	080096ad 	.word	0x080096ad
 80096f0:	0800983d 	.word	0x0800983d
 80096f4:	08009761 	.word	0x08009761
 80096f8:	0800981f 	.word	0x0800981f
 80096fc:	080096ad 	.word	0x080096ad
 8009700:	080096ad 	.word	0x080096ad
 8009704:	0800985f 	.word	0x0800985f
 8009708:	080096ad 	.word	0x080096ad
 800970c:	08009761 	.word	0x08009761
 8009710:	080096ad 	.word	0x080096ad
 8009714:	080096ad 	.word	0x080096ad
 8009718:	08009827 	.word	0x08009827
 800971c:	682b      	ldr	r3, [r5, #0]
 800971e:	1d1a      	adds	r2, r3, #4
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	602a      	str	r2, [r5, #0]
 8009724:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800972c:	2301      	movs	r3, #1
 800972e:	e0a3      	b.n	8009878 <_printf_i+0x1f4>
 8009730:	6820      	ldr	r0, [r4, #0]
 8009732:	6829      	ldr	r1, [r5, #0]
 8009734:	0606      	lsls	r6, r0, #24
 8009736:	f101 0304 	add.w	r3, r1, #4
 800973a:	d50a      	bpl.n	8009752 <_printf_i+0xce>
 800973c:	680e      	ldr	r6, [r1, #0]
 800973e:	602b      	str	r3, [r5, #0]
 8009740:	2e00      	cmp	r6, #0
 8009742:	da03      	bge.n	800974c <_printf_i+0xc8>
 8009744:	232d      	movs	r3, #45	; 0x2d
 8009746:	4276      	negs	r6, r6
 8009748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800974c:	485e      	ldr	r0, [pc, #376]	; (80098c8 <_printf_i+0x244>)
 800974e:	230a      	movs	r3, #10
 8009750:	e019      	b.n	8009786 <_printf_i+0x102>
 8009752:	680e      	ldr	r6, [r1, #0]
 8009754:	602b      	str	r3, [r5, #0]
 8009756:	f010 0f40 	tst.w	r0, #64	; 0x40
 800975a:	bf18      	it	ne
 800975c:	b236      	sxthne	r6, r6
 800975e:	e7ef      	b.n	8009740 <_printf_i+0xbc>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	6820      	ldr	r0, [r4, #0]
 8009764:	1d19      	adds	r1, r3, #4
 8009766:	6029      	str	r1, [r5, #0]
 8009768:	0601      	lsls	r1, r0, #24
 800976a:	d501      	bpl.n	8009770 <_printf_i+0xec>
 800976c:	681e      	ldr	r6, [r3, #0]
 800976e:	e002      	b.n	8009776 <_printf_i+0xf2>
 8009770:	0646      	lsls	r6, r0, #25
 8009772:	d5fb      	bpl.n	800976c <_printf_i+0xe8>
 8009774:	881e      	ldrh	r6, [r3, #0]
 8009776:	4854      	ldr	r0, [pc, #336]	; (80098c8 <_printf_i+0x244>)
 8009778:	2f6f      	cmp	r7, #111	; 0x6f
 800977a:	bf0c      	ite	eq
 800977c:	2308      	moveq	r3, #8
 800977e:	230a      	movne	r3, #10
 8009780:	2100      	movs	r1, #0
 8009782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009786:	6865      	ldr	r5, [r4, #4]
 8009788:	60a5      	str	r5, [r4, #8]
 800978a:	2d00      	cmp	r5, #0
 800978c:	bfa2      	ittt	ge
 800978e:	6821      	ldrge	r1, [r4, #0]
 8009790:	f021 0104 	bicge.w	r1, r1, #4
 8009794:	6021      	strge	r1, [r4, #0]
 8009796:	b90e      	cbnz	r6, 800979c <_printf_i+0x118>
 8009798:	2d00      	cmp	r5, #0
 800979a:	d04d      	beq.n	8009838 <_printf_i+0x1b4>
 800979c:	4615      	mov	r5, r2
 800979e:	fbb6 f1f3 	udiv	r1, r6, r3
 80097a2:	fb03 6711 	mls	r7, r3, r1, r6
 80097a6:	5dc7      	ldrb	r7, [r0, r7]
 80097a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80097ac:	4637      	mov	r7, r6
 80097ae:	42bb      	cmp	r3, r7
 80097b0:	460e      	mov	r6, r1
 80097b2:	d9f4      	bls.n	800979e <_printf_i+0x11a>
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d10b      	bne.n	80097d0 <_printf_i+0x14c>
 80097b8:	6823      	ldr	r3, [r4, #0]
 80097ba:	07de      	lsls	r6, r3, #31
 80097bc:	d508      	bpl.n	80097d0 <_printf_i+0x14c>
 80097be:	6923      	ldr	r3, [r4, #16]
 80097c0:	6861      	ldr	r1, [r4, #4]
 80097c2:	4299      	cmp	r1, r3
 80097c4:	bfde      	ittt	le
 80097c6:	2330      	movle	r3, #48	; 0x30
 80097c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80097cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80097d0:	1b52      	subs	r2, r2, r5
 80097d2:	6122      	str	r2, [r4, #16]
 80097d4:	f8cd a000 	str.w	sl, [sp]
 80097d8:	464b      	mov	r3, r9
 80097da:	aa03      	add	r2, sp, #12
 80097dc:	4621      	mov	r1, r4
 80097de:	4640      	mov	r0, r8
 80097e0:	f7ff fee2 	bl	80095a8 <_printf_common>
 80097e4:	3001      	adds	r0, #1
 80097e6:	d14c      	bne.n	8009882 <_printf_i+0x1fe>
 80097e8:	f04f 30ff 	mov.w	r0, #4294967295
 80097ec:	b004      	add	sp, #16
 80097ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80097f2:	4835      	ldr	r0, [pc, #212]	; (80098c8 <_printf_i+0x244>)
 80097f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80097f8:	6829      	ldr	r1, [r5, #0]
 80097fa:	6823      	ldr	r3, [r4, #0]
 80097fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009800:	6029      	str	r1, [r5, #0]
 8009802:	061d      	lsls	r5, r3, #24
 8009804:	d514      	bpl.n	8009830 <_printf_i+0x1ac>
 8009806:	07df      	lsls	r7, r3, #31
 8009808:	bf44      	itt	mi
 800980a:	f043 0320 	orrmi.w	r3, r3, #32
 800980e:	6023      	strmi	r3, [r4, #0]
 8009810:	b91e      	cbnz	r6, 800981a <_printf_i+0x196>
 8009812:	6823      	ldr	r3, [r4, #0]
 8009814:	f023 0320 	bic.w	r3, r3, #32
 8009818:	6023      	str	r3, [r4, #0]
 800981a:	2310      	movs	r3, #16
 800981c:	e7b0      	b.n	8009780 <_printf_i+0xfc>
 800981e:	6823      	ldr	r3, [r4, #0]
 8009820:	f043 0320 	orr.w	r3, r3, #32
 8009824:	6023      	str	r3, [r4, #0]
 8009826:	2378      	movs	r3, #120	; 0x78
 8009828:	4828      	ldr	r0, [pc, #160]	; (80098cc <_printf_i+0x248>)
 800982a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800982e:	e7e3      	b.n	80097f8 <_printf_i+0x174>
 8009830:	0659      	lsls	r1, r3, #25
 8009832:	bf48      	it	mi
 8009834:	b2b6      	uxthmi	r6, r6
 8009836:	e7e6      	b.n	8009806 <_printf_i+0x182>
 8009838:	4615      	mov	r5, r2
 800983a:	e7bb      	b.n	80097b4 <_printf_i+0x130>
 800983c:	682b      	ldr	r3, [r5, #0]
 800983e:	6826      	ldr	r6, [r4, #0]
 8009840:	6961      	ldr	r1, [r4, #20]
 8009842:	1d18      	adds	r0, r3, #4
 8009844:	6028      	str	r0, [r5, #0]
 8009846:	0635      	lsls	r5, r6, #24
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	d501      	bpl.n	8009850 <_printf_i+0x1cc>
 800984c:	6019      	str	r1, [r3, #0]
 800984e:	e002      	b.n	8009856 <_printf_i+0x1d2>
 8009850:	0670      	lsls	r0, r6, #25
 8009852:	d5fb      	bpl.n	800984c <_printf_i+0x1c8>
 8009854:	8019      	strh	r1, [r3, #0]
 8009856:	2300      	movs	r3, #0
 8009858:	6123      	str	r3, [r4, #16]
 800985a:	4615      	mov	r5, r2
 800985c:	e7ba      	b.n	80097d4 <_printf_i+0x150>
 800985e:	682b      	ldr	r3, [r5, #0]
 8009860:	1d1a      	adds	r2, r3, #4
 8009862:	602a      	str	r2, [r5, #0]
 8009864:	681d      	ldr	r5, [r3, #0]
 8009866:	6862      	ldr	r2, [r4, #4]
 8009868:	2100      	movs	r1, #0
 800986a:	4628      	mov	r0, r5
 800986c:	f7f6 fcc0 	bl	80001f0 <memchr>
 8009870:	b108      	cbz	r0, 8009876 <_printf_i+0x1f2>
 8009872:	1b40      	subs	r0, r0, r5
 8009874:	6060      	str	r0, [r4, #4]
 8009876:	6863      	ldr	r3, [r4, #4]
 8009878:	6123      	str	r3, [r4, #16]
 800987a:	2300      	movs	r3, #0
 800987c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009880:	e7a8      	b.n	80097d4 <_printf_i+0x150>
 8009882:	6923      	ldr	r3, [r4, #16]
 8009884:	462a      	mov	r2, r5
 8009886:	4649      	mov	r1, r9
 8009888:	4640      	mov	r0, r8
 800988a:	47d0      	blx	sl
 800988c:	3001      	adds	r0, #1
 800988e:	d0ab      	beq.n	80097e8 <_printf_i+0x164>
 8009890:	6823      	ldr	r3, [r4, #0]
 8009892:	079b      	lsls	r3, r3, #30
 8009894:	d413      	bmi.n	80098be <_printf_i+0x23a>
 8009896:	68e0      	ldr	r0, [r4, #12]
 8009898:	9b03      	ldr	r3, [sp, #12]
 800989a:	4298      	cmp	r0, r3
 800989c:	bfb8      	it	lt
 800989e:	4618      	movlt	r0, r3
 80098a0:	e7a4      	b.n	80097ec <_printf_i+0x168>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4632      	mov	r2, r6
 80098a6:	4649      	mov	r1, r9
 80098a8:	4640      	mov	r0, r8
 80098aa:	47d0      	blx	sl
 80098ac:	3001      	adds	r0, #1
 80098ae:	d09b      	beq.n	80097e8 <_printf_i+0x164>
 80098b0:	3501      	adds	r5, #1
 80098b2:	68e3      	ldr	r3, [r4, #12]
 80098b4:	9903      	ldr	r1, [sp, #12]
 80098b6:	1a5b      	subs	r3, r3, r1
 80098b8:	42ab      	cmp	r3, r5
 80098ba:	dcf2      	bgt.n	80098a2 <_printf_i+0x21e>
 80098bc:	e7eb      	b.n	8009896 <_printf_i+0x212>
 80098be:	2500      	movs	r5, #0
 80098c0:	f104 0619 	add.w	r6, r4, #25
 80098c4:	e7f5      	b.n	80098b2 <_printf_i+0x22e>
 80098c6:	bf00      	nop
 80098c8:	0800bd02 	.word	0x0800bd02
 80098cc:	0800bd13 	.word	0x0800bd13

080098d0 <iprintf>:
 80098d0:	b40f      	push	{r0, r1, r2, r3}
 80098d2:	4b0a      	ldr	r3, [pc, #40]	; (80098fc <iprintf+0x2c>)
 80098d4:	b513      	push	{r0, r1, r4, lr}
 80098d6:	681c      	ldr	r4, [r3, #0]
 80098d8:	b124      	cbz	r4, 80098e4 <iprintf+0x14>
 80098da:	69a3      	ldr	r3, [r4, #24]
 80098dc:	b913      	cbnz	r3, 80098e4 <iprintf+0x14>
 80098de:	4620      	mov	r0, r4
 80098e0:	f000 fee0 	bl	800a6a4 <__sinit>
 80098e4:	ab05      	add	r3, sp, #20
 80098e6:	9a04      	ldr	r2, [sp, #16]
 80098e8:	68a1      	ldr	r1, [r4, #8]
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	4620      	mov	r0, r4
 80098ee:	f001 fc39 	bl	800b164 <_vfiprintf_r>
 80098f2:	b002      	add	sp, #8
 80098f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098f8:	b004      	add	sp, #16
 80098fa:	4770      	bx	lr
 80098fc:	20000014 	.word	0x20000014

08009900 <quorem>:
 8009900:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009904:	6903      	ldr	r3, [r0, #16]
 8009906:	690c      	ldr	r4, [r1, #16]
 8009908:	42a3      	cmp	r3, r4
 800990a:	4607      	mov	r7, r0
 800990c:	f2c0 8081 	blt.w	8009a12 <quorem+0x112>
 8009910:	3c01      	subs	r4, #1
 8009912:	f101 0814 	add.w	r8, r1, #20
 8009916:	f100 0514 	add.w	r5, r0, #20
 800991a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800991e:	9301      	str	r3, [sp, #4]
 8009920:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009924:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009928:	3301      	adds	r3, #1
 800992a:	429a      	cmp	r2, r3
 800992c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009930:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009934:	fbb2 f6f3 	udiv	r6, r2, r3
 8009938:	d331      	bcc.n	800999e <quorem+0x9e>
 800993a:	f04f 0e00 	mov.w	lr, #0
 800993e:	4640      	mov	r0, r8
 8009940:	46ac      	mov	ip, r5
 8009942:	46f2      	mov	sl, lr
 8009944:	f850 2b04 	ldr.w	r2, [r0], #4
 8009948:	b293      	uxth	r3, r2
 800994a:	fb06 e303 	mla	r3, r6, r3, lr
 800994e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8009952:	b29b      	uxth	r3, r3
 8009954:	ebaa 0303 	sub.w	r3, sl, r3
 8009958:	f8dc a000 	ldr.w	sl, [ip]
 800995c:	0c12      	lsrs	r2, r2, #16
 800995e:	fa13 f38a 	uxtah	r3, r3, sl
 8009962:	fb06 e202 	mla	r2, r6, r2, lr
 8009966:	9300      	str	r3, [sp, #0]
 8009968:	9b00      	ldr	r3, [sp, #0]
 800996a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800996e:	b292      	uxth	r2, r2
 8009970:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009974:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009978:	f8bd 3000 	ldrh.w	r3, [sp]
 800997c:	4581      	cmp	r9, r0
 800997e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009982:	f84c 3b04 	str.w	r3, [ip], #4
 8009986:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800998a:	d2db      	bcs.n	8009944 <quorem+0x44>
 800998c:	f855 300b 	ldr.w	r3, [r5, fp]
 8009990:	b92b      	cbnz	r3, 800999e <quorem+0x9e>
 8009992:	9b01      	ldr	r3, [sp, #4]
 8009994:	3b04      	subs	r3, #4
 8009996:	429d      	cmp	r5, r3
 8009998:	461a      	mov	r2, r3
 800999a:	d32e      	bcc.n	80099fa <quorem+0xfa>
 800999c:	613c      	str	r4, [r7, #16]
 800999e:	4638      	mov	r0, r7
 80099a0:	f001 f9be 	bl	800ad20 <__mcmp>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	db24      	blt.n	80099f2 <quorem+0xf2>
 80099a8:	3601      	adds	r6, #1
 80099aa:	4628      	mov	r0, r5
 80099ac:	f04f 0c00 	mov.w	ip, #0
 80099b0:	f858 2b04 	ldr.w	r2, [r8], #4
 80099b4:	f8d0 e000 	ldr.w	lr, [r0]
 80099b8:	b293      	uxth	r3, r2
 80099ba:	ebac 0303 	sub.w	r3, ip, r3
 80099be:	0c12      	lsrs	r2, r2, #16
 80099c0:	fa13 f38e 	uxtah	r3, r3, lr
 80099c4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80099c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80099cc:	b29b      	uxth	r3, r3
 80099ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80099d2:	45c1      	cmp	r9, r8
 80099d4:	f840 3b04 	str.w	r3, [r0], #4
 80099d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80099dc:	d2e8      	bcs.n	80099b0 <quorem+0xb0>
 80099de:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80099e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80099e6:	b922      	cbnz	r2, 80099f2 <quorem+0xf2>
 80099e8:	3b04      	subs	r3, #4
 80099ea:	429d      	cmp	r5, r3
 80099ec:	461a      	mov	r2, r3
 80099ee:	d30a      	bcc.n	8009a06 <quorem+0x106>
 80099f0:	613c      	str	r4, [r7, #16]
 80099f2:	4630      	mov	r0, r6
 80099f4:	b003      	add	sp, #12
 80099f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099fa:	6812      	ldr	r2, [r2, #0]
 80099fc:	3b04      	subs	r3, #4
 80099fe:	2a00      	cmp	r2, #0
 8009a00:	d1cc      	bne.n	800999c <quorem+0x9c>
 8009a02:	3c01      	subs	r4, #1
 8009a04:	e7c7      	b.n	8009996 <quorem+0x96>
 8009a06:	6812      	ldr	r2, [r2, #0]
 8009a08:	3b04      	subs	r3, #4
 8009a0a:	2a00      	cmp	r2, #0
 8009a0c:	d1f0      	bne.n	80099f0 <quorem+0xf0>
 8009a0e:	3c01      	subs	r4, #1
 8009a10:	e7eb      	b.n	80099ea <quorem+0xea>
 8009a12:	2000      	movs	r0, #0
 8009a14:	e7ee      	b.n	80099f4 <quorem+0xf4>
	...

08009a18 <_dtoa_r>:
 8009a18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a1c:	ed2d 8b04 	vpush	{d8-d9}
 8009a20:	ec57 6b10 	vmov	r6, r7, d0
 8009a24:	b093      	sub	sp, #76	; 0x4c
 8009a26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009a28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009a2c:	9106      	str	r1, [sp, #24]
 8009a2e:	ee10 aa10 	vmov	sl, s0
 8009a32:	4604      	mov	r4, r0
 8009a34:	9209      	str	r2, [sp, #36]	; 0x24
 8009a36:	930c      	str	r3, [sp, #48]	; 0x30
 8009a38:	46bb      	mov	fp, r7
 8009a3a:	b975      	cbnz	r5, 8009a5a <_dtoa_r+0x42>
 8009a3c:	2010      	movs	r0, #16
 8009a3e:	f000 fed7 	bl	800a7f0 <malloc>
 8009a42:	4602      	mov	r2, r0
 8009a44:	6260      	str	r0, [r4, #36]	; 0x24
 8009a46:	b920      	cbnz	r0, 8009a52 <_dtoa_r+0x3a>
 8009a48:	4ba7      	ldr	r3, [pc, #668]	; (8009ce8 <_dtoa_r+0x2d0>)
 8009a4a:	21ea      	movs	r1, #234	; 0xea
 8009a4c:	48a7      	ldr	r0, [pc, #668]	; (8009cec <_dtoa_r+0x2d4>)
 8009a4e:	f001 fddf 	bl	800b610 <__assert_func>
 8009a52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009a56:	6005      	str	r5, [r0, #0]
 8009a58:	60c5      	str	r5, [r0, #12]
 8009a5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a5c:	6819      	ldr	r1, [r3, #0]
 8009a5e:	b151      	cbz	r1, 8009a76 <_dtoa_r+0x5e>
 8009a60:	685a      	ldr	r2, [r3, #4]
 8009a62:	604a      	str	r2, [r1, #4]
 8009a64:	2301      	movs	r3, #1
 8009a66:	4093      	lsls	r3, r2
 8009a68:	608b      	str	r3, [r1, #8]
 8009a6a:	4620      	mov	r0, r4
 8009a6c:	f000 ff16 	bl	800a89c <_Bfree>
 8009a70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009a72:	2200      	movs	r2, #0
 8009a74:	601a      	str	r2, [r3, #0]
 8009a76:	1e3b      	subs	r3, r7, #0
 8009a78:	bfaa      	itet	ge
 8009a7a:	2300      	movge	r3, #0
 8009a7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009a80:	f8c8 3000 	strge.w	r3, [r8]
 8009a84:	4b9a      	ldr	r3, [pc, #616]	; (8009cf0 <_dtoa_r+0x2d8>)
 8009a86:	bfbc      	itt	lt
 8009a88:	2201      	movlt	r2, #1
 8009a8a:	f8c8 2000 	strlt.w	r2, [r8]
 8009a8e:	ea33 030b 	bics.w	r3, r3, fp
 8009a92:	d11b      	bne.n	8009acc <_dtoa_r+0xb4>
 8009a94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a96:	f242 730f 	movw	r3, #9999	; 0x270f
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009aa0:	4333      	orrs	r3, r6
 8009aa2:	f000 8592 	beq.w	800a5ca <_dtoa_r+0xbb2>
 8009aa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009aa8:	b963      	cbnz	r3, 8009ac4 <_dtoa_r+0xac>
 8009aaa:	4b92      	ldr	r3, [pc, #584]	; (8009cf4 <_dtoa_r+0x2dc>)
 8009aac:	e022      	b.n	8009af4 <_dtoa_r+0xdc>
 8009aae:	4b92      	ldr	r3, [pc, #584]	; (8009cf8 <_dtoa_r+0x2e0>)
 8009ab0:	9301      	str	r3, [sp, #4]
 8009ab2:	3308      	adds	r3, #8
 8009ab4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8009ab6:	6013      	str	r3, [r2, #0]
 8009ab8:	9801      	ldr	r0, [sp, #4]
 8009aba:	b013      	add	sp, #76	; 0x4c
 8009abc:	ecbd 8b04 	vpop	{d8-d9}
 8009ac0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ac4:	4b8b      	ldr	r3, [pc, #556]	; (8009cf4 <_dtoa_r+0x2dc>)
 8009ac6:	9301      	str	r3, [sp, #4]
 8009ac8:	3303      	adds	r3, #3
 8009aca:	e7f3      	b.n	8009ab4 <_dtoa_r+0x9c>
 8009acc:	2200      	movs	r2, #0
 8009ace:	2300      	movs	r3, #0
 8009ad0:	4650      	mov	r0, sl
 8009ad2:	4659      	mov	r1, fp
 8009ad4:	f7f7 f800 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ad8:	ec4b ab19 	vmov	d9, sl, fp
 8009adc:	4680      	mov	r8, r0
 8009ade:	b158      	cbz	r0, 8009af8 <_dtoa_r+0xe0>
 8009ae0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009ae2:	2301      	movs	r3, #1
 8009ae4:	6013      	str	r3, [r2, #0]
 8009ae6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	f000 856b 	beq.w	800a5c4 <_dtoa_r+0xbac>
 8009aee:	4883      	ldr	r0, [pc, #524]	; (8009cfc <_dtoa_r+0x2e4>)
 8009af0:	6018      	str	r0, [r3, #0]
 8009af2:	1e43      	subs	r3, r0, #1
 8009af4:	9301      	str	r3, [sp, #4]
 8009af6:	e7df      	b.n	8009ab8 <_dtoa_r+0xa0>
 8009af8:	ec4b ab10 	vmov	d0, sl, fp
 8009afc:	aa10      	add	r2, sp, #64	; 0x40
 8009afe:	a911      	add	r1, sp, #68	; 0x44
 8009b00:	4620      	mov	r0, r4
 8009b02:	f001 f9b3 	bl	800ae6c <__d2b>
 8009b06:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009b0a:	ee08 0a10 	vmov	s16, r0
 8009b0e:	2d00      	cmp	r5, #0
 8009b10:	f000 8084 	beq.w	8009c1c <_dtoa_r+0x204>
 8009b14:	ee19 3a90 	vmov	r3, s19
 8009b18:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009b1c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009b20:	4656      	mov	r6, sl
 8009b22:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009b26:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009b2a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009b2e:	4b74      	ldr	r3, [pc, #464]	; (8009d00 <_dtoa_r+0x2e8>)
 8009b30:	2200      	movs	r2, #0
 8009b32:	4630      	mov	r0, r6
 8009b34:	4639      	mov	r1, r7
 8009b36:	f7f6 fbaf 	bl	8000298 <__aeabi_dsub>
 8009b3a:	a365      	add	r3, pc, #404	; (adr r3, 8009cd0 <_dtoa_r+0x2b8>)
 8009b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b40:	f7f6 fd62 	bl	8000608 <__aeabi_dmul>
 8009b44:	a364      	add	r3, pc, #400	; (adr r3, 8009cd8 <_dtoa_r+0x2c0>)
 8009b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b4a:	f7f6 fba7 	bl	800029c <__adddf3>
 8009b4e:	4606      	mov	r6, r0
 8009b50:	4628      	mov	r0, r5
 8009b52:	460f      	mov	r7, r1
 8009b54:	f7f6 fcee 	bl	8000534 <__aeabi_i2d>
 8009b58:	a361      	add	r3, pc, #388	; (adr r3, 8009ce0 <_dtoa_r+0x2c8>)
 8009b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5e:	f7f6 fd53 	bl	8000608 <__aeabi_dmul>
 8009b62:	4602      	mov	r2, r0
 8009b64:	460b      	mov	r3, r1
 8009b66:	4630      	mov	r0, r6
 8009b68:	4639      	mov	r1, r7
 8009b6a:	f7f6 fb97 	bl	800029c <__adddf3>
 8009b6e:	4606      	mov	r6, r0
 8009b70:	460f      	mov	r7, r1
 8009b72:	f7f6 fff9 	bl	8000b68 <__aeabi_d2iz>
 8009b76:	2200      	movs	r2, #0
 8009b78:	9000      	str	r0, [sp, #0]
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	4630      	mov	r0, r6
 8009b7e:	4639      	mov	r1, r7
 8009b80:	f7f6 ffb4 	bl	8000aec <__aeabi_dcmplt>
 8009b84:	b150      	cbz	r0, 8009b9c <_dtoa_r+0x184>
 8009b86:	9800      	ldr	r0, [sp, #0]
 8009b88:	f7f6 fcd4 	bl	8000534 <__aeabi_i2d>
 8009b8c:	4632      	mov	r2, r6
 8009b8e:	463b      	mov	r3, r7
 8009b90:	f7f6 ffa2 	bl	8000ad8 <__aeabi_dcmpeq>
 8009b94:	b910      	cbnz	r0, 8009b9c <_dtoa_r+0x184>
 8009b96:	9b00      	ldr	r3, [sp, #0]
 8009b98:	3b01      	subs	r3, #1
 8009b9a:	9300      	str	r3, [sp, #0]
 8009b9c:	9b00      	ldr	r3, [sp, #0]
 8009b9e:	2b16      	cmp	r3, #22
 8009ba0:	d85a      	bhi.n	8009c58 <_dtoa_r+0x240>
 8009ba2:	9a00      	ldr	r2, [sp, #0]
 8009ba4:	4b57      	ldr	r3, [pc, #348]	; (8009d04 <_dtoa_r+0x2ec>)
 8009ba6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bae:	ec51 0b19 	vmov	r0, r1, d9
 8009bb2:	f7f6 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8009bb6:	2800      	cmp	r0, #0
 8009bb8:	d050      	beq.n	8009c5c <_dtoa_r+0x244>
 8009bba:	9b00      	ldr	r3, [sp, #0]
 8009bbc:	3b01      	subs	r3, #1
 8009bbe:	9300      	str	r3, [sp, #0]
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	930b      	str	r3, [sp, #44]	; 0x2c
 8009bc4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009bc6:	1b5d      	subs	r5, r3, r5
 8009bc8:	1e6b      	subs	r3, r5, #1
 8009bca:	9305      	str	r3, [sp, #20]
 8009bcc:	bf45      	ittet	mi
 8009bce:	f1c5 0301 	rsbmi	r3, r5, #1
 8009bd2:	9304      	strmi	r3, [sp, #16]
 8009bd4:	2300      	movpl	r3, #0
 8009bd6:	2300      	movmi	r3, #0
 8009bd8:	bf4c      	ite	mi
 8009bda:	9305      	strmi	r3, [sp, #20]
 8009bdc:	9304      	strpl	r3, [sp, #16]
 8009bde:	9b00      	ldr	r3, [sp, #0]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	db3d      	blt.n	8009c60 <_dtoa_r+0x248>
 8009be4:	9b05      	ldr	r3, [sp, #20]
 8009be6:	9a00      	ldr	r2, [sp, #0]
 8009be8:	920a      	str	r2, [sp, #40]	; 0x28
 8009bea:	4413      	add	r3, r2
 8009bec:	9305      	str	r3, [sp, #20]
 8009bee:	2300      	movs	r3, #0
 8009bf0:	9307      	str	r3, [sp, #28]
 8009bf2:	9b06      	ldr	r3, [sp, #24]
 8009bf4:	2b09      	cmp	r3, #9
 8009bf6:	f200 8089 	bhi.w	8009d0c <_dtoa_r+0x2f4>
 8009bfa:	2b05      	cmp	r3, #5
 8009bfc:	bfc4      	itt	gt
 8009bfe:	3b04      	subgt	r3, #4
 8009c00:	9306      	strgt	r3, [sp, #24]
 8009c02:	9b06      	ldr	r3, [sp, #24]
 8009c04:	f1a3 0302 	sub.w	r3, r3, #2
 8009c08:	bfcc      	ite	gt
 8009c0a:	2500      	movgt	r5, #0
 8009c0c:	2501      	movle	r5, #1
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	f200 8087 	bhi.w	8009d22 <_dtoa_r+0x30a>
 8009c14:	e8df f003 	tbb	[pc, r3]
 8009c18:	59383a2d 	.word	0x59383a2d
 8009c1c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009c20:	441d      	add	r5, r3
 8009c22:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009c26:	2b20      	cmp	r3, #32
 8009c28:	bfc1      	itttt	gt
 8009c2a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009c2e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009c32:	fa0b f303 	lslgt.w	r3, fp, r3
 8009c36:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009c3a:	bfda      	itte	le
 8009c3c:	f1c3 0320 	rsble	r3, r3, #32
 8009c40:	fa06 f003 	lslle.w	r0, r6, r3
 8009c44:	4318      	orrgt	r0, r3
 8009c46:	f7f6 fc65 	bl	8000514 <__aeabi_ui2d>
 8009c4a:	2301      	movs	r3, #1
 8009c4c:	4606      	mov	r6, r0
 8009c4e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009c52:	3d01      	subs	r5, #1
 8009c54:	930e      	str	r3, [sp, #56]	; 0x38
 8009c56:	e76a      	b.n	8009b2e <_dtoa_r+0x116>
 8009c58:	2301      	movs	r3, #1
 8009c5a:	e7b2      	b.n	8009bc2 <_dtoa_r+0x1aa>
 8009c5c:	900b      	str	r0, [sp, #44]	; 0x2c
 8009c5e:	e7b1      	b.n	8009bc4 <_dtoa_r+0x1ac>
 8009c60:	9b04      	ldr	r3, [sp, #16]
 8009c62:	9a00      	ldr	r2, [sp, #0]
 8009c64:	1a9b      	subs	r3, r3, r2
 8009c66:	9304      	str	r3, [sp, #16]
 8009c68:	4253      	negs	r3, r2
 8009c6a:	9307      	str	r3, [sp, #28]
 8009c6c:	2300      	movs	r3, #0
 8009c6e:	930a      	str	r3, [sp, #40]	; 0x28
 8009c70:	e7bf      	b.n	8009bf2 <_dtoa_r+0x1da>
 8009c72:	2300      	movs	r3, #0
 8009c74:	9308      	str	r3, [sp, #32]
 8009c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	dc55      	bgt.n	8009d28 <_dtoa_r+0x310>
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009c82:	461a      	mov	r2, r3
 8009c84:	9209      	str	r2, [sp, #36]	; 0x24
 8009c86:	e00c      	b.n	8009ca2 <_dtoa_r+0x28a>
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e7f3      	b.n	8009c74 <_dtoa_r+0x25c>
 8009c8c:	2300      	movs	r3, #0
 8009c8e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c90:	9308      	str	r3, [sp, #32]
 8009c92:	9b00      	ldr	r3, [sp, #0]
 8009c94:	4413      	add	r3, r2
 8009c96:	9302      	str	r3, [sp, #8]
 8009c98:	3301      	adds	r3, #1
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	9303      	str	r3, [sp, #12]
 8009c9e:	bfb8      	it	lt
 8009ca0:	2301      	movlt	r3, #1
 8009ca2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8009ca4:	2200      	movs	r2, #0
 8009ca6:	6042      	str	r2, [r0, #4]
 8009ca8:	2204      	movs	r2, #4
 8009caa:	f102 0614 	add.w	r6, r2, #20
 8009cae:	429e      	cmp	r6, r3
 8009cb0:	6841      	ldr	r1, [r0, #4]
 8009cb2:	d93d      	bls.n	8009d30 <_dtoa_r+0x318>
 8009cb4:	4620      	mov	r0, r4
 8009cb6:	f000 fdb1 	bl	800a81c <_Balloc>
 8009cba:	9001      	str	r0, [sp, #4]
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d13b      	bne.n	8009d38 <_dtoa_r+0x320>
 8009cc0:	4b11      	ldr	r3, [pc, #68]	; (8009d08 <_dtoa_r+0x2f0>)
 8009cc2:	4602      	mov	r2, r0
 8009cc4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009cc8:	e6c0      	b.n	8009a4c <_dtoa_r+0x34>
 8009cca:	2301      	movs	r3, #1
 8009ccc:	e7df      	b.n	8009c8e <_dtoa_r+0x276>
 8009cce:	bf00      	nop
 8009cd0:	636f4361 	.word	0x636f4361
 8009cd4:	3fd287a7 	.word	0x3fd287a7
 8009cd8:	8b60c8b3 	.word	0x8b60c8b3
 8009cdc:	3fc68a28 	.word	0x3fc68a28
 8009ce0:	509f79fb 	.word	0x509f79fb
 8009ce4:	3fd34413 	.word	0x3fd34413
 8009ce8:	0800bd31 	.word	0x0800bd31
 8009cec:	0800bd48 	.word	0x0800bd48
 8009cf0:	7ff00000 	.word	0x7ff00000
 8009cf4:	0800bd2d 	.word	0x0800bd2d
 8009cf8:	0800bd24 	.word	0x0800bd24
 8009cfc:	0800bd01 	.word	0x0800bd01
 8009d00:	3ff80000 	.word	0x3ff80000
 8009d04:	0800be98 	.word	0x0800be98
 8009d08:	0800bda3 	.word	0x0800bda3
 8009d0c:	2501      	movs	r5, #1
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9306      	str	r3, [sp, #24]
 8009d12:	9508      	str	r5, [sp, #32]
 8009d14:	f04f 33ff 	mov.w	r3, #4294967295
 8009d18:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2312      	movs	r3, #18
 8009d20:	e7b0      	b.n	8009c84 <_dtoa_r+0x26c>
 8009d22:	2301      	movs	r3, #1
 8009d24:	9308      	str	r3, [sp, #32]
 8009d26:	e7f5      	b.n	8009d14 <_dtoa_r+0x2fc>
 8009d28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009d2e:	e7b8      	b.n	8009ca2 <_dtoa_r+0x28a>
 8009d30:	3101      	adds	r1, #1
 8009d32:	6041      	str	r1, [r0, #4]
 8009d34:	0052      	lsls	r2, r2, #1
 8009d36:	e7b8      	b.n	8009caa <_dtoa_r+0x292>
 8009d38:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d3a:	9a01      	ldr	r2, [sp, #4]
 8009d3c:	601a      	str	r2, [r3, #0]
 8009d3e:	9b03      	ldr	r3, [sp, #12]
 8009d40:	2b0e      	cmp	r3, #14
 8009d42:	f200 809d 	bhi.w	8009e80 <_dtoa_r+0x468>
 8009d46:	2d00      	cmp	r5, #0
 8009d48:	f000 809a 	beq.w	8009e80 <_dtoa_r+0x468>
 8009d4c:	9b00      	ldr	r3, [sp, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	dd32      	ble.n	8009db8 <_dtoa_r+0x3a0>
 8009d52:	4ab7      	ldr	r2, [pc, #732]	; (800a030 <_dtoa_r+0x618>)
 8009d54:	f003 030f 	and.w	r3, r3, #15
 8009d58:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8009d5c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009d60:	9b00      	ldr	r3, [sp, #0]
 8009d62:	05d8      	lsls	r0, r3, #23
 8009d64:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009d68:	d516      	bpl.n	8009d98 <_dtoa_r+0x380>
 8009d6a:	4bb2      	ldr	r3, [pc, #712]	; (800a034 <_dtoa_r+0x61c>)
 8009d6c:	ec51 0b19 	vmov	r0, r1, d9
 8009d70:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009d74:	f7f6 fd72 	bl	800085c <__aeabi_ddiv>
 8009d78:	f007 070f 	and.w	r7, r7, #15
 8009d7c:	4682      	mov	sl, r0
 8009d7e:	468b      	mov	fp, r1
 8009d80:	2503      	movs	r5, #3
 8009d82:	4eac      	ldr	r6, [pc, #688]	; (800a034 <_dtoa_r+0x61c>)
 8009d84:	b957      	cbnz	r7, 8009d9c <_dtoa_r+0x384>
 8009d86:	4642      	mov	r2, r8
 8009d88:	464b      	mov	r3, r9
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	4659      	mov	r1, fp
 8009d8e:	f7f6 fd65 	bl	800085c <__aeabi_ddiv>
 8009d92:	4682      	mov	sl, r0
 8009d94:	468b      	mov	fp, r1
 8009d96:	e028      	b.n	8009dea <_dtoa_r+0x3d2>
 8009d98:	2502      	movs	r5, #2
 8009d9a:	e7f2      	b.n	8009d82 <_dtoa_r+0x36a>
 8009d9c:	07f9      	lsls	r1, r7, #31
 8009d9e:	d508      	bpl.n	8009db2 <_dtoa_r+0x39a>
 8009da0:	4640      	mov	r0, r8
 8009da2:	4649      	mov	r1, r9
 8009da4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009da8:	f7f6 fc2e 	bl	8000608 <__aeabi_dmul>
 8009dac:	3501      	adds	r5, #1
 8009dae:	4680      	mov	r8, r0
 8009db0:	4689      	mov	r9, r1
 8009db2:	107f      	asrs	r7, r7, #1
 8009db4:	3608      	adds	r6, #8
 8009db6:	e7e5      	b.n	8009d84 <_dtoa_r+0x36c>
 8009db8:	f000 809b 	beq.w	8009ef2 <_dtoa_r+0x4da>
 8009dbc:	9b00      	ldr	r3, [sp, #0]
 8009dbe:	4f9d      	ldr	r7, [pc, #628]	; (800a034 <_dtoa_r+0x61c>)
 8009dc0:	425e      	negs	r6, r3
 8009dc2:	4b9b      	ldr	r3, [pc, #620]	; (800a030 <_dtoa_r+0x618>)
 8009dc4:	f006 020f 	and.w	r2, r6, #15
 8009dc8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dd0:	ec51 0b19 	vmov	r0, r1, d9
 8009dd4:	f7f6 fc18 	bl	8000608 <__aeabi_dmul>
 8009dd8:	1136      	asrs	r6, r6, #4
 8009dda:	4682      	mov	sl, r0
 8009ddc:	468b      	mov	fp, r1
 8009dde:	2300      	movs	r3, #0
 8009de0:	2502      	movs	r5, #2
 8009de2:	2e00      	cmp	r6, #0
 8009de4:	d17a      	bne.n	8009edc <_dtoa_r+0x4c4>
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d1d3      	bne.n	8009d92 <_dtoa_r+0x37a>
 8009dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	f000 8082 	beq.w	8009ef6 <_dtoa_r+0x4de>
 8009df2:	4b91      	ldr	r3, [pc, #580]	; (800a038 <_dtoa_r+0x620>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	4650      	mov	r0, sl
 8009df8:	4659      	mov	r1, fp
 8009dfa:	f7f6 fe77 	bl	8000aec <__aeabi_dcmplt>
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	d079      	beq.n	8009ef6 <_dtoa_r+0x4de>
 8009e02:	9b03      	ldr	r3, [sp, #12]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d076      	beq.n	8009ef6 <_dtoa_r+0x4de>
 8009e08:	9b02      	ldr	r3, [sp, #8]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	dd36      	ble.n	8009e7c <_dtoa_r+0x464>
 8009e0e:	9b00      	ldr	r3, [sp, #0]
 8009e10:	4650      	mov	r0, sl
 8009e12:	4659      	mov	r1, fp
 8009e14:	1e5f      	subs	r7, r3, #1
 8009e16:	2200      	movs	r2, #0
 8009e18:	4b88      	ldr	r3, [pc, #544]	; (800a03c <_dtoa_r+0x624>)
 8009e1a:	f7f6 fbf5 	bl	8000608 <__aeabi_dmul>
 8009e1e:	9e02      	ldr	r6, [sp, #8]
 8009e20:	4682      	mov	sl, r0
 8009e22:	468b      	mov	fp, r1
 8009e24:	3501      	adds	r5, #1
 8009e26:	4628      	mov	r0, r5
 8009e28:	f7f6 fb84 	bl	8000534 <__aeabi_i2d>
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	465b      	mov	r3, fp
 8009e30:	f7f6 fbea 	bl	8000608 <__aeabi_dmul>
 8009e34:	4b82      	ldr	r3, [pc, #520]	; (800a040 <_dtoa_r+0x628>)
 8009e36:	2200      	movs	r2, #0
 8009e38:	f7f6 fa30 	bl	800029c <__adddf3>
 8009e3c:	46d0      	mov	r8, sl
 8009e3e:	46d9      	mov	r9, fp
 8009e40:	4682      	mov	sl, r0
 8009e42:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009e46:	2e00      	cmp	r6, #0
 8009e48:	d158      	bne.n	8009efc <_dtoa_r+0x4e4>
 8009e4a:	4b7e      	ldr	r3, [pc, #504]	; (800a044 <_dtoa_r+0x62c>)
 8009e4c:	2200      	movs	r2, #0
 8009e4e:	4640      	mov	r0, r8
 8009e50:	4649      	mov	r1, r9
 8009e52:	f7f6 fa21 	bl	8000298 <__aeabi_dsub>
 8009e56:	4652      	mov	r2, sl
 8009e58:	465b      	mov	r3, fp
 8009e5a:	4680      	mov	r8, r0
 8009e5c:	4689      	mov	r9, r1
 8009e5e:	f7f6 fe63 	bl	8000b28 <__aeabi_dcmpgt>
 8009e62:	2800      	cmp	r0, #0
 8009e64:	f040 8295 	bne.w	800a392 <_dtoa_r+0x97a>
 8009e68:	4652      	mov	r2, sl
 8009e6a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009e6e:	4640      	mov	r0, r8
 8009e70:	4649      	mov	r1, r9
 8009e72:	f7f6 fe3b 	bl	8000aec <__aeabi_dcmplt>
 8009e76:	2800      	cmp	r0, #0
 8009e78:	f040 8289 	bne.w	800a38e <_dtoa_r+0x976>
 8009e7c:	ec5b ab19 	vmov	sl, fp, d9
 8009e80:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	f2c0 8148 	blt.w	800a118 <_dtoa_r+0x700>
 8009e88:	9a00      	ldr	r2, [sp, #0]
 8009e8a:	2a0e      	cmp	r2, #14
 8009e8c:	f300 8144 	bgt.w	800a118 <_dtoa_r+0x700>
 8009e90:	4b67      	ldr	r3, [pc, #412]	; (800a030 <_dtoa_r+0x618>)
 8009e92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009e96:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009e9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	f280 80d5 	bge.w	800a04c <_dtoa_r+0x634>
 8009ea2:	9b03      	ldr	r3, [sp, #12]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	f300 80d1 	bgt.w	800a04c <_dtoa_r+0x634>
 8009eaa:	f040 826f 	bne.w	800a38c <_dtoa_r+0x974>
 8009eae:	4b65      	ldr	r3, [pc, #404]	; (800a044 <_dtoa_r+0x62c>)
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	4640      	mov	r0, r8
 8009eb4:	4649      	mov	r1, r9
 8009eb6:	f7f6 fba7 	bl	8000608 <__aeabi_dmul>
 8009eba:	4652      	mov	r2, sl
 8009ebc:	465b      	mov	r3, fp
 8009ebe:	f7f6 fe29 	bl	8000b14 <__aeabi_dcmpge>
 8009ec2:	9e03      	ldr	r6, [sp, #12]
 8009ec4:	4637      	mov	r7, r6
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	f040 8245 	bne.w	800a356 <_dtoa_r+0x93e>
 8009ecc:	9d01      	ldr	r5, [sp, #4]
 8009ece:	2331      	movs	r3, #49	; 0x31
 8009ed0:	f805 3b01 	strb.w	r3, [r5], #1
 8009ed4:	9b00      	ldr	r3, [sp, #0]
 8009ed6:	3301      	adds	r3, #1
 8009ed8:	9300      	str	r3, [sp, #0]
 8009eda:	e240      	b.n	800a35e <_dtoa_r+0x946>
 8009edc:	07f2      	lsls	r2, r6, #31
 8009ede:	d505      	bpl.n	8009eec <_dtoa_r+0x4d4>
 8009ee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ee4:	f7f6 fb90 	bl	8000608 <__aeabi_dmul>
 8009ee8:	3501      	adds	r5, #1
 8009eea:	2301      	movs	r3, #1
 8009eec:	1076      	asrs	r6, r6, #1
 8009eee:	3708      	adds	r7, #8
 8009ef0:	e777      	b.n	8009de2 <_dtoa_r+0x3ca>
 8009ef2:	2502      	movs	r5, #2
 8009ef4:	e779      	b.n	8009dea <_dtoa_r+0x3d2>
 8009ef6:	9f00      	ldr	r7, [sp, #0]
 8009ef8:	9e03      	ldr	r6, [sp, #12]
 8009efa:	e794      	b.n	8009e26 <_dtoa_r+0x40e>
 8009efc:	9901      	ldr	r1, [sp, #4]
 8009efe:	4b4c      	ldr	r3, [pc, #304]	; (800a030 <_dtoa_r+0x618>)
 8009f00:	4431      	add	r1, r6
 8009f02:	910d      	str	r1, [sp, #52]	; 0x34
 8009f04:	9908      	ldr	r1, [sp, #32]
 8009f06:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009f0a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009f0e:	2900      	cmp	r1, #0
 8009f10:	d043      	beq.n	8009f9a <_dtoa_r+0x582>
 8009f12:	494d      	ldr	r1, [pc, #308]	; (800a048 <_dtoa_r+0x630>)
 8009f14:	2000      	movs	r0, #0
 8009f16:	f7f6 fca1 	bl	800085c <__aeabi_ddiv>
 8009f1a:	4652      	mov	r2, sl
 8009f1c:	465b      	mov	r3, fp
 8009f1e:	f7f6 f9bb 	bl	8000298 <__aeabi_dsub>
 8009f22:	9d01      	ldr	r5, [sp, #4]
 8009f24:	4682      	mov	sl, r0
 8009f26:	468b      	mov	fp, r1
 8009f28:	4649      	mov	r1, r9
 8009f2a:	4640      	mov	r0, r8
 8009f2c:	f7f6 fe1c 	bl	8000b68 <__aeabi_d2iz>
 8009f30:	4606      	mov	r6, r0
 8009f32:	f7f6 faff 	bl	8000534 <__aeabi_i2d>
 8009f36:	4602      	mov	r2, r0
 8009f38:	460b      	mov	r3, r1
 8009f3a:	4640      	mov	r0, r8
 8009f3c:	4649      	mov	r1, r9
 8009f3e:	f7f6 f9ab 	bl	8000298 <__aeabi_dsub>
 8009f42:	3630      	adds	r6, #48	; 0x30
 8009f44:	f805 6b01 	strb.w	r6, [r5], #1
 8009f48:	4652      	mov	r2, sl
 8009f4a:	465b      	mov	r3, fp
 8009f4c:	4680      	mov	r8, r0
 8009f4e:	4689      	mov	r9, r1
 8009f50:	f7f6 fdcc 	bl	8000aec <__aeabi_dcmplt>
 8009f54:	2800      	cmp	r0, #0
 8009f56:	d163      	bne.n	800a020 <_dtoa_r+0x608>
 8009f58:	4642      	mov	r2, r8
 8009f5a:	464b      	mov	r3, r9
 8009f5c:	4936      	ldr	r1, [pc, #216]	; (800a038 <_dtoa_r+0x620>)
 8009f5e:	2000      	movs	r0, #0
 8009f60:	f7f6 f99a 	bl	8000298 <__aeabi_dsub>
 8009f64:	4652      	mov	r2, sl
 8009f66:	465b      	mov	r3, fp
 8009f68:	f7f6 fdc0 	bl	8000aec <__aeabi_dcmplt>
 8009f6c:	2800      	cmp	r0, #0
 8009f6e:	f040 80b5 	bne.w	800a0dc <_dtoa_r+0x6c4>
 8009f72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f74:	429d      	cmp	r5, r3
 8009f76:	d081      	beq.n	8009e7c <_dtoa_r+0x464>
 8009f78:	4b30      	ldr	r3, [pc, #192]	; (800a03c <_dtoa_r+0x624>)
 8009f7a:	2200      	movs	r2, #0
 8009f7c:	4650      	mov	r0, sl
 8009f7e:	4659      	mov	r1, fp
 8009f80:	f7f6 fb42 	bl	8000608 <__aeabi_dmul>
 8009f84:	4b2d      	ldr	r3, [pc, #180]	; (800a03c <_dtoa_r+0x624>)
 8009f86:	4682      	mov	sl, r0
 8009f88:	468b      	mov	fp, r1
 8009f8a:	4640      	mov	r0, r8
 8009f8c:	4649      	mov	r1, r9
 8009f8e:	2200      	movs	r2, #0
 8009f90:	f7f6 fb3a 	bl	8000608 <__aeabi_dmul>
 8009f94:	4680      	mov	r8, r0
 8009f96:	4689      	mov	r9, r1
 8009f98:	e7c6      	b.n	8009f28 <_dtoa_r+0x510>
 8009f9a:	4650      	mov	r0, sl
 8009f9c:	4659      	mov	r1, fp
 8009f9e:	f7f6 fb33 	bl	8000608 <__aeabi_dmul>
 8009fa2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fa4:	9d01      	ldr	r5, [sp, #4]
 8009fa6:	930f      	str	r3, [sp, #60]	; 0x3c
 8009fa8:	4682      	mov	sl, r0
 8009faa:	468b      	mov	fp, r1
 8009fac:	4649      	mov	r1, r9
 8009fae:	4640      	mov	r0, r8
 8009fb0:	f7f6 fdda 	bl	8000b68 <__aeabi_d2iz>
 8009fb4:	4606      	mov	r6, r0
 8009fb6:	f7f6 fabd 	bl	8000534 <__aeabi_i2d>
 8009fba:	3630      	adds	r6, #48	; 0x30
 8009fbc:	4602      	mov	r2, r0
 8009fbe:	460b      	mov	r3, r1
 8009fc0:	4640      	mov	r0, r8
 8009fc2:	4649      	mov	r1, r9
 8009fc4:	f7f6 f968 	bl	8000298 <__aeabi_dsub>
 8009fc8:	f805 6b01 	strb.w	r6, [r5], #1
 8009fcc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fce:	429d      	cmp	r5, r3
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4689      	mov	r9, r1
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	d124      	bne.n	800a024 <_dtoa_r+0x60c>
 8009fda:	4b1b      	ldr	r3, [pc, #108]	; (800a048 <_dtoa_r+0x630>)
 8009fdc:	4650      	mov	r0, sl
 8009fde:	4659      	mov	r1, fp
 8009fe0:	f7f6 f95c 	bl	800029c <__adddf3>
 8009fe4:	4602      	mov	r2, r0
 8009fe6:	460b      	mov	r3, r1
 8009fe8:	4640      	mov	r0, r8
 8009fea:	4649      	mov	r1, r9
 8009fec:	f7f6 fd9c 	bl	8000b28 <__aeabi_dcmpgt>
 8009ff0:	2800      	cmp	r0, #0
 8009ff2:	d173      	bne.n	800a0dc <_dtoa_r+0x6c4>
 8009ff4:	4652      	mov	r2, sl
 8009ff6:	465b      	mov	r3, fp
 8009ff8:	4913      	ldr	r1, [pc, #76]	; (800a048 <_dtoa_r+0x630>)
 8009ffa:	2000      	movs	r0, #0
 8009ffc:	f7f6 f94c 	bl	8000298 <__aeabi_dsub>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	4640      	mov	r0, r8
 800a006:	4649      	mov	r1, r9
 800a008:	f7f6 fd70 	bl	8000aec <__aeabi_dcmplt>
 800a00c:	2800      	cmp	r0, #0
 800a00e:	f43f af35 	beq.w	8009e7c <_dtoa_r+0x464>
 800a012:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a014:	1e6b      	subs	r3, r5, #1
 800a016:	930f      	str	r3, [sp, #60]	; 0x3c
 800a018:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a01c:	2b30      	cmp	r3, #48	; 0x30
 800a01e:	d0f8      	beq.n	800a012 <_dtoa_r+0x5fa>
 800a020:	9700      	str	r7, [sp, #0]
 800a022:	e049      	b.n	800a0b8 <_dtoa_r+0x6a0>
 800a024:	4b05      	ldr	r3, [pc, #20]	; (800a03c <_dtoa_r+0x624>)
 800a026:	f7f6 faef 	bl	8000608 <__aeabi_dmul>
 800a02a:	4680      	mov	r8, r0
 800a02c:	4689      	mov	r9, r1
 800a02e:	e7bd      	b.n	8009fac <_dtoa_r+0x594>
 800a030:	0800be98 	.word	0x0800be98
 800a034:	0800be70 	.word	0x0800be70
 800a038:	3ff00000 	.word	0x3ff00000
 800a03c:	40240000 	.word	0x40240000
 800a040:	401c0000 	.word	0x401c0000
 800a044:	40140000 	.word	0x40140000
 800a048:	3fe00000 	.word	0x3fe00000
 800a04c:	9d01      	ldr	r5, [sp, #4]
 800a04e:	4656      	mov	r6, sl
 800a050:	465f      	mov	r7, fp
 800a052:	4642      	mov	r2, r8
 800a054:	464b      	mov	r3, r9
 800a056:	4630      	mov	r0, r6
 800a058:	4639      	mov	r1, r7
 800a05a:	f7f6 fbff 	bl	800085c <__aeabi_ddiv>
 800a05e:	f7f6 fd83 	bl	8000b68 <__aeabi_d2iz>
 800a062:	4682      	mov	sl, r0
 800a064:	f7f6 fa66 	bl	8000534 <__aeabi_i2d>
 800a068:	4642      	mov	r2, r8
 800a06a:	464b      	mov	r3, r9
 800a06c:	f7f6 facc 	bl	8000608 <__aeabi_dmul>
 800a070:	4602      	mov	r2, r0
 800a072:	460b      	mov	r3, r1
 800a074:	4630      	mov	r0, r6
 800a076:	4639      	mov	r1, r7
 800a078:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a07c:	f7f6 f90c 	bl	8000298 <__aeabi_dsub>
 800a080:	f805 6b01 	strb.w	r6, [r5], #1
 800a084:	9e01      	ldr	r6, [sp, #4]
 800a086:	9f03      	ldr	r7, [sp, #12]
 800a088:	1bae      	subs	r6, r5, r6
 800a08a:	42b7      	cmp	r7, r6
 800a08c:	4602      	mov	r2, r0
 800a08e:	460b      	mov	r3, r1
 800a090:	d135      	bne.n	800a0fe <_dtoa_r+0x6e6>
 800a092:	f7f6 f903 	bl	800029c <__adddf3>
 800a096:	4642      	mov	r2, r8
 800a098:	464b      	mov	r3, r9
 800a09a:	4606      	mov	r6, r0
 800a09c:	460f      	mov	r7, r1
 800a09e:	f7f6 fd43 	bl	8000b28 <__aeabi_dcmpgt>
 800a0a2:	b9d0      	cbnz	r0, 800a0da <_dtoa_r+0x6c2>
 800a0a4:	4642      	mov	r2, r8
 800a0a6:	464b      	mov	r3, r9
 800a0a8:	4630      	mov	r0, r6
 800a0aa:	4639      	mov	r1, r7
 800a0ac:	f7f6 fd14 	bl	8000ad8 <__aeabi_dcmpeq>
 800a0b0:	b110      	cbz	r0, 800a0b8 <_dtoa_r+0x6a0>
 800a0b2:	f01a 0f01 	tst.w	sl, #1
 800a0b6:	d110      	bne.n	800a0da <_dtoa_r+0x6c2>
 800a0b8:	4620      	mov	r0, r4
 800a0ba:	ee18 1a10 	vmov	r1, s16
 800a0be:	f000 fbed 	bl	800a89c <_Bfree>
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	9800      	ldr	r0, [sp, #0]
 800a0c6:	702b      	strb	r3, [r5, #0]
 800a0c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a0ca:	3001      	adds	r0, #1
 800a0cc:	6018      	str	r0, [r3, #0]
 800a0ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	f43f acf1 	beq.w	8009ab8 <_dtoa_r+0xa0>
 800a0d6:	601d      	str	r5, [r3, #0]
 800a0d8:	e4ee      	b.n	8009ab8 <_dtoa_r+0xa0>
 800a0da:	9f00      	ldr	r7, [sp, #0]
 800a0dc:	462b      	mov	r3, r5
 800a0de:	461d      	mov	r5, r3
 800a0e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a0e4:	2a39      	cmp	r2, #57	; 0x39
 800a0e6:	d106      	bne.n	800a0f6 <_dtoa_r+0x6de>
 800a0e8:	9a01      	ldr	r2, [sp, #4]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d1f7      	bne.n	800a0de <_dtoa_r+0x6c6>
 800a0ee:	9901      	ldr	r1, [sp, #4]
 800a0f0:	2230      	movs	r2, #48	; 0x30
 800a0f2:	3701      	adds	r7, #1
 800a0f4:	700a      	strb	r2, [r1, #0]
 800a0f6:	781a      	ldrb	r2, [r3, #0]
 800a0f8:	3201      	adds	r2, #1
 800a0fa:	701a      	strb	r2, [r3, #0]
 800a0fc:	e790      	b.n	800a020 <_dtoa_r+0x608>
 800a0fe:	4ba6      	ldr	r3, [pc, #664]	; (800a398 <_dtoa_r+0x980>)
 800a100:	2200      	movs	r2, #0
 800a102:	f7f6 fa81 	bl	8000608 <__aeabi_dmul>
 800a106:	2200      	movs	r2, #0
 800a108:	2300      	movs	r3, #0
 800a10a:	4606      	mov	r6, r0
 800a10c:	460f      	mov	r7, r1
 800a10e:	f7f6 fce3 	bl	8000ad8 <__aeabi_dcmpeq>
 800a112:	2800      	cmp	r0, #0
 800a114:	d09d      	beq.n	800a052 <_dtoa_r+0x63a>
 800a116:	e7cf      	b.n	800a0b8 <_dtoa_r+0x6a0>
 800a118:	9a08      	ldr	r2, [sp, #32]
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	f000 80d7 	beq.w	800a2ce <_dtoa_r+0x8b6>
 800a120:	9a06      	ldr	r2, [sp, #24]
 800a122:	2a01      	cmp	r2, #1
 800a124:	f300 80ba 	bgt.w	800a29c <_dtoa_r+0x884>
 800a128:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a12a:	2a00      	cmp	r2, #0
 800a12c:	f000 80b2 	beq.w	800a294 <_dtoa_r+0x87c>
 800a130:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a134:	9e07      	ldr	r6, [sp, #28]
 800a136:	9d04      	ldr	r5, [sp, #16]
 800a138:	9a04      	ldr	r2, [sp, #16]
 800a13a:	441a      	add	r2, r3
 800a13c:	9204      	str	r2, [sp, #16]
 800a13e:	9a05      	ldr	r2, [sp, #20]
 800a140:	2101      	movs	r1, #1
 800a142:	441a      	add	r2, r3
 800a144:	4620      	mov	r0, r4
 800a146:	9205      	str	r2, [sp, #20]
 800a148:	f000 fc60 	bl	800aa0c <__i2b>
 800a14c:	4607      	mov	r7, r0
 800a14e:	2d00      	cmp	r5, #0
 800a150:	dd0c      	ble.n	800a16c <_dtoa_r+0x754>
 800a152:	9b05      	ldr	r3, [sp, #20]
 800a154:	2b00      	cmp	r3, #0
 800a156:	dd09      	ble.n	800a16c <_dtoa_r+0x754>
 800a158:	42ab      	cmp	r3, r5
 800a15a:	9a04      	ldr	r2, [sp, #16]
 800a15c:	bfa8      	it	ge
 800a15e:	462b      	movge	r3, r5
 800a160:	1ad2      	subs	r2, r2, r3
 800a162:	9204      	str	r2, [sp, #16]
 800a164:	9a05      	ldr	r2, [sp, #20]
 800a166:	1aed      	subs	r5, r5, r3
 800a168:	1ad3      	subs	r3, r2, r3
 800a16a:	9305      	str	r3, [sp, #20]
 800a16c:	9b07      	ldr	r3, [sp, #28]
 800a16e:	b31b      	cbz	r3, 800a1b8 <_dtoa_r+0x7a0>
 800a170:	9b08      	ldr	r3, [sp, #32]
 800a172:	2b00      	cmp	r3, #0
 800a174:	f000 80af 	beq.w	800a2d6 <_dtoa_r+0x8be>
 800a178:	2e00      	cmp	r6, #0
 800a17a:	dd13      	ble.n	800a1a4 <_dtoa_r+0x78c>
 800a17c:	4639      	mov	r1, r7
 800a17e:	4632      	mov	r2, r6
 800a180:	4620      	mov	r0, r4
 800a182:	f000 fd03 	bl	800ab8c <__pow5mult>
 800a186:	ee18 2a10 	vmov	r2, s16
 800a18a:	4601      	mov	r1, r0
 800a18c:	4607      	mov	r7, r0
 800a18e:	4620      	mov	r0, r4
 800a190:	f000 fc52 	bl	800aa38 <__multiply>
 800a194:	ee18 1a10 	vmov	r1, s16
 800a198:	4680      	mov	r8, r0
 800a19a:	4620      	mov	r0, r4
 800a19c:	f000 fb7e 	bl	800a89c <_Bfree>
 800a1a0:	ee08 8a10 	vmov	s16, r8
 800a1a4:	9b07      	ldr	r3, [sp, #28]
 800a1a6:	1b9a      	subs	r2, r3, r6
 800a1a8:	d006      	beq.n	800a1b8 <_dtoa_r+0x7a0>
 800a1aa:	ee18 1a10 	vmov	r1, s16
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	f000 fcec 	bl	800ab8c <__pow5mult>
 800a1b4:	ee08 0a10 	vmov	s16, r0
 800a1b8:	2101      	movs	r1, #1
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fc26 	bl	800aa0c <__i2b>
 800a1c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	4606      	mov	r6, r0
 800a1c6:	f340 8088 	ble.w	800a2da <_dtoa_r+0x8c2>
 800a1ca:	461a      	mov	r2, r3
 800a1cc:	4601      	mov	r1, r0
 800a1ce:	4620      	mov	r0, r4
 800a1d0:	f000 fcdc 	bl	800ab8c <__pow5mult>
 800a1d4:	9b06      	ldr	r3, [sp, #24]
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	4606      	mov	r6, r0
 800a1da:	f340 8081 	ble.w	800a2e0 <_dtoa_r+0x8c8>
 800a1de:	f04f 0800 	mov.w	r8, #0
 800a1e2:	6933      	ldr	r3, [r6, #16]
 800a1e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a1e8:	6918      	ldr	r0, [r3, #16]
 800a1ea:	f000 fbbf 	bl	800a96c <__hi0bits>
 800a1ee:	f1c0 0020 	rsb	r0, r0, #32
 800a1f2:	9b05      	ldr	r3, [sp, #20]
 800a1f4:	4418      	add	r0, r3
 800a1f6:	f010 001f 	ands.w	r0, r0, #31
 800a1fa:	f000 8092 	beq.w	800a322 <_dtoa_r+0x90a>
 800a1fe:	f1c0 0320 	rsb	r3, r0, #32
 800a202:	2b04      	cmp	r3, #4
 800a204:	f340 808a 	ble.w	800a31c <_dtoa_r+0x904>
 800a208:	f1c0 001c 	rsb	r0, r0, #28
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	4403      	add	r3, r0
 800a210:	9304      	str	r3, [sp, #16]
 800a212:	9b05      	ldr	r3, [sp, #20]
 800a214:	4403      	add	r3, r0
 800a216:	4405      	add	r5, r0
 800a218:	9305      	str	r3, [sp, #20]
 800a21a:	9b04      	ldr	r3, [sp, #16]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	dd07      	ble.n	800a230 <_dtoa_r+0x818>
 800a220:	ee18 1a10 	vmov	r1, s16
 800a224:	461a      	mov	r2, r3
 800a226:	4620      	mov	r0, r4
 800a228:	f000 fd0a 	bl	800ac40 <__lshift>
 800a22c:	ee08 0a10 	vmov	s16, r0
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	2b00      	cmp	r3, #0
 800a234:	dd05      	ble.n	800a242 <_dtoa_r+0x82a>
 800a236:	4631      	mov	r1, r6
 800a238:	461a      	mov	r2, r3
 800a23a:	4620      	mov	r0, r4
 800a23c:	f000 fd00 	bl	800ac40 <__lshift>
 800a240:	4606      	mov	r6, r0
 800a242:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a244:	2b00      	cmp	r3, #0
 800a246:	d06e      	beq.n	800a326 <_dtoa_r+0x90e>
 800a248:	ee18 0a10 	vmov	r0, s16
 800a24c:	4631      	mov	r1, r6
 800a24e:	f000 fd67 	bl	800ad20 <__mcmp>
 800a252:	2800      	cmp	r0, #0
 800a254:	da67      	bge.n	800a326 <_dtoa_r+0x90e>
 800a256:	9b00      	ldr	r3, [sp, #0]
 800a258:	3b01      	subs	r3, #1
 800a25a:	ee18 1a10 	vmov	r1, s16
 800a25e:	9300      	str	r3, [sp, #0]
 800a260:	220a      	movs	r2, #10
 800a262:	2300      	movs	r3, #0
 800a264:	4620      	mov	r0, r4
 800a266:	f000 fb3b 	bl	800a8e0 <__multadd>
 800a26a:	9b08      	ldr	r3, [sp, #32]
 800a26c:	ee08 0a10 	vmov	s16, r0
 800a270:	2b00      	cmp	r3, #0
 800a272:	f000 81b1 	beq.w	800a5d8 <_dtoa_r+0xbc0>
 800a276:	2300      	movs	r3, #0
 800a278:	4639      	mov	r1, r7
 800a27a:	220a      	movs	r2, #10
 800a27c:	4620      	mov	r0, r4
 800a27e:	f000 fb2f 	bl	800a8e0 <__multadd>
 800a282:	9b02      	ldr	r3, [sp, #8]
 800a284:	2b00      	cmp	r3, #0
 800a286:	4607      	mov	r7, r0
 800a288:	f300 808e 	bgt.w	800a3a8 <_dtoa_r+0x990>
 800a28c:	9b06      	ldr	r3, [sp, #24]
 800a28e:	2b02      	cmp	r3, #2
 800a290:	dc51      	bgt.n	800a336 <_dtoa_r+0x91e>
 800a292:	e089      	b.n	800a3a8 <_dtoa_r+0x990>
 800a294:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a296:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a29a:	e74b      	b.n	800a134 <_dtoa_r+0x71c>
 800a29c:	9b03      	ldr	r3, [sp, #12]
 800a29e:	1e5e      	subs	r6, r3, #1
 800a2a0:	9b07      	ldr	r3, [sp, #28]
 800a2a2:	42b3      	cmp	r3, r6
 800a2a4:	bfbf      	itttt	lt
 800a2a6:	9b07      	ldrlt	r3, [sp, #28]
 800a2a8:	9607      	strlt	r6, [sp, #28]
 800a2aa:	1af2      	sublt	r2, r6, r3
 800a2ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800a2ae:	bfb6      	itet	lt
 800a2b0:	189b      	addlt	r3, r3, r2
 800a2b2:	1b9e      	subge	r6, r3, r6
 800a2b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800a2b6:	9b03      	ldr	r3, [sp, #12]
 800a2b8:	bfb8      	it	lt
 800a2ba:	2600      	movlt	r6, #0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	bfb7      	itett	lt
 800a2c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800a2c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800a2c8:	1a9d      	sublt	r5, r3, r2
 800a2ca:	2300      	movlt	r3, #0
 800a2cc:	e734      	b.n	800a138 <_dtoa_r+0x720>
 800a2ce:	9e07      	ldr	r6, [sp, #28]
 800a2d0:	9d04      	ldr	r5, [sp, #16]
 800a2d2:	9f08      	ldr	r7, [sp, #32]
 800a2d4:	e73b      	b.n	800a14e <_dtoa_r+0x736>
 800a2d6:	9a07      	ldr	r2, [sp, #28]
 800a2d8:	e767      	b.n	800a1aa <_dtoa_r+0x792>
 800a2da:	9b06      	ldr	r3, [sp, #24]
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	dc18      	bgt.n	800a312 <_dtoa_r+0x8fa>
 800a2e0:	f1ba 0f00 	cmp.w	sl, #0
 800a2e4:	d115      	bne.n	800a312 <_dtoa_r+0x8fa>
 800a2e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2ea:	b993      	cbnz	r3, 800a312 <_dtoa_r+0x8fa>
 800a2ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a2f0:	0d1b      	lsrs	r3, r3, #20
 800a2f2:	051b      	lsls	r3, r3, #20
 800a2f4:	b183      	cbz	r3, 800a318 <_dtoa_r+0x900>
 800a2f6:	9b04      	ldr	r3, [sp, #16]
 800a2f8:	3301      	adds	r3, #1
 800a2fa:	9304      	str	r3, [sp, #16]
 800a2fc:	9b05      	ldr	r3, [sp, #20]
 800a2fe:	3301      	adds	r3, #1
 800a300:	9305      	str	r3, [sp, #20]
 800a302:	f04f 0801 	mov.w	r8, #1
 800a306:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a308:	2b00      	cmp	r3, #0
 800a30a:	f47f af6a 	bne.w	800a1e2 <_dtoa_r+0x7ca>
 800a30e:	2001      	movs	r0, #1
 800a310:	e76f      	b.n	800a1f2 <_dtoa_r+0x7da>
 800a312:	f04f 0800 	mov.w	r8, #0
 800a316:	e7f6      	b.n	800a306 <_dtoa_r+0x8ee>
 800a318:	4698      	mov	r8, r3
 800a31a:	e7f4      	b.n	800a306 <_dtoa_r+0x8ee>
 800a31c:	f43f af7d 	beq.w	800a21a <_dtoa_r+0x802>
 800a320:	4618      	mov	r0, r3
 800a322:	301c      	adds	r0, #28
 800a324:	e772      	b.n	800a20c <_dtoa_r+0x7f4>
 800a326:	9b03      	ldr	r3, [sp, #12]
 800a328:	2b00      	cmp	r3, #0
 800a32a:	dc37      	bgt.n	800a39c <_dtoa_r+0x984>
 800a32c:	9b06      	ldr	r3, [sp, #24]
 800a32e:	2b02      	cmp	r3, #2
 800a330:	dd34      	ble.n	800a39c <_dtoa_r+0x984>
 800a332:	9b03      	ldr	r3, [sp, #12]
 800a334:	9302      	str	r3, [sp, #8]
 800a336:	9b02      	ldr	r3, [sp, #8]
 800a338:	b96b      	cbnz	r3, 800a356 <_dtoa_r+0x93e>
 800a33a:	4631      	mov	r1, r6
 800a33c:	2205      	movs	r2, #5
 800a33e:	4620      	mov	r0, r4
 800a340:	f000 face 	bl	800a8e0 <__multadd>
 800a344:	4601      	mov	r1, r0
 800a346:	4606      	mov	r6, r0
 800a348:	ee18 0a10 	vmov	r0, s16
 800a34c:	f000 fce8 	bl	800ad20 <__mcmp>
 800a350:	2800      	cmp	r0, #0
 800a352:	f73f adbb 	bgt.w	8009ecc <_dtoa_r+0x4b4>
 800a356:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a358:	9d01      	ldr	r5, [sp, #4]
 800a35a:	43db      	mvns	r3, r3
 800a35c:	9300      	str	r3, [sp, #0]
 800a35e:	f04f 0800 	mov.w	r8, #0
 800a362:	4631      	mov	r1, r6
 800a364:	4620      	mov	r0, r4
 800a366:	f000 fa99 	bl	800a89c <_Bfree>
 800a36a:	2f00      	cmp	r7, #0
 800a36c:	f43f aea4 	beq.w	800a0b8 <_dtoa_r+0x6a0>
 800a370:	f1b8 0f00 	cmp.w	r8, #0
 800a374:	d005      	beq.n	800a382 <_dtoa_r+0x96a>
 800a376:	45b8      	cmp	r8, r7
 800a378:	d003      	beq.n	800a382 <_dtoa_r+0x96a>
 800a37a:	4641      	mov	r1, r8
 800a37c:	4620      	mov	r0, r4
 800a37e:	f000 fa8d 	bl	800a89c <_Bfree>
 800a382:	4639      	mov	r1, r7
 800a384:	4620      	mov	r0, r4
 800a386:	f000 fa89 	bl	800a89c <_Bfree>
 800a38a:	e695      	b.n	800a0b8 <_dtoa_r+0x6a0>
 800a38c:	2600      	movs	r6, #0
 800a38e:	4637      	mov	r7, r6
 800a390:	e7e1      	b.n	800a356 <_dtoa_r+0x93e>
 800a392:	9700      	str	r7, [sp, #0]
 800a394:	4637      	mov	r7, r6
 800a396:	e599      	b.n	8009ecc <_dtoa_r+0x4b4>
 800a398:	40240000 	.word	0x40240000
 800a39c:	9b08      	ldr	r3, [sp, #32]
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	f000 80ca 	beq.w	800a538 <_dtoa_r+0xb20>
 800a3a4:	9b03      	ldr	r3, [sp, #12]
 800a3a6:	9302      	str	r3, [sp, #8]
 800a3a8:	2d00      	cmp	r5, #0
 800a3aa:	dd05      	ble.n	800a3b8 <_dtoa_r+0x9a0>
 800a3ac:	4639      	mov	r1, r7
 800a3ae:	462a      	mov	r2, r5
 800a3b0:	4620      	mov	r0, r4
 800a3b2:	f000 fc45 	bl	800ac40 <__lshift>
 800a3b6:	4607      	mov	r7, r0
 800a3b8:	f1b8 0f00 	cmp.w	r8, #0
 800a3bc:	d05b      	beq.n	800a476 <_dtoa_r+0xa5e>
 800a3be:	6879      	ldr	r1, [r7, #4]
 800a3c0:	4620      	mov	r0, r4
 800a3c2:	f000 fa2b 	bl	800a81c <_Balloc>
 800a3c6:	4605      	mov	r5, r0
 800a3c8:	b928      	cbnz	r0, 800a3d6 <_dtoa_r+0x9be>
 800a3ca:	4b87      	ldr	r3, [pc, #540]	; (800a5e8 <_dtoa_r+0xbd0>)
 800a3cc:	4602      	mov	r2, r0
 800a3ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a3d2:	f7ff bb3b 	b.w	8009a4c <_dtoa_r+0x34>
 800a3d6:	693a      	ldr	r2, [r7, #16]
 800a3d8:	3202      	adds	r2, #2
 800a3da:	0092      	lsls	r2, r2, #2
 800a3dc:	f107 010c 	add.w	r1, r7, #12
 800a3e0:	300c      	adds	r0, #12
 800a3e2:	f000 fa0d 	bl	800a800 <memcpy>
 800a3e6:	2201      	movs	r2, #1
 800a3e8:	4629      	mov	r1, r5
 800a3ea:	4620      	mov	r0, r4
 800a3ec:	f000 fc28 	bl	800ac40 <__lshift>
 800a3f0:	9b01      	ldr	r3, [sp, #4]
 800a3f2:	f103 0901 	add.w	r9, r3, #1
 800a3f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a3fa:	4413      	add	r3, r2
 800a3fc:	9305      	str	r3, [sp, #20]
 800a3fe:	f00a 0301 	and.w	r3, sl, #1
 800a402:	46b8      	mov	r8, r7
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	4607      	mov	r7, r0
 800a408:	4631      	mov	r1, r6
 800a40a:	ee18 0a10 	vmov	r0, s16
 800a40e:	f7ff fa77 	bl	8009900 <quorem>
 800a412:	4641      	mov	r1, r8
 800a414:	9002      	str	r0, [sp, #8]
 800a416:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a41a:	ee18 0a10 	vmov	r0, s16
 800a41e:	f000 fc7f 	bl	800ad20 <__mcmp>
 800a422:	463a      	mov	r2, r7
 800a424:	9003      	str	r0, [sp, #12]
 800a426:	4631      	mov	r1, r6
 800a428:	4620      	mov	r0, r4
 800a42a:	f000 fc95 	bl	800ad58 <__mdiff>
 800a42e:	68c2      	ldr	r2, [r0, #12]
 800a430:	f109 3bff 	add.w	fp, r9, #4294967295
 800a434:	4605      	mov	r5, r0
 800a436:	bb02      	cbnz	r2, 800a47a <_dtoa_r+0xa62>
 800a438:	4601      	mov	r1, r0
 800a43a:	ee18 0a10 	vmov	r0, s16
 800a43e:	f000 fc6f 	bl	800ad20 <__mcmp>
 800a442:	4602      	mov	r2, r0
 800a444:	4629      	mov	r1, r5
 800a446:	4620      	mov	r0, r4
 800a448:	9207      	str	r2, [sp, #28]
 800a44a:	f000 fa27 	bl	800a89c <_Bfree>
 800a44e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a452:	ea43 0102 	orr.w	r1, r3, r2
 800a456:	9b04      	ldr	r3, [sp, #16]
 800a458:	430b      	orrs	r3, r1
 800a45a:	464d      	mov	r5, r9
 800a45c:	d10f      	bne.n	800a47e <_dtoa_r+0xa66>
 800a45e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a462:	d02a      	beq.n	800a4ba <_dtoa_r+0xaa2>
 800a464:	9b03      	ldr	r3, [sp, #12]
 800a466:	2b00      	cmp	r3, #0
 800a468:	dd02      	ble.n	800a470 <_dtoa_r+0xa58>
 800a46a:	9b02      	ldr	r3, [sp, #8]
 800a46c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a470:	f88b a000 	strb.w	sl, [fp]
 800a474:	e775      	b.n	800a362 <_dtoa_r+0x94a>
 800a476:	4638      	mov	r0, r7
 800a478:	e7ba      	b.n	800a3f0 <_dtoa_r+0x9d8>
 800a47a:	2201      	movs	r2, #1
 800a47c:	e7e2      	b.n	800a444 <_dtoa_r+0xa2c>
 800a47e:	9b03      	ldr	r3, [sp, #12]
 800a480:	2b00      	cmp	r3, #0
 800a482:	db04      	blt.n	800a48e <_dtoa_r+0xa76>
 800a484:	9906      	ldr	r1, [sp, #24]
 800a486:	430b      	orrs	r3, r1
 800a488:	9904      	ldr	r1, [sp, #16]
 800a48a:	430b      	orrs	r3, r1
 800a48c:	d122      	bne.n	800a4d4 <_dtoa_r+0xabc>
 800a48e:	2a00      	cmp	r2, #0
 800a490:	ddee      	ble.n	800a470 <_dtoa_r+0xa58>
 800a492:	ee18 1a10 	vmov	r1, s16
 800a496:	2201      	movs	r2, #1
 800a498:	4620      	mov	r0, r4
 800a49a:	f000 fbd1 	bl	800ac40 <__lshift>
 800a49e:	4631      	mov	r1, r6
 800a4a0:	ee08 0a10 	vmov	s16, r0
 800a4a4:	f000 fc3c 	bl	800ad20 <__mcmp>
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	dc03      	bgt.n	800a4b4 <_dtoa_r+0xa9c>
 800a4ac:	d1e0      	bne.n	800a470 <_dtoa_r+0xa58>
 800a4ae:	f01a 0f01 	tst.w	sl, #1
 800a4b2:	d0dd      	beq.n	800a470 <_dtoa_r+0xa58>
 800a4b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4b8:	d1d7      	bne.n	800a46a <_dtoa_r+0xa52>
 800a4ba:	2339      	movs	r3, #57	; 0x39
 800a4bc:	f88b 3000 	strb.w	r3, [fp]
 800a4c0:	462b      	mov	r3, r5
 800a4c2:	461d      	mov	r5, r3
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a4ca:	2a39      	cmp	r2, #57	; 0x39
 800a4cc:	d071      	beq.n	800a5b2 <_dtoa_r+0xb9a>
 800a4ce:	3201      	adds	r2, #1
 800a4d0:	701a      	strb	r2, [r3, #0]
 800a4d2:	e746      	b.n	800a362 <_dtoa_r+0x94a>
 800a4d4:	2a00      	cmp	r2, #0
 800a4d6:	dd07      	ble.n	800a4e8 <_dtoa_r+0xad0>
 800a4d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a4dc:	d0ed      	beq.n	800a4ba <_dtoa_r+0xaa2>
 800a4de:	f10a 0301 	add.w	r3, sl, #1
 800a4e2:	f88b 3000 	strb.w	r3, [fp]
 800a4e6:	e73c      	b.n	800a362 <_dtoa_r+0x94a>
 800a4e8:	9b05      	ldr	r3, [sp, #20]
 800a4ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a4ee:	4599      	cmp	r9, r3
 800a4f0:	d047      	beq.n	800a582 <_dtoa_r+0xb6a>
 800a4f2:	ee18 1a10 	vmov	r1, s16
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	220a      	movs	r2, #10
 800a4fa:	4620      	mov	r0, r4
 800a4fc:	f000 f9f0 	bl	800a8e0 <__multadd>
 800a500:	45b8      	cmp	r8, r7
 800a502:	ee08 0a10 	vmov	s16, r0
 800a506:	f04f 0300 	mov.w	r3, #0
 800a50a:	f04f 020a 	mov.w	r2, #10
 800a50e:	4641      	mov	r1, r8
 800a510:	4620      	mov	r0, r4
 800a512:	d106      	bne.n	800a522 <_dtoa_r+0xb0a>
 800a514:	f000 f9e4 	bl	800a8e0 <__multadd>
 800a518:	4680      	mov	r8, r0
 800a51a:	4607      	mov	r7, r0
 800a51c:	f109 0901 	add.w	r9, r9, #1
 800a520:	e772      	b.n	800a408 <_dtoa_r+0x9f0>
 800a522:	f000 f9dd 	bl	800a8e0 <__multadd>
 800a526:	4639      	mov	r1, r7
 800a528:	4680      	mov	r8, r0
 800a52a:	2300      	movs	r3, #0
 800a52c:	220a      	movs	r2, #10
 800a52e:	4620      	mov	r0, r4
 800a530:	f000 f9d6 	bl	800a8e0 <__multadd>
 800a534:	4607      	mov	r7, r0
 800a536:	e7f1      	b.n	800a51c <_dtoa_r+0xb04>
 800a538:	9b03      	ldr	r3, [sp, #12]
 800a53a:	9302      	str	r3, [sp, #8]
 800a53c:	9d01      	ldr	r5, [sp, #4]
 800a53e:	ee18 0a10 	vmov	r0, s16
 800a542:	4631      	mov	r1, r6
 800a544:	f7ff f9dc 	bl	8009900 <quorem>
 800a548:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a54c:	9b01      	ldr	r3, [sp, #4]
 800a54e:	f805 ab01 	strb.w	sl, [r5], #1
 800a552:	1aea      	subs	r2, r5, r3
 800a554:	9b02      	ldr	r3, [sp, #8]
 800a556:	4293      	cmp	r3, r2
 800a558:	dd09      	ble.n	800a56e <_dtoa_r+0xb56>
 800a55a:	ee18 1a10 	vmov	r1, s16
 800a55e:	2300      	movs	r3, #0
 800a560:	220a      	movs	r2, #10
 800a562:	4620      	mov	r0, r4
 800a564:	f000 f9bc 	bl	800a8e0 <__multadd>
 800a568:	ee08 0a10 	vmov	s16, r0
 800a56c:	e7e7      	b.n	800a53e <_dtoa_r+0xb26>
 800a56e:	9b02      	ldr	r3, [sp, #8]
 800a570:	2b00      	cmp	r3, #0
 800a572:	bfc8      	it	gt
 800a574:	461d      	movgt	r5, r3
 800a576:	9b01      	ldr	r3, [sp, #4]
 800a578:	bfd8      	it	le
 800a57a:	2501      	movle	r5, #1
 800a57c:	441d      	add	r5, r3
 800a57e:	f04f 0800 	mov.w	r8, #0
 800a582:	ee18 1a10 	vmov	r1, s16
 800a586:	2201      	movs	r2, #1
 800a588:	4620      	mov	r0, r4
 800a58a:	f000 fb59 	bl	800ac40 <__lshift>
 800a58e:	4631      	mov	r1, r6
 800a590:	ee08 0a10 	vmov	s16, r0
 800a594:	f000 fbc4 	bl	800ad20 <__mcmp>
 800a598:	2800      	cmp	r0, #0
 800a59a:	dc91      	bgt.n	800a4c0 <_dtoa_r+0xaa8>
 800a59c:	d102      	bne.n	800a5a4 <_dtoa_r+0xb8c>
 800a59e:	f01a 0f01 	tst.w	sl, #1
 800a5a2:	d18d      	bne.n	800a4c0 <_dtoa_r+0xaa8>
 800a5a4:	462b      	mov	r3, r5
 800a5a6:	461d      	mov	r5, r3
 800a5a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a5ac:	2a30      	cmp	r2, #48	; 0x30
 800a5ae:	d0fa      	beq.n	800a5a6 <_dtoa_r+0xb8e>
 800a5b0:	e6d7      	b.n	800a362 <_dtoa_r+0x94a>
 800a5b2:	9a01      	ldr	r2, [sp, #4]
 800a5b4:	429a      	cmp	r2, r3
 800a5b6:	d184      	bne.n	800a4c2 <_dtoa_r+0xaaa>
 800a5b8:	9b00      	ldr	r3, [sp, #0]
 800a5ba:	3301      	adds	r3, #1
 800a5bc:	9300      	str	r3, [sp, #0]
 800a5be:	2331      	movs	r3, #49	; 0x31
 800a5c0:	7013      	strb	r3, [r2, #0]
 800a5c2:	e6ce      	b.n	800a362 <_dtoa_r+0x94a>
 800a5c4:	4b09      	ldr	r3, [pc, #36]	; (800a5ec <_dtoa_r+0xbd4>)
 800a5c6:	f7ff ba95 	b.w	8009af4 <_dtoa_r+0xdc>
 800a5ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	f47f aa6e 	bne.w	8009aae <_dtoa_r+0x96>
 800a5d2:	4b07      	ldr	r3, [pc, #28]	; (800a5f0 <_dtoa_r+0xbd8>)
 800a5d4:	f7ff ba8e 	b.w	8009af4 <_dtoa_r+0xdc>
 800a5d8:	9b02      	ldr	r3, [sp, #8]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	dcae      	bgt.n	800a53c <_dtoa_r+0xb24>
 800a5de:	9b06      	ldr	r3, [sp, #24]
 800a5e0:	2b02      	cmp	r3, #2
 800a5e2:	f73f aea8 	bgt.w	800a336 <_dtoa_r+0x91e>
 800a5e6:	e7a9      	b.n	800a53c <_dtoa_r+0xb24>
 800a5e8:	0800bda3 	.word	0x0800bda3
 800a5ec:	0800bd00 	.word	0x0800bd00
 800a5f0:	0800bd24 	.word	0x0800bd24

0800a5f4 <std>:
 800a5f4:	2300      	movs	r3, #0
 800a5f6:	b510      	push	{r4, lr}
 800a5f8:	4604      	mov	r4, r0
 800a5fa:	e9c0 3300 	strd	r3, r3, [r0]
 800a5fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a602:	6083      	str	r3, [r0, #8]
 800a604:	8181      	strh	r1, [r0, #12]
 800a606:	6643      	str	r3, [r0, #100]	; 0x64
 800a608:	81c2      	strh	r2, [r0, #14]
 800a60a:	6183      	str	r3, [r0, #24]
 800a60c:	4619      	mov	r1, r3
 800a60e:	2208      	movs	r2, #8
 800a610:	305c      	adds	r0, #92	; 0x5c
 800a612:	f7fe fceb 	bl	8008fec <memset>
 800a616:	4b05      	ldr	r3, [pc, #20]	; (800a62c <std+0x38>)
 800a618:	6263      	str	r3, [r4, #36]	; 0x24
 800a61a:	4b05      	ldr	r3, [pc, #20]	; (800a630 <std+0x3c>)
 800a61c:	62a3      	str	r3, [r4, #40]	; 0x28
 800a61e:	4b05      	ldr	r3, [pc, #20]	; (800a634 <std+0x40>)
 800a620:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a622:	4b05      	ldr	r3, [pc, #20]	; (800a638 <std+0x44>)
 800a624:	6224      	str	r4, [r4, #32]
 800a626:	6323      	str	r3, [r4, #48]	; 0x30
 800a628:	bd10      	pop	{r4, pc}
 800a62a:	bf00      	nop
 800a62c:	0800b3e5 	.word	0x0800b3e5
 800a630:	0800b407 	.word	0x0800b407
 800a634:	0800b43f 	.word	0x0800b43f
 800a638:	0800b463 	.word	0x0800b463

0800a63c <_cleanup_r>:
 800a63c:	4901      	ldr	r1, [pc, #4]	; (800a644 <_cleanup_r+0x8>)
 800a63e:	f000 b8af 	b.w	800a7a0 <_fwalk_reent>
 800a642:	bf00      	nop
 800a644:	0800b779 	.word	0x0800b779

0800a648 <__sfmoreglue>:
 800a648:	b570      	push	{r4, r5, r6, lr}
 800a64a:	2268      	movs	r2, #104	; 0x68
 800a64c:	1e4d      	subs	r5, r1, #1
 800a64e:	4355      	muls	r5, r2
 800a650:	460e      	mov	r6, r1
 800a652:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a656:	f000 fce7 	bl	800b028 <_malloc_r>
 800a65a:	4604      	mov	r4, r0
 800a65c:	b140      	cbz	r0, 800a670 <__sfmoreglue+0x28>
 800a65e:	2100      	movs	r1, #0
 800a660:	e9c0 1600 	strd	r1, r6, [r0]
 800a664:	300c      	adds	r0, #12
 800a666:	60a0      	str	r0, [r4, #8]
 800a668:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a66c:	f7fe fcbe 	bl	8008fec <memset>
 800a670:	4620      	mov	r0, r4
 800a672:	bd70      	pop	{r4, r5, r6, pc}

0800a674 <__sfp_lock_acquire>:
 800a674:	4801      	ldr	r0, [pc, #4]	; (800a67c <__sfp_lock_acquire+0x8>)
 800a676:	f000 b8b8 	b.w	800a7ea <__retarget_lock_acquire_recursive>
 800a67a:	bf00      	nop
 800a67c:	20000521 	.word	0x20000521

0800a680 <__sfp_lock_release>:
 800a680:	4801      	ldr	r0, [pc, #4]	; (800a688 <__sfp_lock_release+0x8>)
 800a682:	f000 b8b3 	b.w	800a7ec <__retarget_lock_release_recursive>
 800a686:	bf00      	nop
 800a688:	20000521 	.word	0x20000521

0800a68c <__sinit_lock_acquire>:
 800a68c:	4801      	ldr	r0, [pc, #4]	; (800a694 <__sinit_lock_acquire+0x8>)
 800a68e:	f000 b8ac 	b.w	800a7ea <__retarget_lock_acquire_recursive>
 800a692:	bf00      	nop
 800a694:	20000522 	.word	0x20000522

0800a698 <__sinit_lock_release>:
 800a698:	4801      	ldr	r0, [pc, #4]	; (800a6a0 <__sinit_lock_release+0x8>)
 800a69a:	f000 b8a7 	b.w	800a7ec <__retarget_lock_release_recursive>
 800a69e:	bf00      	nop
 800a6a0:	20000522 	.word	0x20000522

0800a6a4 <__sinit>:
 800a6a4:	b510      	push	{r4, lr}
 800a6a6:	4604      	mov	r4, r0
 800a6a8:	f7ff fff0 	bl	800a68c <__sinit_lock_acquire>
 800a6ac:	69a3      	ldr	r3, [r4, #24]
 800a6ae:	b11b      	cbz	r3, 800a6b8 <__sinit+0x14>
 800a6b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6b4:	f7ff bff0 	b.w	800a698 <__sinit_lock_release>
 800a6b8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6bc:	6523      	str	r3, [r4, #80]	; 0x50
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <__sinit+0x68>)
 800a6c0:	4a13      	ldr	r2, [pc, #76]	; (800a710 <__sinit+0x6c>)
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6c6:	42a3      	cmp	r3, r4
 800a6c8:	bf04      	itt	eq
 800a6ca:	2301      	moveq	r3, #1
 800a6cc:	61a3      	streq	r3, [r4, #24]
 800a6ce:	4620      	mov	r0, r4
 800a6d0:	f000 f820 	bl	800a714 <__sfp>
 800a6d4:	6060      	str	r0, [r4, #4]
 800a6d6:	4620      	mov	r0, r4
 800a6d8:	f000 f81c 	bl	800a714 <__sfp>
 800a6dc:	60a0      	str	r0, [r4, #8]
 800a6de:	4620      	mov	r0, r4
 800a6e0:	f000 f818 	bl	800a714 <__sfp>
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	60e0      	str	r0, [r4, #12]
 800a6e8:	2104      	movs	r1, #4
 800a6ea:	6860      	ldr	r0, [r4, #4]
 800a6ec:	f7ff ff82 	bl	800a5f4 <std>
 800a6f0:	68a0      	ldr	r0, [r4, #8]
 800a6f2:	2201      	movs	r2, #1
 800a6f4:	2109      	movs	r1, #9
 800a6f6:	f7ff ff7d 	bl	800a5f4 <std>
 800a6fa:	68e0      	ldr	r0, [r4, #12]
 800a6fc:	2202      	movs	r2, #2
 800a6fe:	2112      	movs	r1, #18
 800a700:	f7ff ff78 	bl	800a5f4 <std>
 800a704:	2301      	movs	r3, #1
 800a706:	61a3      	str	r3, [r4, #24]
 800a708:	e7d2      	b.n	800a6b0 <__sinit+0xc>
 800a70a:	bf00      	nop
 800a70c:	0800bcec 	.word	0x0800bcec
 800a710:	0800a63d 	.word	0x0800a63d

0800a714 <__sfp>:
 800a714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a716:	4607      	mov	r7, r0
 800a718:	f7ff ffac 	bl	800a674 <__sfp_lock_acquire>
 800a71c:	4b1e      	ldr	r3, [pc, #120]	; (800a798 <__sfp+0x84>)
 800a71e:	681e      	ldr	r6, [r3, #0]
 800a720:	69b3      	ldr	r3, [r6, #24]
 800a722:	b913      	cbnz	r3, 800a72a <__sfp+0x16>
 800a724:	4630      	mov	r0, r6
 800a726:	f7ff ffbd 	bl	800a6a4 <__sinit>
 800a72a:	3648      	adds	r6, #72	; 0x48
 800a72c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a730:	3b01      	subs	r3, #1
 800a732:	d503      	bpl.n	800a73c <__sfp+0x28>
 800a734:	6833      	ldr	r3, [r6, #0]
 800a736:	b30b      	cbz	r3, 800a77c <__sfp+0x68>
 800a738:	6836      	ldr	r6, [r6, #0]
 800a73a:	e7f7      	b.n	800a72c <__sfp+0x18>
 800a73c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a740:	b9d5      	cbnz	r5, 800a778 <__sfp+0x64>
 800a742:	4b16      	ldr	r3, [pc, #88]	; (800a79c <__sfp+0x88>)
 800a744:	60e3      	str	r3, [r4, #12]
 800a746:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a74a:	6665      	str	r5, [r4, #100]	; 0x64
 800a74c:	f000 f84c 	bl	800a7e8 <__retarget_lock_init_recursive>
 800a750:	f7ff ff96 	bl	800a680 <__sfp_lock_release>
 800a754:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a758:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a75c:	6025      	str	r5, [r4, #0]
 800a75e:	61a5      	str	r5, [r4, #24]
 800a760:	2208      	movs	r2, #8
 800a762:	4629      	mov	r1, r5
 800a764:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a768:	f7fe fc40 	bl	8008fec <memset>
 800a76c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a770:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a774:	4620      	mov	r0, r4
 800a776:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a778:	3468      	adds	r4, #104	; 0x68
 800a77a:	e7d9      	b.n	800a730 <__sfp+0x1c>
 800a77c:	2104      	movs	r1, #4
 800a77e:	4638      	mov	r0, r7
 800a780:	f7ff ff62 	bl	800a648 <__sfmoreglue>
 800a784:	4604      	mov	r4, r0
 800a786:	6030      	str	r0, [r6, #0]
 800a788:	2800      	cmp	r0, #0
 800a78a:	d1d5      	bne.n	800a738 <__sfp+0x24>
 800a78c:	f7ff ff78 	bl	800a680 <__sfp_lock_release>
 800a790:	230c      	movs	r3, #12
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	e7ee      	b.n	800a774 <__sfp+0x60>
 800a796:	bf00      	nop
 800a798:	0800bcec 	.word	0x0800bcec
 800a79c:	ffff0001 	.word	0xffff0001

0800a7a0 <_fwalk_reent>:
 800a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	4688      	mov	r8, r1
 800a7a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7ac:	2700      	movs	r7, #0
 800a7ae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7b2:	f1b9 0901 	subs.w	r9, r9, #1
 800a7b6:	d505      	bpl.n	800a7c4 <_fwalk_reent+0x24>
 800a7b8:	6824      	ldr	r4, [r4, #0]
 800a7ba:	2c00      	cmp	r4, #0
 800a7bc:	d1f7      	bne.n	800a7ae <_fwalk_reent+0xe>
 800a7be:	4638      	mov	r0, r7
 800a7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7c4:	89ab      	ldrh	r3, [r5, #12]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d907      	bls.n	800a7da <_fwalk_reent+0x3a>
 800a7ca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7ce:	3301      	adds	r3, #1
 800a7d0:	d003      	beq.n	800a7da <_fwalk_reent+0x3a>
 800a7d2:	4629      	mov	r1, r5
 800a7d4:	4630      	mov	r0, r6
 800a7d6:	47c0      	blx	r8
 800a7d8:	4307      	orrs	r7, r0
 800a7da:	3568      	adds	r5, #104	; 0x68
 800a7dc:	e7e9      	b.n	800a7b2 <_fwalk_reent+0x12>
	...

0800a7e0 <_localeconv_r>:
 800a7e0:	4800      	ldr	r0, [pc, #0]	; (800a7e4 <_localeconv_r+0x4>)
 800a7e2:	4770      	bx	lr
 800a7e4:	20000168 	.word	0x20000168

0800a7e8 <__retarget_lock_init_recursive>:
 800a7e8:	4770      	bx	lr

0800a7ea <__retarget_lock_acquire_recursive>:
 800a7ea:	4770      	bx	lr

0800a7ec <__retarget_lock_release_recursive>:
 800a7ec:	4770      	bx	lr
	...

0800a7f0 <malloc>:
 800a7f0:	4b02      	ldr	r3, [pc, #8]	; (800a7fc <malloc+0xc>)
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	6818      	ldr	r0, [r3, #0]
 800a7f6:	f000 bc17 	b.w	800b028 <_malloc_r>
 800a7fa:	bf00      	nop
 800a7fc:	20000014 	.word	0x20000014

0800a800 <memcpy>:
 800a800:	440a      	add	r2, r1
 800a802:	4291      	cmp	r1, r2
 800a804:	f100 33ff 	add.w	r3, r0, #4294967295
 800a808:	d100      	bne.n	800a80c <memcpy+0xc>
 800a80a:	4770      	bx	lr
 800a80c:	b510      	push	{r4, lr}
 800a80e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a812:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a816:	4291      	cmp	r1, r2
 800a818:	d1f9      	bne.n	800a80e <memcpy+0xe>
 800a81a:	bd10      	pop	{r4, pc}

0800a81c <_Balloc>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a820:	4604      	mov	r4, r0
 800a822:	460d      	mov	r5, r1
 800a824:	b976      	cbnz	r6, 800a844 <_Balloc+0x28>
 800a826:	2010      	movs	r0, #16
 800a828:	f7ff ffe2 	bl	800a7f0 <malloc>
 800a82c:	4602      	mov	r2, r0
 800a82e:	6260      	str	r0, [r4, #36]	; 0x24
 800a830:	b920      	cbnz	r0, 800a83c <_Balloc+0x20>
 800a832:	4b18      	ldr	r3, [pc, #96]	; (800a894 <_Balloc+0x78>)
 800a834:	4818      	ldr	r0, [pc, #96]	; (800a898 <_Balloc+0x7c>)
 800a836:	2166      	movs	r1, #102	; 0x66
 800a838:	f000 feea 	bl	800b610 <__assert_func>
 800a83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a840:	6006      	str	r6, [r0, #0]
 800a842:	60c6      	str	r6, [r0, #12]
 800a844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a846:	68f3      	ldr	r3, [r6, #12]
 800a848:	b183      	cbz	r3, 800a86c <_Balloc+0x50>
 800a84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a852:	b9b8      	cbnz	r0, 800a884 <_Balloc+0x68>
 800a854:	2101      	movs	r1, #1
 800a856:	fa01 f605 	lsl.w	r6, r1, r5
 800a85a:	1d72      	adds	r2, r6, #5
 800a85c:	0092      	lsls	r2, r2, #2
 800a85e:	4620      	mov	r0, r4
 800a860:	f000 fb60 	bl	800af24 <_calloc_r>
 800a864:	b160      	cbz	r0, 800a880 <_Balloc+0x64>
 800a866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a86a:	e00e      	b.n	800a88a <_Balloc+0x6e>
 800a86c:	2221      	movs	r2, #33	; 0x21
 800a86e:	2104      	movs	r1, #4
 800a870:	4620      	mov	r0, r4
 800a872:	f000 fb57 	bl	800af24 <_calloc_r>
 800a876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a878:	60f0      	str	r0, [r6, #12]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1e4      	bne.n	800a84a <_Balloc+0x2e>
 800a880:	2000      	movs	r0, #0
 800a882:	bd70      	pop	{r4, r5, r6, pc}
 800a884:	6802      	ldr	r2, [r0, #0]
 800a886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a88a:	2300      	movs	r3, #0
 800a88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a890:	e7f7      	b.n	800a882 <_Balloc+0x66>
 800a892:	bf00      	nop
 800a894:	0800bd31 	.word	0x0800bd31
 800a898:	0800be14 	.word	0x0800be14

0800a89c <_Bfree>:
 800a89c:	b570      	push	{r4, r5, r6, lr}
 800a89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	460c      	mov	r4, r1
 800a8a4:	b976      	cbnz	r6, 800a8c4 <_Bfree+0x28>
 800a8a6:	2010      	movs	r0, #16
 800a8a8:	f7ff ffa2 	bl	800a7f0 <malloc>
 800a8ac:	4602      	mov	r2, r0
 800a8ae:	6268      	str	r0, [r5, #36]	; 0x24
 800a8b0:	b920      	cbnz	r0, 800a8bc <_Bfree+0x20>
 800a8b2:	4b09      	ldr	r3, [pc, #36]	; (800a8d8 <_Bfree+0x3c>)
 800a8b4:	4809      	ldr	r0, [pc, #36]	; (800a8dc <_Bfree+0x40>)
 800a8b6:	218a      	movs	r1, #138	; 0x8a
 800a8b8:	f000 feaa 	bl	800b610 <__assert_func>
 800a8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a8c0:	6006      	str	r6, [r0, #0]
 800a8c2:	60c6      	str	r6, [r0, #12]
 800a8c4:	b13c      	cbz	r4, 800a8d6 <_Bfree+0x3a>
 800a8c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a8c8:	6862      	ldr	r2, [r4, #4]
 800a8ca:	68db      	ldr	r3, [r3, #12]
 800a8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a8d0:	6021      	str	r1, [r4, #0]
 800a8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a8d6:	bd70      	pop	{r4, r5, r6, pc}
 800a8d8:	0800bd31 	.word	0x0800bd31
 800a8dc:	0800be14 	.word	0x0800be14

0800a8e0 <__multadd>:
 800a8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8e4:	690d      	ldr	r5, [r1, #16]
 800a8e6:	4607      	mov	r7, r0
 800a8e8:	460c      	mov	r4, r1
 800a8ea:	461e      	mov	r6, r3
 800a8ec:	f101 0c14 	add.w	ip, r1, #20
 800a8f0:	2000      	movs	r0, #0
 800a8f2:	f8dc 3000 	ldr.w	r3, [ip]
 800a8f6:	b299      	uxth	r1, r3
 800a8f8:	fb02 6101 	mla	r1, r2, r1, r6
 800a8fc:	0c1e      	lsrs	r6, r3, #16
 800a8fe:	0c0b      	lsrs	r3, r1, #16
 800a900:	fb02 3306 	mla	r3, r2, r6, r3
 800a904:	b289      	uxth	r1, r1
 800a906:	3001      	adds	r0, #1
 800a908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a90c:	4285      	cmp	r5, r0
 800a90e:	f84c 1b04 	str.w	r1, [ip], #4
 800a912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a916:	dcec      	bgt.n	800a8f2 <__multadd+0x12>
 800a918:	b30e      	cbz	r6, 800a95e <__multadd+0x7e>
 800a91a:	68a3      	ldr	r3, [r4, #8]
 800a91c:	42ab      	cmp	r3, r5
 800a91e:	dc19      	bgt.n	800a954 <__multadd+0x74>
 800a920:	6861      	ldr	r1, [r4, #4]
 800a922:	4638      	mov	r0, r7
 800a924:	3101      	adds	r1, #1
 800a926:	f7ff ff79 	bl	800a81c <_Balloc>
 800a92a:	4680      	mov	r8, r0
 800a92c:	b928      	cbnz	r0, 800a93a <__multadd+0x5a>
 800a92e:	4602      	mov	r2, r0
 800a930:	4b0c      	ldr	r3, [pc, #48]	; (800a964 <__multadd+0x84>)
 800a932:	480d      	ldr	r0, [pc, #52]	; (800a968 <__multadd+0x88>)
 800a934:	21b5      	movs	r1, #181	; 0xb5
 800a936:	f000 fe6b 	bl	800b610 <__assert_func>
 800a93a:	6922      	ldr	r2, [r4, #16]
 800a93c:	3202      	adds	r2, #2
 800a93e:	f104 010c 	add.w	r1, r4, #12
 800a942:	0092      	lsls	r2, r2, #2
 800a944:	300c      	adds	r0, #12
 800a946:	f7ff ff5b 	bl	800a800 <memcpy>
 800a94a:	4621      	mov	r1, r4
 800a94c:	4638      	mov	r0, r7
 800a94e:	f7ff ffa5 	bl	800a89c <_Bfree>
 800a952:	4644      	mov	r4, r8
 800a954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a958:	3501      	adds	r5, #1
 800a95a:	615e      	str	r6, [r3, #20]
 800a95c:	6125      	str	r5, [r4, #16]
 800a95e:	4620      	mov	r0, r4
 800a960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a964:	0800bda3 	.word	0x0800bda3
 800a968:	0800be14 	.word	0x0800be14

0800a96c <__hi0bits>:
 800a96c:	0c03      	lsrs	r3, r0, #16
 800a96e:	041b      	lsls	r3, r3, #16
 800a970:	b9d3      	cbnz	r3, 800a9a8 <__hi0bits+0x3c>
 800a972:	0400      	lsls	r0, r0, #16
 800a974:	2310      	movs	r3, #16
 800a976:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a97a:	bf04      	itt	eq
 800a97c:	0200      	lsleq	r0, r0, #8
 800a97e:	3308      	addeq	r3, #8
 800a980:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a984:	bf04      	itt	eq
 800a986:	0100      	lsleq	r0, r0, #4
 800a988:	3304      	addeq	r3, #4
 800a98a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a98e:	bf04      	itt	eq
 800a990:	0080      	lsleq	r0, r0, #2
 800a992:	3302      	addeq	r3, #2
 800a994:	2800      	cmp	r0, #0
 800a996:	db05      	blt.n	800a9a4 <__hi0bits+0x38>
 800a998:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a99c:	f103 0301 	add.w	r3, r3, #1
 800a9a0:	bf08      	it	eq
 800a9a2:	2320      	moveq	r3, #32
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	4770      	bx	lr
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	e7e4      	b.n	800a976 <__hi0bits+0xa>

0800a9ac <__lo0bits>:
 800a9ac:	6803      	ldr	r3, [r0, #0]
 800a9ae:	f013 0207 	ands.w	r2, r3, #7
 800a9b2:	4601      	mov	r1, r0
 800a9b4:	d00b      	beq.n	800a9ce <__lo0bits+0x22>
 800a9b6:	07da      	lsls	r2, r3, #31
 800a9b8:	d423      	bmi.n	800aa02 <__lo0bits+0x56>
 800a9ba:	0798      	lsls	r0, r3, #30
 800a9bc:	bf49      	itett	mi
 800a9be:	085b      	lsrmi	r3, r3, #1
 800a9c0:	089b      	lsrpl	r3, r3, #2
 800a9c2:	2001      	movmi	r0, #1
 800a9c4:	600b      	strmi	r3, [r1, #0]
 800a9c6:	bf5c      	itt	pl
 800a9c8:	600b      	strpl	r3, [r1, #0]
 800a9ca:	2002      	movpl	r0, #2
 800a9cc:	4770      	bx	lr
 800a9ce:	b298      	uxth	r0, r3
 800a9d0:	b9a8      	cbnz	r0, 800a9fe <__lo0bits+0x52>
 800a9d2:	0c1b      	lsrs	r3, r3, #16
 800a9d4:	2010      	movs	r0, #16
 800a9d6:	b2da      	uxtb	r2, r3
 800a9d8:	b90a      	cbnz	r2, 800a9de <__lo0bits+0x32>
 800a9da:	3008      	adds	r0, #8
 800a9dc:	0a1b      	lsrs	r3, r3, #8
 800a9de:	071a      	lsls	r2, r3, #28
 800a9e0:	bf04      	itt	eq
 800a9e2:	091b      	lsreq	r3, r3, #4
 800a9e4:	3004      	addeq	r0, #4
 800a9e6:	079a      	lsls	r2, r3, #30
 800a9e8:	bf04      	itt	eq
 800a9ea:	089b      	lsreq	r3, r3, #2
 800a9ec:	3002      	addeq	r0, #2
 800a9ee:	07da      	lsls	r2, r3, #31
 800a9f0:	d403      	bmi.n	800a9fa <__lo0bits+0x4e>
 800a9f2:	085b      	lsrs	r3, r3, #1
 800a9f4:	f100 0001 	add.w	r0, r0, #1
 800a9f8:	d005      	beq.n	800aa06 <__lo0bits+0x5a>
 800a9fa:	600b      	str	r3, [r1, #0]
 800a9fc:	4770      	bx	lr
 800a9fe:	4610      	mov	r0, r2
 800aa00:	e7e9      	b.n	800a9d6 <__lo0bits+0x2a>
 800aa02:	2000      	movs	r0, #0
 800aa04:	4770      	bx	lr
 800aa06:	2020      	movs	r0, #32
 800aa08:	4770      	bx	lr
	...

0800aa0c <__i2b>:
 800aa0c:	b510      	push	{r4, lr}
 800aa0e:	460c      	mov	r4, r1
 800aa10:	2101      	movs	r1, #1
 800aa12:	f7ff ff03 	bl	800a81c <_Balloc>
 800aa16:	4602      	mov	r2, r0
 800aa18:	b928      	cbnz	r0, 800aa26 <__i2b+0x1a>
 800aa1a:	4b05      	ldr	r3, [pc, #20]	; (800aa30 <__i2b+0x24>)
 800aa1c:	4805      	ldr	r0, [pc, #20]	; (800aa34 <__i2b+0x28>)
 800aa1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800aa22:	f000 fdf5 	bl	800b610 <__assert_func>
 800aa26:	2301      	movs	r3, #1
 800aa28:	6144      	str	r4, [r0, #20]
 800aa2a:	6103      	str	r3, [r0, #16]
 800aa2c:	bd10      	pop	{r4, pc}
 800aa2e:	bf00      	nop
 800aa30:	0800bda3 	.word	0x0800bda3
 800aa34:	0800be14 	.word	0x0800be14

0800aa38 <__multiply>:
 800aa38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa3c:	4691      	mov	r9, r2
 800aa3e:	690a      	ldr	r2, [r1, #16]
 800aa40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa44:	429a      	cmp	r2, r3
 800aa46:	bfb8      	it	lt
 800aa48:	460b      	movlt	r3, r1
 800aa4a:	460c      	mov	r4, r1
 800aa4c:	bfbc      	itt	lt
 800aa4e:	464c      	movlt	r4, r9
 800aa50:	4699      	movlt	r9, r3
 800aa52:	6927      	ldr	r7, [r4, #16]
 800aa54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800aa58:	68a3      	ldr	r3, [r4, #8]
 800aa5a:	6861      	ldr	r1, [r4, #4]
 800aa5c:	eb07 060a 	add.w	r6, r7, sl
 800aa60:	42b3      	cmp	r3, r6
 800aa62:	b085      	sub	sp, #20
 800aa64:	bfb8      	it	lt
 800aa66:	3101      	addlt	r1, #1
 800aa68:	f7ff fed8 	bl	800a81c <_Balloc>
 800aa6c:	b930      	cbnz	r0, 800aa7c <__multiply+0x44>
 800aa6e:	4602      	mov	r2, r0
 800aa70:	4b44      	ldr	r3, [pc, #272]	; (800ab84 <__multiply+0x14c>)
 800aa72:	4845      	ldr	r0, [pc, #276]	; (800ab88 <__multiply+0x150>)
 800aa74:	f240 115d 	movw	r1, #349	; 0x15d
 800aa78:	f000 fdca 	bl	800b610 <__assert_func>
 800aa7c:	f100 0514 	add.w	r5, r0, #20
 800aa80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa84:	462b      	mov	r3, r5
 800aa86:	2200      	movs	r2, #0
 800aa88:	4543      	cmp	r3, r8
 800aa8a:	d321      	bcc.n	800aad0 <__multiply+0x98>
 800aa8c:	f104 0314 	add.w	r3, r4, #20
 800aa90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800aa94:	f109 0314 	add.w	r3, r9, #20
 800aa98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800aa9c:	9202      	str	r2, [sp, #8]
 800aa9e:	1b3a      	subs	r2, r7, r4
 800aaa0:	3a15      	subs	r2, #21
 800aaa2:	f022 0203 	bic.w	r2, r2, #3
 800aaa6:	3204      	adds	r2, #4
 800aaa8:	f104 0115 	add.w	r1, r4, #21
 800aaac:	428f      	cmp	r7, r1
 800aaae:	bf38      	it	cc
 800aab0:	2204      	movcc	r2, #4
 800aab2:	9201      	str	r2, [sp, #4]
 800aab4:	9a02      	ldr	r2, [sp, #8]
 800aab6:	9303      	str	r3, [sp, #12]
 800aab8:	429a      	cmp	r2, r3
 800aaba:	d80c      	bhi.n	800aad6 <__multiply+0x9e>
 800aabc:	2e00      	cmp	r6, #0
 800aabe:	dd03      	ble.n	800aac8 <__multiply+0x90>
 800aac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d05a      	beq.n	800ab7e <__multiply+0x146>
 800aac8:	6106      	str	r6, [r0, #16]
 800aaca:	b005      	add	sp, #20
 800aacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aad0:	f843 2b04 	str.w	r2, [r3], #4
 800aad4:	e7d8      	b.n	800aa88 <__multiply+0x50>
 800aad6:	f8b3 a000 	ldrh.w	sl, [r3]
 800aada:	f1ba 0f00 	cmp.w	sl, #0
 800aade:	d024      	beq.n	800ab2a <__multiply+0xf2>
 800aae0:	f104 0e14 	add.w	lr, r4, #20
 800aae4:	46a9      	mov	r9, r5
 800aae6:	f04f 0c00 	mov.w	ip, #0
 800aaea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800aaee:	f8d9 1000 	ldr.w	r1, [r9]
 800aaf2:	fa1f fb82 	uxth.w	fp, r2
 800aaf6:	b289      	uxth	r1, r1
 800aaf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800aafc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ab00:	f8d9 2000 	ldr.w	r2, [r9]
 800ab04:	4461      	add	r1, ip
 800ab06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ab0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ab12:	b289      	uxth	r1, r1
 800ab14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ab18:	4577      	cmp	r7, lr
 800ab1a:	f849 1b04 	str.w	r1, [r9], #4
 800ab1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ab22:	d8e2      	bhi.n	800aaea <__multiply+0xb2>
 800ab24:	9a01      	ldr	r2, [sp, #4]
 800ab26:	f845 c002 	str.w	ip, [r5, r2]
 800ab2a:	9a03      	ldr	r2, [sp, #12]
 800ab2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ab30:	3304      	adds	r3, #4
 800ab32:	f1b9 0f00 	cmp.w	r9, #0
 800ab36:	d020      	beq.n	800ab7a <__multiply+0x142>
 800ab38:	6829      	ldr	r1, [r5, #0]
 800ab3a:	f104 0c14 	add.w	ip, r4, #20
 800ab3e:	46ae      	mov	lr, r5
 800ab40:	f04f 0a00 	mov.w	sl, #0
 800ab44:	f8bc b000 	ldrh.w	fp, [ip]
 800ab48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ab4c:	fb09 220b 	mla	r2, r9, fp, r2
 800ab50:	4492      	add	sl, r2
 800ab52:	b289      	uxth	r1, r1
 800ab54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ab58:	f84e 1b04 	str.w	r1, [lr], #4
 800ab5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ab60:	f8be 1000 	ldrh.w	r1, [lr]
 800ab64:	0c12      	lsrs	r2, r2, #16
 800ab66:	fb09 1102 	mla	r1, r9, r2, r1
 800ab6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ab6e:	4567      	cmp	r7, ip
 800ab70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ab74:	d8e6      	bhi.n	800ab44 <__multiply+0x10c>
 800ab76:	9a01      	ldr	r2, [sp, #4]
 800ab78:	50a9      	str	r1, [r5, r2]
 800ab7a:	3504      	adds	r5, #4
 800ab7c:	e79a      	b.n	800aab4 <__multiply+0x7c>
 800ab7e:	3e01      	subs	r6, #1
 800ab80:	e79c      	b.n	800aabc <__multiply+0x84>
 800ab82:	bf00      	nop
 800ab84:	0800bda3 	.word	0x0800bda3
 800ab88:	0800be14 	.word	0x0800be14

0800ab8c <__pow5mult>:
 800ab8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab90:	4615      	mov	r5, r2
 800ab92:	f012 0203 	ands.w	r2, r2, #3
 800ab96:	4606      	mov	r6, r0
 800ab98:	460f      	mov	r7, r1
 800ab9a:	d007      	beq.n	800abac <__pow5mult+0x20>
 800ab9c:	4c25      	ldr	r4, [pc, #148]	; (800ac34 <__pow5mult+0xa8>)
 800ab9e:	3a01      	subs	r2, #1
 800aba0:	2300      	movs	r3, #0
 800aba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aba6:	f7ff fe9b 	bl	800a8e0 <__multadd>
 800abaa:	4607      	mov	r7, r0
 800abac:	10ad      	asrs	r5, r5, #2
 800abae:	d03d      	beq.n	800ac2c <__pow5mult+0xa0>
 800abb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800abb2:	b97c      	cbnz	r4, 800abd4 <__pow5mult+0x48>
 800abb4:	2010      	movs	r0, #16
 800abb6:	f7ff fe1b 	bl	800a7f0 <malloc>
 800abba:	4602      	mov	r2, r0
 800abbc:	6270      	str	r0, [r6, #36]	; 0x24
 800abbe:	b928      	cbnz	r0, 800abcc <__pow5mult+0x40>
 800abc0:	4b1d      	ldr	r3, [pc, #116]	; (800ac38 <__pow5mult+0xac>)
 800abc2:	481e      	ldr	r0, [pc, #120]	; (800ac3c <__pow5mult+0xb0>)
 800abc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800abc8:	f000 fd22 	bl	800b610 <__assert_func>
 800abcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800abd0:	6004      	str	r4, [r0, #0]
 800abd2:	60c4      	str	r4, [r0, #12]
 800abd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800abd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800abdc:	b94c      	cbnz	r4, 800abf2 <__pow5mult+0x66>
 800abde:	f240 2171 	movw	r1, #625	; 0x271
 800abe2:	4630      	mov	r0, r6
 800abe4:	f7ff ff12 	bl	800aa0c <__i2b>
 800abe8:	2300      	movs	r3, #0
 800abea:	f8c8 0008 	str.w	r0, [r8, #8]
 800abee:	4604      	mov	r4, r0
 800abf0:	6003      	str	r3, [r0, #0]
 800abf2:	f04f 0900 	mov.w	r9, #0
 800abf6:	07eb      	lsls	r3, r5, #31
 800abf8:	d50a      	bpl.n	800ac10 <__pow5mult+0x84>
 800abfa:	4639      	mov	r1, r7
 800abfc:	4622      	mov	r2, r4
 800abfe:	4630      	mov	r0, r6
 800ac00:	f7ff ff1a 	bl	800aa38 <__multiply>
 800ac04:	4639      	mov	r1, r7
 800ac06:	4680      	mov	r8, r0
 800ac08:	4630      	mov	r0, r6
 800ac0a:	f7ff fe47 	bl	800a89c <_Bfree>
 800ac0e:	4647      	mov	r7, r8
 800ac10:	106d      	asrs	r5, r5, #1
 800ac12:	d00b      	beq.n	800ac2c <__pow5mult+0xa0>
 800ac14:	6820      	ldr	r0, [r4, #0]
 800ac16:	b938      	cbnz	r0, 800ac28 <__pow5mult+0x9c>
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4621      	mov	r1, r4
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff ff0b 	bl	800aa38 <__multiply>
 800ac22:	6020      	str	r0, [r4, #0]
 800ac24:	f8c0 9000 	str.w	r9, [r0]
 800ac28:	4604      	mov	r4, r0
 800ac2a:	e7e4      	b.n	800abf6 <__pow5mult+0x6a>
 800ac2c:	4638      	mov	r0, r7
 800ac2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac32:	bf00      	nop
 800ac34:	0800bf60 	.word	0x0800bf60
 800ac38:	0800bd31 	.word	0x0800bd31
 800ac3c:	0800be14 	.word	0x0800be14

0800ac40 <__lshift>:
 800ac40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ac44:	460c      	mov	r4, r1
 800ac46:	6849      	ldr	r1, [r1, #4]
 800ac48:	6923      	ldr	r3, [r4, #16]
 800ac4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac4e:	68a3      	ldr	r3, [r4, #8]
 800ac50:	4607      	mov	r7, r0
 800ac52:	4691      	mov	r9, r2
 800ac54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac58:	f108 0601 	add.w	r6, r8, #1
 800ac5c:	42b3      	cmp	r3, r6
 800ac5e:	db0b      	blt.n	800ac78 <__lshift+0x38>
 800ac60:	4638      	mov	r0, r7
 800ac62:	f7ff fddb 	bl	800a81c <_Balloc>
 800ac66:	4605      	mov	r5, r0
 800ac68:	b948      	cbnz	r0, 800ac7e <__lshift+0x3e>
 800ac6a:	4602      	mov	r2, r0
 800ac6c:	4b2a      	ldr	r3, [pc, #168]	; (800ad18 <__lshift+0xd8>)
 800ac6e:	482b      	ldr	r0, [pc, #172]	; (800ad1c <__lshift+0xdc>)
 800ac70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ac74:	f000 fccc 	bl	800b610 <__assert_func>
 800ac78:	3101      	adds	r1, #1
 800ac7a:	005b      	lsls	r3, r3, #1
 800ac7c:	e7ee      	b.n	800ac5c <__lshift+0x1c>
 800ac7e:	2300      	movs	r3, #0
 800ac80:	f100 0114 	add.w	r1, r0, #20
 800ac84:	f100 0210 	add.w	r2, r0, #16
 800ac88:	4618      	mov	r0, r3
 800ac8a:	4553      	cmp	r3, sl
 800ac8c:	db37      	blt.n	800acfe <__lshift+0xbe>
 800ac8e:	6920      	ldr	r0, [r4, #16]
 800ac90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac94:	f104 0314 	add.w	r3, r4, #20
 800ac98:	f019 091f 	ands.w	r9, r9, #31
 800ac9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aca0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aca4:	d02f      	beq.n	800ad06 <__lshift+0xc6>
 800aca6:	f1c9 0e20 	rsb	lr, r9, #32
 800acaa:	468a      	mov	sl, r1
 800acac:	f04f 0c00 	mov.w	ip, #0
 800acb0:	681a      	ldr	r2, [r3, #0]
 800acb2:	fa02 f209 	lsl.w	r2, r2, r9
 800acb6:	ea42 020c 	orr.w	r2, r2, ip
 800acba:	f84a 2b04 	str.w	r2, [sl], #4
 800acbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800acc2:	4298      	cmp	r0, r3
 800acc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800acc8:	d8f2      	bhi.n	800acb0 <__lshift+0x70>
 800acca:	1b03      	subs	r3, r0, r4
 800accc:	3b15      	subs	r3, #21
 800acce:	f023 0303 	bic.w	r3, r3, #3
 800acd2:	3304      	adds	r3, #4
 800acd4:	f104 0215 	add.w	r2, r4, #21
 800acd8:	4290      	cmp	r0, r2
 800acda:	bf38      	it	cc
 800acdc:	2304      	movcc	r3, #4
 800acde:	f841 c003 	str.w	ip, [r1, r3]
 800ace2:	f1bc 0f00 	cmp.w	ip, #0
 800ace6:	d001      	beq.n	800acec <__lshift+0xac>
 800ace8:	f108 0602 	add.w	r6, r8, #2
 800acec:	3e01      	subs	r6, #1
 800acee:	4638      	mov	r0, r7
 800acf0:	612e      	str	r6, [r5, #16]
 800acf2:	4621      	mov	r1, r4
 800acf4:	f7ff fdd2 	bl	800a89c <_Bfree>
 800acf8:	4628      	mov	r0, r5
 800acfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800ad02:	3301      	adds	r3, #1
 800ad04:	e7c1      	b.n	800ac8a <__lshift+0x4a>
 800ad06:	3904      	subs	r1, #4
 800ad08:	f853 2b04 	ldr.w	r2, [r3], #4
 800ad0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800ad10:	4298      	cmp	r0, r3
 800ad12:	d8f9      	bhi.n	800ad08 <__lshift+0xc8>
 800ad14:	e7ea      	b.n	800acec <__lshift+0xac>
 800ad16:	bf00      	nop
 800ad18:	0800bda3 	.word	0x0800bda3
 800ad1c:	0800be14 	.word	0x0800be14

0800ad20 <__mcmp>:
 800ad20:	b530      	push	{r4, r5, lr}
 800ad22:	6902      	ldr	r2, [r0, #16]
 800ad24:	690c      	ldr	r4, [r1, #16]
 800ad26:	1b12      	subs	r2, r2, r4
 800ad28:	d10e      	bne.n	800ad48 <__mcmp+0x28>
 800ad2a:	f100 0314 	add.w	r3, r0, #20
 800ad2e:	3114      	adds	r1, #20
 800ad30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ad34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ad38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ad3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ad40:	42a5      	cmp	r5, r4
 800ad42:	d003      	beq.n	800ad4c <__mcmp+0x2c>
 800ad44:	d305      	bcc.n	800ad52 <__mcmp+0x32>
 800ad46:	2201      	movs	r2, #1
 800ad48:	4610      	mov	r0, r2
 800ad4a:	bd30      	pop	{r4, r5, pc}
 800ad4c:	4283      	cmp	r3, r0
 800ad4e:	d3f3      	bcc.n	800ad38 <__mcmp+0x18>
 800ad50:	e7fa      	b.n	800ad48 <__mcmp+0x28>
 800ad52:	f04f 32ff 	mov.w	r2, #4294967295
 800ad56:	e7f7      	b.n	800ad48 <__mcmp+0x28>

0800ad58 <__mdiff>:
 800ad58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad5c:	460c      	mov	r4, r1
 800ad5e:	4606      	mov	r6, r0
 800ad60:	4611      	mov	r1, r2
 800ad62:	4620      	mov	r0, r4
 800ad64:	4690      	mov	r8, r2
 800ad66:	f7ff ffdb 	bl	800ad20 <__mcmp>
 800ad6a:	1e05      	subs	r5, r0, #0
 800ad6c:	d110      	bne.n	800ad90 <__mdiff+0x38>
 800ad6e:	4629      	mov	r1, r5
 800ad70:	4630      	mov	r0, r6
 800ad72:	f7ff fd53 	bl	800a81c <_Balloc>
 800ad76:	b930      	cbnz	r0, 800ad86 <__mdiff+0x2e>
 800ad78:	4b3a      	ldr	r3, [pc, #232]	; (800ae64 <__mdiff+0x10c>)
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	f240 2132 	movw	r1, #562	; 0x232
 800ad80:	4839      	ldr	r0, [pc, #228]	; (800ae68 <__mdiff+0x110>)
 800ad82:	f000 fc45 	bl	800b610 <__assert_func>
 800ad86:	2301      	movs	r3, #1
 800ad88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad90:	bfa4      	itt	ge
 800ad92:	4643      	movge	r3, r8
 800ad94:	46a0      	movge	r8, r4
 800ad96:	4630      	mov	r0, r6
 800ad98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ad9c:	bfa6      	itte	ge
 800ad9e:	461c      	movge	r4, r3
 800ada0:	2500      	movge	r5, #0
 800ada2:	2501      	movlt	r5, #1
 800ada4:	f7ff fd3a 	bl	800a81c <_Balloc>
 800ada8:	b920      	cbnz	r0, 800adb4 <__mdiff+0x5c>
 800adaa:	4b2e      	ldr	r3, [pc, #184]	; (800ae64 <__mdiff+0x10c>)
 800adac:	4602      	mov	r2, r0
 800adae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800adb2:	e7e5      	b.n	800ad80 <__mdiff+0x28>
 800adb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800adb8:	6926      	ldr	r6, [r4, #16]
 800adba:	60c5      	str	r5, [r0, #12]
 800adbc:	f104 0914 	add.w	r9, r4, #20
 800adc0:	f108 0514 	add.w	r5, r8, #20
 800adc4:	f100 0e14 	add.w	lr, r0, #20
 800adc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800adcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800add0:	f108 0210 	add.w	r2, r8, #16
 800add4:	46f2      	mov	sl, lr
 800add6:	2100      	movs	r1, #0
 800add8:	f859 3b04 	ldr.w	r3, [r9], #4
 800addc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ade0:	fa1f f883 	uxth.w	r8, r3
 800ade4:	fa11 f18b 	uxtah	r1, r1, fp
 800ade8:	0c1b      	lsrs	r3, r3, #16
 800adea:	eba1 0808 	sub.w	r8, r1, r8
 800adee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800adf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800adf6:	fa1f f888 	uxth.w	r8, r8
 800adfa:	1419      	asrs	r1, r3, #16
 800adfc:	454e      	cmp	r6, r9
 800adfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ae02:	f84a 3b04 	str.w	r3, [sl], #4
 800ae06:	d8e7      	bhi.n	800add8 <__mdiff+0x80>
 800ae08:	1b33      	subs	r3, r6, r4
 800ae0a:	3b15      	subs	r3, #21
 800ae0c:	f023 0303 	bic.w	r3, r3, #3
 800ae10:	3304      	adds	r3, #4
 800ae12:	3415      	adds	r4, #21
 800ae14:	42a6      	cmp	r6, r4
 800ae16:	bf38      	it	cc
 800ae18:	2304      	movcc	r3, #4
 800ae1a:	441d      	add	r5, r3
 800ae1c:	4473      	add	r3, lr
 800ae1e:	469e      	mov	lr, r3
 800ae20:	462e      	mov	r6, r5
 800ae22:	4566      	cmp	r6, ip
 800ae24:	d30e      	bcc.n	800ae44 <__mdiff+0xec>
 800ae26:	f10c 0203 	add.w	r2, ip, #3
 800ae2a:	1b52      	subs	r2, r2, r5
 800ae2c:	f022 0203 	bic.w	r2, r2, #3
 800ae30:	3d03      	subs	r5, #3
 800ae32:	45ac      	cmp	ip, r5
 800ae34:	bf38      	it	cc
 800ae36:	2200      	movcc	r2, #0
 800ae38:	441a      	add	r2, r3
 800ae3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ae3e:	b17b      	cbz	r3, 800ae60 <__mdiff+0x108>
 800ae40:	6107      	str	r7, [r0, #16]
 800ae42:	e7a3      	b.n	800ad8c <__mdiff+0x34>
 800ae44:	f856 8b04 	ldr.w	r8, [r6], #4
 800ae48:	fa11 f288 	uxtah	r2, r1, r8
 800ae4c:	1414      	asrs	r4, r2, #16
 800ae4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ae52:	b292      	uxth	r2, r2
 800ae54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ae58:	f84e 2b04 	str.w	r2, [lr], #4
 800ae5c:	1421      	asrs	r1, r4, #16
 800ae5e:	e7e0      	b.n	800ae22 <__mdiff+0xca>
 800ae60:	3f01      	subs	r7, #1
 800ae62:	e7ea      	b.n	800ae3a <__mdiff+0xe2>
 800ae64:	0800bda3 	.word	0x0800bda3
 800ae68:	0800be14 	.word	0x0800be14

0800ae6c <__d2b>:
 800ae6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae70:	4689      	mov	r9, r1
 800ae72:	2101      	movs	r1, #1
 800ae74:	ec57 6b10 	vmov	r6, r7, d0
 800ae78:	4690      	mov	r8, r2
 800ae7a:	f7ff fccf 	bl	800a81c <_Balloc>
 800ae7e:	4604      	mov	r4, r0
 800ae80:	b930      	cbnz	r0, 800ae90 <__d2b+0x24>
 800ae82:	4602      	mov	r2, r0
 800ae84:	4b25      	ldr	r3, [pc, #148]	; (800af1c <__d2b+0xb0>)
 800ae86:	4826      	ldr	r0, [pc, #152]	; (800af20 <__d2b+0xb4>)
 800ae88:	f240 310a 	movw	r1, #778	; 0x30a
 800ae8c:	f000 fbc0 	bl	800b610 <__assert_func>
 800ae90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae98:	bb35      	cbnz	r5, 800aee8 <__d2b+0x7c>
 800ae9a:	2e00      	cmp	r6, #0
 800ae9c:	9301      	str	r3, [sp, #4]
 800ae9e:	d028      	beq.n	800aef2 <__d2b+0x86>
 800aea0:	4668      	mov	r0, sp
 800aea2:	9600      	str	r6, [sp, #0]
 800aea4:	f7ff fd82 	bl	800a9ac <__lo0bits>
 800aea8:	9900      	ldr	r1, [sp, #0]
 800aeaa:	b300      	cbz	r0, 800aeee <__d2b+0x82>
 800aeac:	9a01      	ldr	r2, [sp, #4]
 800aeae:	f1c0 0320 	rsb	r3, r0, #32
 800aeb2:	fa02 f303 	lsl.w	r3, r2, r3
 800aeb6:	430b      	orrs	r3, r1
 800aeb8:	40c2      	lsrs	r2, r0
 800aeba:	6163      	str	r3, [r4, #20]
 800aebc:	9201      	str	r2, [sp, #4]
 800aebe:	9b01      	ldr	r3, [sp, #4]
 800aec0:	61a3      	str	r3, [r4, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	bf14      	ite	ne
 800aec6:	2202      	movne	r2, #2
 800aec8:	2201      	moveq	r2, #1
 800aeca:	6122      	str	r2, [r4, #16]
 800aecc:	b1d5      	cbz	r5, 800af04 <__d2b+0x98>
 800aece:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aed2:	4405      	add	r5, r0
 800aed4:	f8c9 5000 	str.w	r5, [r9]
 800aed8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aedc:	f8c8 0000 	str.w	r0, [r8]
 800aee0:	4620      	mov	r0, r4
 800aee2:	b003      	add	sp, #12
 800aee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeec:	e7d5      	b.n	800ae9a <__d2b+0x2e>
 800aeee:	6161      	str	r1, [r4, #20]
 800aef0:	e7e5      	b.n	800aebe <__d2b+0x52>
 800aef2:	a801      	add	r0, sp, #4
 800aef4:	f7ff fd5a 	bl	800a9ac <__lo0bits>
 800aef8:	9b01      	ldr	r3, [sp, #4]
 800aefa:	6163      	str	r3, [r4, #20]
 800aefc:	2201      	movs	r2, #1
 800aefe:	6122      	str	r2, [r4, #16]
 800af00:	3020      	adds	r0, #32
 800af02:	e7e3      	b.n	800aecc <__d2b+0x60>
 800af04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800af08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800af0c:	f8c9 0000 	str.w	r0, [r9]
 800af10:	6918      	ldr	r0, [r3, #16]
 800af12:	f7ff fd2b 	bl	800a96c <__hi0bits>
 800af16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800af1a:	e7df      	b.n	800aedc <__d2b+0x70>
 800af1c:	0800bda3 	.word	0x0800bda3
 800af20:	0800be14 	.word	0x0800be14

0800af24 <_calloc_r>:
 800af24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af26:	fba1 2402 	umull	r2, r4, r1, r2
 800af2a:	b94c      	cbnz	r4, 800af40 <_calloc_r+0x1c>
 800af2c:	4611      	mov	r1, r2
 800af2e:	9201      	str	r2, [sp, #4]
 800af30:	f000 f87a 	bl	800b028 <_malloc_r>
 800af34:	9a01      	ldr	r2, [sp, #4]
 800af36:	4605      	mov	r5, r0
 800af38:	b930      	cbnz	r0, 800af48 <_calloc_r+0x24>
 800af3a:	4628      	mov	r0, r5
 800af3c:	b003      	add	sp, #12
 800af3e:	bd30      	pop	{r4, r5, pc}
 800af40:	220c      	movs	r2, #12
 800af42:	6002      	str	r2, [r0, #0]
 800af44:	2500      	movs	r5, #0
 800af46:	e7f8      	b.n	800af3a <_calloc_r+0x16>
 800af48:	4621      	mov	r1, r4
 800af4a:	f7fe f84f 	bl	8008fec <memset>
 800af4e:	e7f4      	b.n	800af3a <_calloc_r+0x16>

0800af50 <_free_r>:
 800af50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800af52:	2900      	cmp	r1, #0
 800af54:	d044      	beq.n	800afe0 <_free_r+0x90>
 800af56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800af5a:	9001      	str	r0, [sp, #4]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	f1a1 0404 	sub.w	r4, r1, #4
 800af62:	bfb8      	it	lt
 800af64:	18e4      	addlt	r4, r4, r3
 800af66:	f000 fcdf 	bl	800b928 <__malloc_lock>
 800af6a:	4a1e      	ldr	r2, [pc, #120]	; (800afe4 <_free_r+0x94>)
 800af6c:	9801      	ldr	r0, [sp, #4]
 800af6e:	6813      	ldr	r3, [r2, #0]
 800af70:	b933      	cbnz	r3, 800af80 <_free_r+0x30>
 800af72:	6063      	str	r3, [r4, #4]
 800af74:	6014      	str	r4, [r2, #0]
 800af76:	b003      	add	sp, #12
 800af78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800af7c:	f000 bcda 	b.w	800b934 <__malloc_unlock>
 800af80:	42a3      	cmp	r3, r4
 800af82:	d908      	bls.n	800af96 <_free_r+0x46>
 800af84:	6825      	ldr	r5, [r4, #0]
 800af86:	1961      	adds	r1, r4, r5
 800af88:	428b      	cmp	r3, r1
 800af8a:	bf01      	itttt	eq
 800af8c:	6819      	ldreq	r1, [r3, #0]
 800af8e:	685b      	ldreq	r3, [r3, #4]
 800af90:	1949      	addeq	r1, r1, r5
 800af92:	6021      	streq	r1, [r4, #0]
 800af94:	e7ed      	b.n	800af72 <_free_r+0x22>
 800af96:	461a      	mov	r2, r3
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	b10b      	cbz	r3, 800afa0 <_free_r+0x50>
 800af9c:	42a3      	cmp	r3, r4
 800af9e:	d9fa      	bls.n	800af96 <_free_r+0x46>
 800afa0:	6811      	ldr	r1, [r2, #0]
 800afa2:	1855      	adds	r5, r2, r1
 800afa4:	42a5      	cmp	r5, r4
 800afa6:	d10b      	bne.n	800afc0 <_free_r+0x70>
 800afa8:	6824      	ldr	r4, [r4, #0]
 800afaa:	4421      	add	r1, r4
 800afac:	1854      	adds	r4, r2, r1
 800afae:	42a3      	cmp	r3, r4
 800afb0:	6011      	str	r1, [r2, #0]
 800afb2:	d1e0      	bne.n	800af76 <_free_r+0x26>
 800afb4:	681c      	ldr	r4, [r3, #0]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	6053      	str	r3, [r2, #4]
 800afba:	4421      	add	r1, r4
 800afbc:	6011      	str	r1, [r2, #0]
 800afbe:	e7da      	b.n	800af76 <_free_r+0x26>
 800afc0:	d902      	bls.n	800afc8 <_free_r+0x78>
 800afc2:	230c      	movs	r3, #12
 800afc4:	6003      	str	r3, [r0, #0]
 800afc6:	e7d6      	b.n	800af76 <_free_r+0x26>
 800afc8:	6825      	ldr	r5, [r4, #0]
 800afca:	1961      	adds	r1, r4, r5
 800afcc:	428b      	cmp	r3, r1
 800afce:	bf04      	itt	eq
 800afd0:	6819      	ldreq	r1, [r3, #0]
 800afd2:	685b      	ldreq	r3, [r3, #4]
 800afd4:	6063      	str	r3, [r4, #4]
 800afd6:	bf04      	itt	eq
 800afd8:	1949      	addeq	r1, r1, r5
 800afda:	6021      	streq	r1, [r4, #0]
 800afdc:	6054      	str	r4, [r2, #4]
 800afde:	e7ca      	b.n	800af76 <_free_r+0x26>
 800afe0:	b003      	add	sp, #12
 800afe2:	bd30      	pop	{r4, r5, pc}
 800afe4:	20000524 	.word	0x20000524

0800afe8 <sbrk_aligned>:
 800afe8:	b570      	push	{r4, r5, r6, lr}
 800afea:	4e0e      	ldr	r6, [pc, #56]	; (800b024 <sbrk_aligned+0x3c>)
 800afec:	460c      	mov	r4, r1
 800afee:	6831      	ldr	r1, [r6, #0]
 800aff0:	4605      	mov	r5, r0
 800aff2:	b911      	cbnz	r1, 800affa <sbrk_aligned+0x12>
 800aff4:	f000 f9e6 	bl	800b3c4 <_sbrk_r>
 800aff8:	6030      	str	r0, [r6, #0]
 800affa:	4621      	mov	r1, r4
 800affc:	4628      	mov	r0, r5
 800affe:	f000 f9e1 	bl	800b3c4 <_sbrk_r>
 800b002:	1c43      	adds	r3, r0, #1
 800b004:	d00a      	beq.n	800b01c <sbrk_aligned+0x34>
 800b006:	1cc4      	adds	r4, r0, #3
 800b008:	f024 0403 	bic.w	r4, r4, #3
 800b00c:	42a0      	cmp	r0, r4
 800b00e:	d007      	beq.n	800b020 <sbrk_aligned+0x38>
 800b010:	1a21      	subs	r1, r4, r0
 800b012:	4628      	mov	r0, r5
 800b014:	f000 f9d6 	bl	800b3c4 <_sbrk_r>
 800b018:	3001      	adds	r0, #1
 800b01a:	d101      	bne.n	800b020 <sbrk_aligned+0x38>
 800b01c:	f04f 34ff 	mov.w	r4, #4294967295
 800b020:	4620      	mov	r0, r4
 800b022:	bd70      	pop	{r4, r5, r6, pc}
 800b024:	20000528 	.word	0x20000528

0800b028 <_malloc_r>:
 800b028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b02c:	1ccd      	adds	r5, r1, #3
 800b02e:	f025 0503 	bic.w	r5, r5, #3
 800b032:	3508      	adds	r5, #8
 800b034:	2d0c      	cmp	r5, #12
 800b036:	bf38      	it	cc
 800b038:	250c      	movcc	r5, #12
 800b03a:	2d00      	cmp	r5, #0
 800b03c:	4607      	mov	r7, r0
 800b03e:	db01      	blt.n	800b044 <_malloc_r+0x1c>
 800b040:	42a9      	cmp	r1, r5
 800b042:	d905      	bls.n	800b050 <_malloc_r+0x28>
 800b044:	230c      	movs	r3, #12
 800b046:	603b      	str	r3, [r7, #0]
 800b048:	2600      	movs	r6, #0
 800b04a:	4630      	mov	r0, r6
 800b04c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b050:	4e2e      	ldr	r6, [pc, #184]	; (800b10c <_malloc_r+0xe4>)
 800b052:	f000 fc69 	bl	800b928 <__malloc_lock>
 800b056:	6833      	ldr	r3, [r6, #0]
 800b058:	461c      	mov	r4, r3
 800b05a:	bb34      	cbnz	r4, 800b0aa <_malloc_r+0x82>
 800b05c:	4629      	mov	r1, r5
 800b05e:	4638      	mov	r0, r7
 800b060:	f7ff ffc2 	bl	800afe8 <sbrk_aligned>
 800b064:	1c43      	adds	r3, r0, #1
 800b066:	4604      	mov	r4, r0
 800b068:	d14d      	bne.n	800b106 <_malloc_r+0xde>
 800b06a:	6834      	ldr	r4, [r6, #0]
 800b06c:	4626      	mov	r6, r4
 800b06e:	2e00      	cmp	r6, #0
 800b070:	d140      	bne.n	800b0f4 <_malloc_r+0xcc>
 800b072:	6823      	ldr	r3, [r4, #0]
 800b074:	4631      	mov	r1, r6
 800b076:	4638      	mov	r0, r7
 800b078:	eb04 0803 	add.w	r8, r4, r3
 800b07c:	f000 f9a2 	bl	800b3c4 <_sbrk_r>
 800b080:	4580      	cmp	r8, r0
 800b082:	d13a      	bne.n	800b0fa <_malloc_r+0xd2>
 800b084:	6821      	ldr	r1, [r4, #0]
 800b086:	3503      	adds	r5, #3
 800b088:	1a6d      	subs	r5, r5, r1
 800b08a:	f025 0503 	bic.w	r5, r5, #3
 800b08e:	3508      	adds	r5, #8
 800b090:	2d0c      	cmp	r5, #12
 800b092:	bf38      	it	cc
 800b094:	250c      	movcc	r5, #12
 800b096:	4629      	mov	r1, r5
 800b098:	4638      	mov	r0, r7
 800b09a:	f7ff ffa5 	bl	800afe8 <sbrk_aligned>
 800b09e:	3001      	adds	r0, #1
 800b0a0:	d02b      	beq.n	800b0fa <_malloc_r+0xd2>
 800b0a2:	6823      	ldr	r3, [r4, #0]
 800b0a4:	442b      	add	r3, r5
 800b0a6:	6023      	str	r3, [r4, #0]
 800b0a8:	e00e      	b.n	800b0c8 <_malloc_r+0xa0>
 800b0aa:	6822      	ldr	r2, [r4, #0]
 800b0ac:	1b52      	subs	r2, r2, r5
 800b0ae:	d41e      	bmi.n	800b0ee <_malloc_r+0xc6>
 800b0b0:	2a0b      	cmp	r2, #11
 800b0b2:	d916      	bls.n	800b0e2 <_malloc_r+0xba>
 800b0b4:	1961      	adds	r1, r4, r5
 800b0b6:	42a3      	cmp	r3, r4
 800b0b8:	6025      	str	r5, [r4, #0]
 800b0ba:	bf18      	it	ne
 800b0bc:	6059      	strne	r1, [r3, #4]
 800b0be:	6863      	ldr	r3, [r4, #4]
 800b0c0:	bf08      	it	eq
 800b0c2:	6031      	streq	r1, [r6, #0]
 800b0c4:	5162      	str	r2, [r4, r5]
 800b0c6:	604b      	str	r3, [r1, #4]
 800b0c8:	4638      	mov	r0, r7
 800b0ca:	f104 060b 	add.w	r6, r4, #11
 800b0ce:	f000 fc31 	bl	800b934 <__malloc_unlock>
 800b0d2:	f026 0607 	bic.w	r6, r6, #7
 800b0d6:	1d23      	adds	r3, r4, #4
 800b0d8:	1af2      	subs	r2, r6, r3
 800b0da:	d0b6      	beq.n	800b04a <_malloc_r+0x22>
 800b0dc:	1b9b      	subs	r3, r3, r6
 800b0de:	50a3      	str	r3, [r4, r2]
 800b0e0:	e7b3      	b.n	800b04a <_malloc_r+0x22>
 800b0e2:	6862      	ldr	r2, [r4, #4]
 800b0e4:	42a3      	cmp	r3, r4
 800b0e6:	bf0c      	ite	eq
 800b0e8:	6032      	streq	r2, [r6, #0]
 800b0ea:	605a      	strne	r2, [r3, #4]
 800b0ec:	e7ec      	b.n	800b0c8 <_malloc_r+0xa0>
 800b0ee:	4623      	mov	r3, r4
 800b0f0:	6864      	ldr	r4, [r4, #4]
 800b0f2:	e7b2      	b.n	800b05a <_malloc_r+0x32>
 800b0f4:	4634      	mov	r4, r6
 800b0f6:	6876      	ldr	r6, [r6, #4]
 800b0f8:	e7b9      	b.n	800b06e <_malloc_r+0x46>
 800b0fa:	230c      	movs	r3, #12
 800b0fc:	603b      	str	r3, [r7, #0]
 800b0fe:	4638      	mov	r0, r7
 800b100:	f000 fc18 	bl	800b934 <__malloc_unlock>
 800b104:	e7a1      	b.n	800b04a <_malloc_r+0x22>
 800b106:	6025      	str	r5, [r4, #0]
 800b108:	e7de      	b.n	800b0c8 <_malloc_r+0xa0>
 800b10a:	bf00      	nop
 800b10c:	20000524 	.word	0x20000524

0800b110 <__sfputc_r>:
 800b110:	6893      	ldr	r3, [r2, #8]
 800b112:	3b01      	subs	r3, #1
 800b114:	2b00      	cmp	r3, #0
 800b116:	b410      	push	{r4}
 800b118:	6093      	str	r3, [r2, #8]
 800b11a:	da08      	bge.n	800b12e <__sfputc_r+0x1e>
 800b11c:	6994      	ldr	r4, [r2, #24]
 800b11e:	42a3      	cmp	r3, r4
 800b120:	db01      	blt.n	800b126 <__sfputc_r+0x16>
 800b122:	290a      	cmp	r1, #10
 800b124:	d103      	bne.n	800b12e <__sfputc_r+0x1e>
 800b126:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b12a:	f000 b99f 	b.w	800b46c <__swbuf_r>
 800b12e:	6813      	ldr	r3, [r2, #0]
 800b130:	1c58      	adds	r0, r3, #1
 800b132:	6010      	str	r0, [r2, #0]
 800b134:	7019      	strb	r1, [r3, #0]
 800b136:	4608      	mov	r0, r1
 800b138:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b13c:	4770      	bx	lr

0800b13e <__sfputs_r>:
 800b13e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b140:	4606      	mov	r6, r0
 800b142:	460f      	mov	r7, r1
 800b144:	4614      	mov	r4, r2
 800b146:	18d5      	adds	r5, r2, r3
 800b148:	42ac      	cmp	r4, r5
 800b14a:	d101      	bne.n	800b150 <__sfputs_r+0x12>
 800b14c:	2000      	movs	r0, #0
 800b14e:	e007      	b.n	800b160 <__sfputs_r+0x22>
 800b150:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b154:	463a      	mov	r2, r7
 800b156:	4630      	mov	r0, r6
 800b158:	f7ff ffda 	bl	800b110 <__sfputc_r>
 800b15c:	1c43      	adds	r3, r0, #1
 800b15e:	d1f3      	bne.n	800b148 <__sfputs_r+0xa>
 800b160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b164 <_vfiprintf_r>:
 800b164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b168:	460d      	mov	r5, r1
 800b16a:	b09d      	sub	sp, #116	; 0x74
 800b16c:	4614      	mov	r4, r2
 800b16e:	4698      	mov	r8, r3
 800b170:	4606      	mov	r6, r0
 800b172:	b118      	cbz	r0, 800b17c <_vfiprintf_r+0x18>
 800b174:	6983      	ldr	r3, [r0, #24]
 800b176:	b90b      	cbnz	r3, 800b17c <_vfiprintf_r+0x18>
 800b178:	f7ff fa94 	bl	800a6a4 <__sinit>
 800b17c:	4b89      	ldr	r3, [pc, #548]	; (800b3a4 <_vfiprintf_r+0x240>)
 800b17e:	429d      	cmp	r5, r3
 800b180:	d11b      	bne.n	800b1ba <_vfiprintf_r+0x56>
 800b182:	6875      	ldr	r5, [r6, #4]
 800b184:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b186:	07d9      	lsls	r1, r3, #31
 800b188:	d405      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b18a:	89ab      	ldrh	r3, [r5, #12]
 800b18c:	059a      	lsls	r2, r3, #22
 800b18e:	d402      	bmi.n	800b196 <_vfiprintf_r+0x32>
 800b190:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b192:	f7ff fb2a 	bl	800a7ea <__retarget_lock_acquire_recursive>
 800b196:	89ab      	ldrh	r3, [r5, #12]
 800b198:	071b      	lsls	r3, r3, #28
 800b19a:	d501      	bpl.n	800b1a0 <_vfiprintf_r+0x3c>
 800b19c:	692b      	ldr	r3, [r5, #16]
 800b19e:	b9eb      	cbnz	r3, 800b1dc <_vfiprintf_r+0x78>
 800b1a0:	4629      	mov	r1, r5
 800b1a2:	4630      	mov	r0, r6
 800b1a4:	f000 f9c6 	bl	800b534 <__swsetup_r>
 800b1a8:	b1c0      	cbz	r0, 800b1dc <_vfiprintf_r+0x78>
 800b1aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b1ac:	07dc      	lsls	r4, r3, #31
 800b1ae:	d50e      	bpl.n	800b1ce <_vfiprintf_r+0x6a>
 800b1b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b4:	b01d      	add	sp, #116	; 0x74
 800b1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b1ba:	4b7b      	ldr	r3, [pc, #492]	; (800b3a8 <_vfiprintf_r+0x244>)
 800b1bc:	429d      	cmp	r5, r3
 800b1be:	d101      	bne.n	800b1c4 <_vfiprintf_r+0x60>
 800b1c0:	68b5      	ldr	r5, [r6, #8]
 800b1c2:	e7df      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1c4:	4b79      	ldr	r3, [pc, #484]	; (800b3ac <_vfiprintf_r+0x248>)
 800b1c6:	429d      	cmp	r5, r3
 800b1c8:	bf08      	it	eq
 800b1ca:	68f5      	ldreq	r5, [r6, #12]
 800b1cc:	e7da      	b.n	800b184 <_vfiprintf_r+0x20>
 800b1ce:	89ab      	ldrh	r3, [r5, #12]
 800b1d0:	0598      	lsls	r0, r3, #22
 800b1d2:	d4ed      	bmi.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b1d6:	f7ff fb09 	bl	800a7ec <__retarget_lock_release_recursive>
 800b1da:	e7e9      	b.n	800b1b0 <_vfiprintf_r+0x4c>
 800b1dc:	2300      	movs	r3, #0
 800b1de:	9309      	str	r3, [sp, #36]	; 0x24
 800b1e0:	2320      	movs	r3, #32
 800b1e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b1e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b1ea:	2330      	movs	r3, #48	; 0x30
 800b1ec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b3b0 <_vfiprintf_r+0x24c>
 800b1f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b1f4:	f04f 0901 	mov.w	r9, #1
 800b1f8:	4623      	mov	r3, r4
 800b1fa:	469a      	mov	sl, r3
 800b1fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b200:	b10a      	cbz	r2, 800b206 <_vfiprintf_r+0xa2>
 800b202:	2a25      	cmp	r2, #37	; 0x25
 800b204:	d1f9      	bne.n	800b1fa <_vfiprintf_r+0x96>
 800b206:	ebba 0b04 	subs.w	fp, sl, r4
 800b20a:	d00b      	beq.n	800b224 <_vfiprintf_r+0xc0>
 800b20c:	465b      	mov	r3, fp
 800b20e:	4622      	mov	r2, r4
 800b210:	4629      	mov	r1, r5
 800b212:	4630      	mov	r0, r6
 800b214:	f7ff ff93 	bl	800b13e <__sfputs_r>
 800b218:	3001      	adds	r0, #1
 800b21a:	f000 80aa 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b21e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b220:	445a      	add	r2, fp
 800b222:	9209      	str	r2, [sp, #36]	; 0x24
 800b224:	f89a 3000 	ldrb.w	r3, [sl]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	f000 80a2 	beq.w	800b372 <_vfiprintf_r+0x20e>
 800b22e:	2300      	movs	r3, #0
 800b230:	f04f 32ff 	mov.w	r2, #4294967295
 800b234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b238:	f10a 0a01 	add.w	sl, sl, #1
 800b23c:	9304      	str	r3, [sp, #16]
 800b23e:	9307      	str	r3, [sp, #28]
 800b240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b244:	931a      	str	r3, [sp, #104]	; 0x68
 800b246:	4654      	mov	r4, sl
 800b248:	2205      	movs	r2, #5
 800b24a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b24e:	4858      	ldr	r0, [pc, #352]	; (800b3b0 <_vfiprintf_r+0x24c>)
 800b250:	f7f4 ffce 	bl	80001f0 <memchr>
 800b254:	9a04      	ldr	r2, [sp, #16]
 800b256:	b9d8      	cbnz	r0, 800b290 <_vfiprintf_r+0x12c>
 800b258:	06d1      	lsls	r1, r2, #27
 800b25a:	bf44      	itt	mi
 800b25c:	2320      	movmi	r3, #32
 800b25e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b262:	0713      	lsls	r3, r2, #28
 800b264:	bf44      	itt	mi
 800b266:	232b      	movmi	r3, #43	; 0x2b
 800b268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b26c:	f89a 3000 	ldrb.w	r3, [sl]
 800b270:	2b2a      	cmp	r3, #42	; 0x2a
 800b272:	d015      	beq.n	800b2a0 <_vfiprintf_r+0x13c>
 800b274:	9a07      	ldr	r2, [sp, #28]
 800b276:	4654      	mov	r4, sl
 800b278:	2000      	movs	r0, #0
 800b27a:	f04f 0c0a 	mov.w	ip, #10
 800b27e:	4621      	mov	r1, r4
 800b280:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b284:	3b30      	subs	r3, #48	; 0x30
 800b286:	2b09      	cmp	r3, #9
 800b288:	d94e      	bls.n	800b328 <_vfiprintf_r+0x1c4>
 800b28a:	b1b0      	cbz	r0, 800b2ba <_vfiprintf_r+0x156>
 800b28c:	9207      	str	r2, [sp, #28]
 800b28e:	e014      	b.n	800b2ba <_vfiprintf_r+0x156>
 800b290:	eba0 0308 	sub.w	r3, r0, r8
 800b294:	fa09 f303 	lsl.w	r3, r9, r3
 800b298:	4313      	orrs	r3, r2
 800b29a:	9304      	str	r3, [sp, #16]
 800b29c:	46a2      	mov	sl, r4
 800b29e:	e7d2      	b.n	800b246 <_vfiprintf_r+0xe2>
 800b2a0:	9b03      	ldr	r3, [sp, #12]
 800b2a2:	1d19      	adds	r1, r3, #4
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	9103      	str	r1, [sp, #12]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	bfbb      	ittet	lt
 800b2ac:	425b      	neglt	r3, r3
 800b2ae:	f042 0202 	orrlt.w	r2, r2, #2
 800b2b2:	9307      	strge	r3, [sp, #28]
 800b2b4:	9307      	strlt	r3, [sp, #28]
 800b2b6:	bfb8      	it	lt
 800b2b8:	9204      	strlt	r2, [sp, #16]
 800b2ba:	7823      	ldrb	r3, [r4, #0]
 800b2bc:	2b2e      	cmp	r3, #46	; 0x2e
 800b2be:	d10c      	bne.n	800b2da <_vfiprintf_r+0x176>
 800b2c0:	7863      	ldrb	r3, [r4, #1]
 800b2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b2c4:	d135      	bne.n	800b332 <_vfiprintf_r+0x1ce>
 800b2c6:	9b03      	ldr	r3, [sp, #12]
 800b2c8:	1d1a      	adds	r2, r3, #4
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	9203      	str	r2, [sp, #12]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	bfb8      	it	lt
 800b2d2:	f04f 33ff 	movlt.w	r3, #4294967295
 800b2d6:	3402      	adds	r4, #2
 800b2d8:	9305      	str	r3, [sp, #20]
 800b2da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b3c0 <_vfiprintf_r+0x25c>
 800b2de:	7821      	ldrb	r1, [r4, #0]
 800b2e0:	2203      	movs	r2, #3
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	f7f4 ff84 	bl	80001f0 <memchr>
 800b2e8:	b140      	cbz	r0, 800b2fc <_vfiprintf_r+0x198>
 800b2ea:	2340      	movs	r3, #64	; 0x40
 800b2ec:	eba0 000a 	sub.w	r0, r0, sl
 800b2f0:	fa03 f000 	lsl.w	r0, r3, r0
 800b2f4:	9b04      	ldr	r3, [sp, #16]
 800b2f6:	4303      	orrs	r3, r0
 800b2f8:	3401      	adds	r4, #1
 800b2fa:	9304      	str	r3, [sp, #16]
 800b2fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b300:	482c      	ldr	r0, [pc, #176]	; (800b3b4 <_vfiprintf_r+0x250>)
 800b302:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b306:	2206      	movs	r2, #6
 800b308:	f7f4 ff72 	bl	80001f0 <memchr>
 800b30c:	2800      	cmp	r0, #0
 800b30e:	d03f      	beq.n	800b390 <_vfiprintf_r+0x22c>
 800b310:	4b29      	ldr	r3, [pc, #164]	; (800b3b8 <_vfiprintf_r+0x254>)
 800b312:	bb1b      	cbnz	r3, 800b35c <_vfiprintf_r+0x1f8>
 800b314:	9b03      	ldr	r3, [sp, #12]
 800b316:	3307      	adds	r3, #7
 800b318:	f023 0307 	bic.w	r3, r3, #7
 800b31c:	3308      	adds	r3, #8
 800b31e:	9303      	str	r3, [sp, #12]
 800b320:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b322:	443b      	add	r3, r7
 800b324:	9309      	str	r3, [sp, #36]	; 0x24
 800b326:	e767      	b.n	800b1f8 <_vfiprintf_r+0x94>
 800b328:	fb0c 3202 	mla	r2, ip, r2, r3
 800b32c:	460c      	mov	r4, r1
 800b32e:	2001      	movs	r0, #1
 800b330:	e7a5      	b.n	800b27e <_vfiprintf_r+0x11a>
 800b332:	2300      	movs	r3, #0
 800b334:	3401      	adds	r4, #1
 800b336:	9305      	str	r3, [sp, #20]
 800b338:	4619      	mov	r1, r3
 800b33a:	f04f 0c0a 	mov.w	ip, #10
 800b33e:	4620      	mov	r0, r4
 800b340:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b344:	3a30      	subs	r2, #48	; 0x30
 800b346:	2a09      	cmp	r2, #9
 800b348:	d903      	bls.n	800b352 <_vfiprintf_r+0x1ee>
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d0c5      	beq.n	800b2da <_vfiprintf_r+0x176>
 800b34e:	9105      	str	r1, [sp, #20]
 800b350:	e7c3      	b.n	800b2da <_vfiprintf_r+0x176>
 800b352:	fb0c 2101 	mla	r1, ip, r1, r2
 800b356:	4604      	mov	r4, r0
 800b358:	2301      	movs	r3, #1
 800b35a:	e7f0      	b.n	800b33e <_vfiprintf_r+0x1da>
 800b35c:	ab03      	add	r3, sp, #12
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	462a      	mov	r2, r5
 800b362:	4b16      	ldr	r3, [pc, #88]	; (800b3bc <_vfiprintf_r+0x258>)
 800b364:	a904      	add	r1, sp, #16
 800b366:	4630      	mov	r0, r6
 800b368:	f7fd fee8 	bl	800913c <_printf_float>
 800b36c:	4607      	mov	r7, r0
 800b36e:	1c78      	adds	r0, r7, #1
 800b370:	d1d6      	bne.n	800b320 <_vfiprintf_r+0x1bc>
 800b372:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b374:	07d9      	lsls	r1, r3, #31
 800b376:	d405      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b378:	89ab      	ldrh	r3, [r5, #12]
 800b37a:	059a      	lsls	r2, r3, #22
 800b37c:	d402      	bmi.n	800b384 <_vfiprintf_r+0x220>
 800b37e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b380:	f7ff fa34 	bl	800a7ec <__retarget_lock_release_recursive>
 800b384:	89ab      	ldrh	r3, [r5, #12]
 800b386:	065b      	lsls	r3, r3, #25
 800b388:	f53f af12 	bmi.w	800b1b0 <_vfiprintf_r+0x4c>
 800b38c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b38e:	e711      	b.n	800b1b4 <_vfiprintf_r+0x50>
 800b390:	ab03      	add	r3, sp, #12
 800b392:	9300      	str	r3, [sp, #0]
 800b394:	462a      	mov	r2, r5
 800b396:	4b09      	ldr	r3, [pc, #36]	; (800b3bc <_vfiprintf_r+0x258>)
 800b398:	a904      	add	r1, sp, #16
 800b39a:	4630      	mov	r0, r6
 800b39c:	f7fe f972 	bl	8009684 <_printf_i>
 800b3a0:	e7e4      	b.n	800b36c <_vfiprintf_r+0x208>
 800b3a2:	bf00      	nop
 800b3a4:	0800bdd4 	.word	0x0800bdd4
 800b3a8:	0800bdf4 	.word	0x0800bdf4
 800b3ac:	0800bdb4 	.word	0x0800bdb4
 800b3b0:	0800bf6c 	.word	0x0800bf6c
 800b3b4:	0800bf76 	.word	0x0800bf76
 800b3b8:	0800913d 	.word	0x0800913d
 800b3bc:	0800b13f 	.word	0x0800b13f
 800b3c0:	0800bf72 	.word	0x0800bf72

0800b3c4 <_sbrk_r>:
 800b3c4:	b538      	push	{r3, r4, r5, lr}
 800b3c6:	4d06      	ldr	r5, [pc, #24]	; (800b3e0 <_sbrk_r+0x1c>)
 800b3c8:	2300      	movs	r3, #0
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	4608      	mov	r0, r1
 800b3ce:	602b      	str	r3, [r5, #0]
 800b3d0:	f7f7 fabe 	bl	8002950 <_sbrk>
 800b3d4:	1c43      	adds	r3, r0, #1
 800b3d6:	d102      	bne.n	800b3de <_sbrk_r+0x1a>
 800b3d8:	682b      	ldr	r3, [r5, #0]
 800b3da:	b103      	cbz	r3, 800b3de <_sbrk_r+0x1a>
 800b3dc:	6023      	str	r3, [r4, #0]
 800b3de:	bd38      	pop	{r3, r4, r5, pc}
 800b3e0:	2000052c 	.word	0x2000052c

0800b3e4 <__sread>:
 800b3e4:	b510      	push	{r4, lr}
 800b3e6:	460c      	mov	r4, r1
 800b3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3ec:	f000 faa8 	bl	800b940 <_read_r>
 800b3f0:	2800      	cmp	r0, #0
 800b3f2:	bfab      	itete	ge
 800b3f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b3f6:	89a3      	ldrhlt	r3, [r4, #12]
 800b3f8:	181b      	addge	r3, r3, r0
 800b3fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b3fe:	bfac      	ite	ge
 800b400:	6563      	strge	r3, [r4, #84]	; 0x54
 800b402:	81a3      	strhlt	r3, [r4, #12]
 800b404:	bd10      	pop	{r4, pc}

0800b406 <__swrite>:
 800b406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b40a:	461f      	mov	r7, r3
 800b40c:	898b      	ldrh	r3, [r1, #12]
 800b40e:	05db      	lsls	r3, r3, #23
 800b410:	4605      	mov	r5, r0
 800b412:	460c      	mov	r4, r1
 800b414:	4616      	mov	r6, r2
 800b416:	d505      	bpl.n	800b424 <__swrite+0x1e>
 800b418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b41c:	2302      	movs	r3, #2
 800b41e:	2200      	movs	r2, #0
 800b420:	f000 f9f8 	bl	800b814 <_lseek_r>
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b42e:	81a3      	strh	r3, [r4, #12]
 800b430:	4632      	mov	r2, r6
 800b432:	463b      	mov	r3, r7
 800b434:	4628      	mov	r0, r5
 800b436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b43a:	f000 b869 	b.w	800b510 <_write_r>

0800b43e <__sseek>:
 800b43e:	b510      	push	{r4, lr}
 800b440:	460c      	mov	r4, r1
 800b442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b446:	f000 f9e5 	bl	800b814 <_lseek_r>
 800b44a:	1c43      	adds	r3, r0, #1
 800b44c:	89a3      	ldrh	r3, [r4, #12]
 800b44e:	bf15      	itete	ne
 800b450:	6560      	strne	r0, [r4, #84]	; 0x54
 800b452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b45a:	81a3      	strheq	r3, [r4, #12]
 800b45c:	bf18      	it	ne
 800b45e:	81a3      	strhne	r3, [r4, #12]
 800b460:	bd10      	pop	{r4, pc}

0800b462 <__sclose>:
 800b462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b466:	f000 b8f1 	b.w	800b64c <_close_r>
	...

0800b46c <__swbuf_r>:
 800b46c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b46e:	460e      	mov	r6, r1
 800b470:	4614      	mov	r4, r2
 800b472:	4605      	mov	r5, r0
 800b474:	b118      	cbz	r0, 800b47e <__swbuf_r+0x12>
 800b476:	6983      	ldr	r3, [r0, #24]
 800b478:	b90b      	cbnz	r3, 800b47e <__swbuf_r+0x12>
 800b47a:	f7ff f913 	bl	800a6a4 <__sinit>
 800b47e:	4b21      	ldr	r3, [pc, #132]	; (800b504 <__swbuf_r+0x98>)
 800b480:	429c      	cmp	r4, r3
 800b482:	d12b      	bne.n	800b4dc <__swbuf_r+0x70>
 800b484:	686c      	ldr	r4, [r5, #4]
 800b486:	69a3      	ldr	r3, [r4, #24]
 800b488:	60a3      	str	r3, [r4, #8]
 800b48a:	89a3      	ldrh	r3, [r4, #12]
 800b48c:	071a      	lsls	r2, r3, #28
 800b48e:	d52f      	bpl.n	800b4f0 <__swbuf_r+0x84>
 800b490:	6923      	ldr	r3, [r4, #16]
 800b492:	b36b      	cbz	r3, 800b4f0 <__swbuf_r+0x84>
 800b494:	6923      	ldr	r3, [r4, #16]
 800b496:	6820      	ldr	r0, [r4, #0]
 800b498:	1ac0      	subs	r0, r0, r3
 800b49a:	6963      	ldr	r3, [r4, #20]
 800b49c:	b2f6      	uxtb	r6, r6
 800b49e:	4283      	cmp	r3, r0
 800b4a0:	4637      	mov	r7, r6
 800b4a2:	dc04      	bgt.n	800b4ae <__swbuf_r+0x42>
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4628      	mov	r0, r5
 800b4a8:	f000 f966 	bl	800b778 <_fflush_r>
 800b4ac:	bb30      	cbnz	r0, 800b4fc <__swbuf_r+0x90>
 800b4ae:	68a3      	ldr	r3, [r4, #8]
 800b4b0:	3b01      	subs	r3, #1
 800b4b2:	60a3      	str	r3, [r4, #8]
 800b4b4:	6823      	ldr	r3, [r4, #0]
 800b4b6:	1c5a      	adds	r2, r3, #1
 800b4b8:	6022      	str	r2, [r4, #0]
 800b4ba:	701e      	strb	r6, [r3, #0]
 800b4bc:	6963      	ldr	r3, [r4, #20]
 800b4be:	3001      	adds	r0, #1
 800b4c0:	4283      	cmp	r3, r0
 800b4c2:	d004      	beq.n	800b4ce <__swbuf_r+0x62>
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	07db      	lsls	r3, r3, #31
 800b4c8:	d506      	bpl.n	800b4d8 <__swbuf_r+0x6c>
 800b4ca:	2e0a      	cmp	r6, #10
 800b4cc:	d104      	bne.n	800b4d8 <__swbuf_r+0x6c>
 800b4ce:	4621      	mov	r1, r4
 800b4d0:	4628      	mov	r0, r5
 800b4d2:	f000 f951 	bl	800b778 <_fflush_r>
 800b4d6:	b988      	cbnz	r0, 800b4fc <__swbuf_r+0x90>
 800b4d8:	4638      	mov	r0, r7
 800b4da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b4dc:	4b0a      	ldr	r3, [pc, #40]	; (800b508 <__swbuf_r+0x9c>)
 800b4de:	429c      	cmp	r4, r3
 800b4e0:	d101      	bne.n	800b4e6 <__swbuf_r+0x7a>
 800b4e2:	68ac      	ldr	r4, [r5, #8]
 800b4e4:	e7cf      	b.n	800b486 <__swbuf_r+0x1a>
 800b4e6:	4b09      	ldr	r3, [pc, #36]	; (800b50c <__swbuf_r+0xa0>)
 800b4e8:	429c      	cmp	r4, r3
 800b4ea:	bf08      	it	eq
 800b4ec:	68ec      	ldreq	r4, [r5, #12]
 800b4ee:	e7ca      	b.n	800b486 <__swbuf_r+0x1a>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	4628      	mov	r0, r5
 800b4f4:	f000 f81e 	bl	800b534 <__swsetup_r>
 800b4f8:	2800      	cmp	r0, #0
 800b4fa:	d0cb      	beq.n	800b494 <__swbuf_r+0x28>
 800b4fc:	f04f 37ff 	mov.w	r7, #4294967295
 800b500:	e7ea      	b.n	800b4d8 <__swbuf_r+0x6c>
 800b502:	bf00      	nop
 800b504:	0800bdd4 	.word	0x0800bdd4
 800b508:	0800bdf4 	.word	0x0800bdf4
 800b50c:	0800bdb4 	.word	0x0800bdb4

0800b510 <_write_r>:
 800b510:	b538      	push	{r3, r4, r5, lr}
 800b512:	4d07      	ldr	r5, [pc, #28]	; (800b530 <_write_r+0x20>)
 800b514:	4604      	mov	r4, r0
 800b516:	4608      	mov	r0, r1
 800b518:	4611      	mov	r1, r2
 800b51a:	2200      	movs	r2, #0
 800b51c:	602a      	str	r2, [r5, #0]
 800b51e:	461a      	mov	r2, r3
 800b520:	f7f7 f9c5 	bl	80028ae <_write>
 800b524:	1c43      	adds	r3, r0, #1
 800b526:	d102      	bne.n	800b52e <_write_r+0x1e>
 800b528:	682b      	ldr	r3, [r5, #0]
 800b52a:	b103      	cbz	r3, 800b52e <_write_r+0x1e>
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	bd38      	pop	{r3, r4, r5, pc}
 800b530:	2000052c 	.word	0x2000052c

0800b534 <__swsetup_r>:
 800b534:	4b32      	ldr	r3, [pc, #200]	; (800b600 <__swsetup_r+0xcc>)
 800b536:	b570      	push	{r4, r5, r6, lr}
 800b538:	681d      	ldr	r5, [r3, #0]
 800b53a:	4606      	mov	r6, r0
 800b53c:	460c      	mov	r4, r1
 800b53e:	b125      	cbz	r5, 800b54a <__swsetup_r+0x16>
 800b540:	69ab      	ldr	r3, [r5, #24]
 800b542:	b913      	cbnz	r3, 800b54a <__swsetup_r+0x16>
 800b544:	4628      	mov	r0, r5
 800b546:	f7ff f8ad 	bl	800a6a4 <__sinit>
 800b54a:	4b2e      	ldr	r3, [pc, #184]	; (800b604 <__swsetup_r+0xd0>)
 800b54c:	429c      	cmp	r4, r3
 800b54e:	d10f      	bne.n	800b570 <__swsetup_r+0x3c>
 800b550:	686c      	ldr	r4, [r5, #4]
 800b552:	89a3      	ldrh	r3, [r4, #12]
 800b554:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b558:	0719      	lsls	r1, r3, #28
 800b55a:	d42c      	bmi.n	800b5b6 <__swsetup_r+0x82>
 800b55c:	06dd      	lsls	r5, r3, #27
 800b55e:	d411      	bmi.n	800b584 <__swsetup_r+0x50>
 800b560:	2309      	movs	r3, #9
 800b562:	6033      	str	r3, [r6, #0]
 800b564:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b568:	81a3      	strh	r3, [r4, #12]
 800b56a:	f04f 30ff 	mov.w	r0, #4294967295
 800b56e:	e03e      	b.n	800b5ee <__swsetup_r+0xba>
 800b570:	4b25      	ldr	r3, [pc, #148]	; (800b608 <__swsetup_r+0xd4>)
 800b572:	429c      	cmp	r4, r3
 800b574:	d101      	bne.n	800b57a <__swsetup_r+0x46>
 800b576:	68ac      	ldr	r4, [r5, #8]
 800b578:	e7eb      	b.n	800b552 <__swsetup_r+0x1e>
 800b57a:	4b24      	ldr	r3, [pc, #144]	; (800b60c <__swsetup_r+0xd8>)
 800b57c:	429c      	cmp	r4, r3
 800b57e:	bf08      	it	eq
 800b580:	68ec      	ldreq	r4, [r5, #12]
 800b582:	e7e6      	b.n	800b552 <__swsetup_r+0x1e>
 800b584:	0758      	lsls	r0, r3, #29
 800b586:	d512      	bpl.n	800b5ae <__swsetup_r+0x7a>
 800b588:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b58a:	b141      	cbz	r1, 800b59e <__swsetup_r+0x6a>
 800b58c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b590:	4299      	cmp	r1, r3
 800b592:	d002      	beq.n	800b59a <__swsetup_r+0x66>
 800b594:	4630      	mov	r0, r6
 800b596:	f7ff fcdb 	bl	800af50 <_free_r>
 800b59a:	2300      	movs	r3, #0
 800b59c:	6363      	str	r3, [r4, #52]	; 0x34
 800b59e:	89a3      	ldrh	r3, [r4, #12]
 800b5a0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b5a4:	81a3      	strh	r3, [r4, #12]
 800b5a6:	2300      	movs	r3, #0
 800b5a8:	6063      	str	r3, [r4, #4]
 800b5aa:	6923      	ldr	r3, [r4, #16]
 800b5ac:	6023      	str	r3, [r4, #0]
 800b5ae:	89a3      	ldrh	r3, [r4, #12]
 800b5b0:	f043 0308 	orr.w	r3, r3, #8
 800b5b4:	81a3      	strh	r3, [r4, #12]
 800b5b6:	6923      	ldr	r3, [r4, #16]
 800b5b8:	b94b      	cbnz	r3, 800b5ce <__swsetup_r+0x9a>
 800b5ba:	89a3      	ldrh	r3, [r4, #12]
 800b5bc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b5c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b5c4:	d003      	beq.n	800b5ce <__swsetup_r+0x9a>
 800b5c6:	4621      	mov	r1, r4
 800b5c8:	4630      	mov	r0, r6
 800b5ca:	f000 f95b 	bl	800b884 <__smakebuf_r>
 800b5ce:	89a0      	ldrh	r0, [r4, #12]
 800b5d0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b5d4:	f010 0301 	ands.w	r3, r0, #1
 800b5d8:	d00a      	beq.n	800b5f0 <__swsetup_r+0xbc>
 800b5da:	2300      	movs	r3, #0
 800b5dc:	60a3      	str	r3, [r4, #8]
 800b5de:	6963      	ldr	r3, [r4, #20]
 800b5e0:	425b      	negs	r3, r3
 800b5e2:	61a3      	str	r3, [r4, #24]
 800b5e4:	6923      	ldr	r3, [r4, #16]
 800b5e6:	b943      	cbnz	r3, 800b5fa <__swsetup_r+0xc6>
 800b5e8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b5ec:	d1ba      	bne.n	800b564 <__swsetup_r+0x30>
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	0781      	lsls	r1, r0, #30
 800b5f2:	bf58      	it	pl
 800b5f4:	6963      	ldrpl	r3, [r4, #20]
 800b5f6:	60a3      	str	r3, [r4, #8]
 800b5f8:	e7f4      	b.n	800b5e4 <__swsetup_r+0xb0>
 800b5fa:	2000      	movs	r0, #0
 800b5fc:	e7f7      	b.n	800b5ee <__swsetup_r+0xba>
 800b5fe:	bf00      	nop
 800b600:	20000014 	.word	0x20000014
 800b604:	0800bdd4 	.word	0x0800bdd4
 800b608:	0800bdf4 	.word	0x0800bdf4
 800b60c:	0800bdb4 	.word	0x0800bdb4

0800b610 <__assert_func>:
 800b610:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b612:	4614      	mov	r4, r2
 800b614:	461a      	mov	r2, r3
 800b616:	4b09      	ldr	r3, [pc, #36]	; (800b63c <__assert_func+0x2c>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	4605      	mov	r5, r0
 800b61c:	68d8      	ldr	r0, [r3, #12]
 800b61e:	b14c      	cbz	r4, 800b634 <__assert_func+0x24>
 800b620:	4b07      	ldr	r3, [pc, #28]	; (800b640 <__assert_func+0x30>)
 800b622:	9100      	str	r1, [sp, #0]
 800b624:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b628:	4906      	ldr	r1, [pc, #24]	; (800b644 <__assert_func+0x34>)
 800b62a:	462b      	mov	r3, r5
 800b62c:	f000 f8e0 	bl	800b7f0 <fiprintf>
 800b630:	f000 f9a5 	bl	800b97e <abort>
 800b634:	4b04      	ldr	r3, [pc, #16]	; (800b648 <__assert_func+0x38>)
 800b636:	461c      	mov	r4, r3
 800b638:	e7f3      	b.n	800b622 <__assert_func+0x12>
 800b63a:	bf00      	nop
 800b63c:	20000014 	.word	0x20000014
 800b640:	0800bf7d 	.word	0x0800bf7d
 800b644:	0800bf8a 	.word	0x0800bf8a
 800b648:	0800bfb8 	.word	0x0800bfb8

0800b64c <_close_r>:
 800b64c:	b538      	push	{r3, r4, r5, lr}
 800b64e:	4d06      	ldr	r5, [pc, #24]	; (800b668 <_close_r+0x1c>)
 800b650:	2300      	movs	r3, #0
 800b652:	4604      	mov	r4, r0
 800b654:	4608      	mov	r0, r1
 800b656:	602b      	str	r3, [r5, #0]
 800b658:	f7f7 f945 	bl	80028e6 <_close>
 800b65c:	1c43      	adds	r3, r0, #1
 800b65e:	d102      	bne.n	800b666 <_close_r+0x1a>
 800b660:	682b      	ldr	r3, [r5, #0]
 800b662:	b103      	cbz	r3, 800b666 <_close_r+0x1a>
 800b664:	6023      	str	r3, [r4, #0]
 800b666:	bd38      	pop	{r3, r4, r5, pc}
 800b668:	2000052c 	.word	0x2000052c

0800b66c <__sflush_r>:
 800b66c:	898a      	ldrh	r2, [r1, #12]
 800b66e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b672:	4605      	mov	r5, r0
 800b674:	0710      	lsls	r0, r2, #28
 800b676:	460c      	mov	r4, r1
 800b678:	d458      	bmi.n	800b72c <__sflush_r+0xc0>
 800b67a:	684b      	ldr	r3, [r1, #4]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	dc05      	bgt.n	800b68c <__sflush_r+0x20>
 800b680:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b682:	2b00      	cmp	r3, #0
 800b684:	dc02      	bgt.n	800b68c <__sflush_r+0x20>
 800b686:	2000      	movs	r0, #0
 800b688:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b68c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b68e:	2e00      	cmp	r6, #0
 800b690:	d0f9      	beq.n	800b686 <__sflush_r+0x1a>
 800b692:	2300      	movs	r3, #0
 800b694:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b698:	682f      	ldr	r7, [r5, #0]
 800b69a:	602b      	str	r3, [r5, #0]
 800b69c:	d032      	beq.n	800b704 <__sflush_r+0x98>
 800b69e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b6a0:	89a3      	ldrh	r3, [r4, #12]
 800b6a2:	075a      	lsls	r2, r3, #29
 800b6a4:	d505      	bpl.n	800b6b2 <__sflush_r+0x46>
 800b6a6:	6863      	ldr	r3, [r4, #4]
 800b6a8:	1ac0      	subs	r0, r0, r3
 800b6aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b6ac:	b10b      	cbz	r3, 800b6b2 <__sflush_r+0x46>
 800b6ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b6b0:	1ac0      	subs	r0, r0, r3
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	4602      	mov	r2, r0
 800b6b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b6b8:	6a21      	ldr	r1, [r4, #32]
 800b6ba:	4628      	mov	r0, r5
 800b6bc:	47b0      	blx	r6
 800b6be:	1c43      	adds	r3, r0, #1
 800b6c0:	89a3      	ldrh	r3, [r4, #12]
 800b6c2:	d106      	bne.n	800b6d2 <__sflush_r+0x66>
 800b6c4:	6829      	ldr	r1, [r5, #0]
 800b6c6:	291d      	cmp	r1, #29
 800b6c8:	d82c      	bhi.n	800b724 <__sflush_r+0xb8>
 800b6ca:	4a2a      	ldr	r2, [pc, #168]	; (800b774 <__sflush_r+0x108>)
 800b6cc:	40ca      	lsrs	r2, r1
 800b6ce:	07d6      	lsls	r6, r2, #31
 800b6d0:	d528      	bpl.n	800b724 <__sflush_r+0xb8>
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	6062      	str	r2, [r4, #4]
 800b6d6:	04d9      	lsls	r1, r3, #19
 800b6d8:	6922      	ldr	r2, [r4, #16]
 800b6da:	6022      	str	r2, [r4, #0]
 800b6dc:	d504      	bpl.n	800b6e8 <__sflush_r+0x7c>
 800b6de:	1c42      	adds	r2, r0, #1
 800b6e0:	d101      	bne.n	800b6e6 <__sflush_r+0x7a>
 800b6e2:	682b      	ldr	r3, [r5, #0]
 800b6e4:	b903      	cbnz	r3, 800b6e8 <__sflush_r+0x7c>
 800b6e6:	6560      	str	r0, [r4, #84]	; 0x54
 800b6e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b6ea:	602f      	str	r7, [r5, #0]
 800b6ec:	2900      	cmp	r1, #0
 800b6ee:	d0ca      	beq.n	800b686 <__sflush_r+0x1a>
 800b6f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b6f4:	4299      	cmp	r1, r3
 800b6f6:	d002      	beq.n	800b6fe <__sflush_r+0x92>
 800b6f8:	4628      	mov	r0, r5
 800b6fa:	f7ff fc29 	bl	800af50 <_free_r>
 800b6fe:	2000      	movs	r0, #0
 800b700:	6360      	str	r0, [r4, #52]	; 0x34
 800b702:	e7c1      	b.n	800b688 <__sflush_r+0x1c>
 800b704:	6a21      	ldr	r1, [r4, #32]
 800b706:	2301      	movs	r3, #1
 800b708:	4628      	mov	r0, r5
 800b70a:	47b0      	blx	r6
 800b70c:	1c41      	adds	r1, r0, #1
 800b70e:	d1c7      	bne.n	800b6a0 <__sflush_r+0x34>
 800b710:	682b      	ldr	r3, [r5, #0]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d0c4      	beq.n	800b6a0 <__sflush_r+0x34>
 800b716:	2b1d      	cmp	r3, #29
 800b718:	d001      	beq.n	800b71e <__sflush_r+0xb2>
 800b71a:	2b16      	cmp	r3, #22
 800b71c:	d101      	bne.n	800b722 <__sflush_r+0xb6>
 800b71e:	602f      	str	r7, [r5, #0]
 800b720:	e7b1      	b.n	800b686 <__sflush_r+0x1a>
 800b722:	89a3      	ldrh	r3, [r4, #12]
 800b724:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b728:	81a3      	strh	r3, [r4, #12]
 800b72a:	e7ad      	b.n	800b688 <__sflush_r+0x1c>
 800b72c:	690f      	ldr	r7, [r1, #16]
 800b72e:	2f00      	cmp	r7, #0
 800b730:	d0a9      	beq.n	800b686 <__sflush_r+0x1a>
 800b732:	0793      	lsls	r3, r2, #30
 800b734:	680e      	ldr	r6, [r1, #0]
 800b736:	bf08      	it	eq
 800b738:	694b      	ldreq	r3, [r1, #20]
 800b73a:	600f      	str	r7, [r1, #0]
 800b73c:	bf18      	it	ne
 800b73e:	2300      	movne	r3, #0
 800b740:	eba6 0807 	sub.w	r8, r6, r7
 800b744:	608b      	str	r3, [r1, #8]
 800b746:	f1b8 0f00 	cmp.w	r8, #0
 800b74a:	dd9c      	ble.n	800b686 <__sflush_r+0x1a>
 800b74c:	6a21      	ldr	r1, [r4, #32]
 800b74e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800b750:	4643      	mov	r3, r8
 800b752:	463a      	mov	r2, r7
 800b754:	4628      	mov	r0, r5
 800b756:	47b0      	blx	r6
 800b758:	2800      	cmp	r0, #0
 800b75a:	dc06      	bgt.n	800b76a <__sflush_r+0xfe>
 800b75c:	89a3      	ldrh	r3, [r4, #12]
 800b75e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b762:	81a3      	strh	r3, [r4, #12]
 800b764:	f04f 30ff 	mov.w	r0, #4294967295
 800b768:	e78e      	b.n	800b688 <__sflush_r+0x1c>
 800b76a:	4407      	add	r7, r0
 800b76c:	eba8 0800 	sub.w	r8, r8, r0
 800b770:	e7e9      	b.n	800b746 <__sflush_r+0xda>
 800b772:	bf00      	nop
 800b774:	20400001 	.word	0x20400001

0800b778 <_fflush_r>:
 800b778:	b538      	push	{r3, r4, r5, lr}
 800b77a:	690b      	ldr	r3, [r1, #16]
 800b77c:	4605      	mov	r5, r0
 800b77e:	460c      	mov	r4, r1
 800b780:	b913      	cbnz	r3, 800b788 <_fflush_r+0x10>
 800b782:	2500      	movs	r5, #0
 800b784:	4628      	mov	r0, r5
 800b786:	bd38      	pop	{r3, r4, r5, pc}
 800b788:	b118      	cbz	r0, 800b792 <_fflush_r+0x1a>
 800b78a:	6983      	ldr	r3, [r0, #24]
 800b78c:	b90b      	cbnz	r3, 800b792 <_fflush_r+0x1a>
 800b78e:	f7fe ff89 	bl	800a6a4 <__sinit>
 800b792:	4b14      	ldr	r3, [pc, #80]	; (800b7e4 <_fflush_r+0x6c>)
 800b794:	429c      	cmp	r4, r3
 800b796:	d11b      	bne.n	800b7d0 <_fflush_r+0x58>
 800b798:	686c      	ldr	r4, [r5, #4]
 800b79a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d0ef      	beq.n	800b782 <_fflush_r+0xa>
 800b7a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800b7a4:	07d0      	lsls	r0, r2, #31
 800b7a6:	d404      	bmi.n	800b7b2 <_fflush_r+0x3a>
 800b7a8:	0599      	lsls	r1, r3, #22
 800b7aa:	d402      	bmi.n	800b7b2 <_fflush_r+0x3a>
 800b7ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ae:	f7ff f81c 	bl	800a7ea <__retarget_lock_acquire_recursive>
 800b7b2:	4628      	mov	r0, r5
 800b7b4:	4621      	mov	r1, r4
 800b7b6:	f7ff ff59 	bl	800b66c <__sflush_r>
 800b7ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b7bc:	07da      	lsls	r2, r3, #31
 800b7be:	4605      	mov	r5, r0
 800b7c0:	d4e0      	bmi.n	800b784 <_fflush_r+0xc>
 800b7c2:	89a3      	ldrh	r3, [r4, #12]
 800b7c4:	059b      	lsls	r3, r3, #22
 800b7c6:	d4dd      	bmi.n	800b784 <_fflush_r+0xc>
 800b7c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b7ca:	f7ff f80f 	bl	800a7ec <__retarget_lock_release_recursive>
 800b7ce:	e7d9      	b.n	800b784 <_fflush_r+0xc>
 800b7d0:	4b05      	ldr	r3, [pc, #20]	; (800b7e8 <_fflush_r+0x70>)
 800b7d2:	429c      	cmp	r4, r3
 800b7d4:	d101      	bne.n	800b7da <_fflush_r+0x62>
 800b7d6:	68ac      	ldr	r4, [r5, #8]
 800b7d8:	e7df      	b.n	800b79a <_fflush_r+0x22>
 800b7da:	4b04      	ldr	r3, [pc, #16]	; (800b7ec <_fflush_r+0x74>)
 800b7dc:	429c      	cmp	r4, r3
 800b7de:	bf08      	it	eq
 800b7e0:	68ec      	ldreq	r4, [r5, #12]
 800b7e2:	e7da      	b.n	800b79a <_fflush_r+0x22>
 800b7e4:	0800bdd4 	.word	0x0800bdd4
 800b7e8:	0800bdf4 	.word	0x0800bdf4
 800b7ec:	0800bdb4 	.word	0x0800bdb4

0800b7f0 <fiprintf>:
 800b7f0:	b40e      	push	{r1, r2, r3}
 800b7f2:	b503      	push	{r0, r1, lr}
 800b7f4:	4601      	mov	r1, r0
 800b7f6:	ab03      	add	r3, sp, #12
 800b7f8:	4805      	ldr	r0, [pc, #20]	; (800b810 <fiprintf+0x20>)
 800b7fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b7fe:	6800      	ldr	r0, [r0, #0]
 800b800:	9301      	str	r3, [sp, #4]
 800b802:	f7ff fcaf 	bl	800b164 <_vfiprintf_r>
 800b806:	b002      	add	sp, #8
 800b808:	f85d eb04 	ldr.w	lr, [sp], #4
 800b80c:	b003      	add	sp, #12
 800b80e:	4770      	bx	lr
 800b810:	20000014 	.word	0x20000014

0800b814 <_lseek_r>:
 800b814:	b538      	push	{r3, r4, r5, lr}
 800b816:	4d07      	ldr	r5, [pc, #28]	; (800b834 <_lseek_r+0x20>)
 800b818:	4604      	mov	r4, r0
 800b81a:	4608      	mov	r0, r1
 800b81c:	4611      	mov	r1, r2
 800b81e:	2200      	movs	r2, #0
 800b820:	602a      	str	r2, [r5, #0]
 800b822:	461a      	mov	r2, r3
 800b824:	f7f7 f886 	bl	8002934 <_lseek>
 800b828:	1c43      	adds	r3, r0, #1
 800b82a:	d102      	bne.n	800b832 <_lseek_r+0x1e>
 800b82c:	682b      	ldr	r3, [r5, #0]
 800b82e:	b103      	cbz	r3, 800b832 <_lseek_r+0x1e>
 800b830:	6023      	str	r3, [r4, #0]
 800b832:	bd38      	pop	{r3, r4, r5, pc}
 800b834:	2000052c 	.word	0x2000052c

0800b838 <__swhatbuf_r>:
 800b838:	b570      	push	{r4, r5, r6, lr}
 800b83a:	460e      	mov	r6, r1
 800b83c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b840:	2900      	cmp	r1, #0
 800b842:	b096      	sub	sp, #88	; 0x58
 800b844:	4614      	mov	r4, r2
 800b846:	461d      	mov	r5, r3
 800b848:	da08      	bge.n	800b85c <__swhatbuf_r+0x24>
 800b84a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	602a      	str	r2, [r5, #0]
 800b852:	061a      	lsls	r2, r3, #24
 800b854:	d410      	bmi.n	800b878 <__swhatbuf_r+0x40>
 800b856:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b85a:	e00e      	b.n	800b87a <__swhatbuf_r+0x42>
 800b85c:	466a      	mov	r2, sp
 800b85e:	f000 f895 	bl	800b98c <_fstat_r>
 800b862:	2800      	cmp	r0, #0
 800b864:	dbf1      	blt.n	800b84a <__swhatbuf_r+0x12>
 800b866:	9a01      	ldr	r2, [sp, #4]
 800b868:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800b86c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800b870:	425a      	negs	r2, r3
 800b872:	415a      	adcs	r2, r3
 800b874:	602a      	str	r2, [r5, #0]
 800b876:	e7ee      	b.n	800b856 <__swhatbuf_r+0x1e>
 800b878:	2340      	movs	r3, #64	; 0x40
 800b87a:	2000      	movs	r0, #0
 800b87c:	6023      	str	r3, [r4, #0]
 800b87e:	b016      	add	sp, #88	; 0x58
 800b880:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b884 <__smakebuf_r>:
 800b884:	898b      	ldrh	r3, [r1, #12]
 800b886:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b888:	079d      	lsls	r5, r3, #30
 800b88a:	4606      	mov	r6, r0
 800b88c:	460c      	mov	r4, r1
 800b88e:	d507      	bpl.n	800b8a0 <__smakebuf_r+0x1c>
 800b890:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	6123      	str	r3, [r4, #16]
 800b898:	2301      	movs	r3, #1
 800b89a:	6163      	str	r3, [r4, #20]
 800b89c:	b002      	add	sp, #8
 800b89e:	bd70      	pop	{r4, r5, r6, pc}
 800b8a0:	ab01      	add	r3, sp, #4
 800b8a2:	466a      	mov	r2, sp
 800b8a4:	f7ff ffc8 	bl	800b838 <__swhatbuf_r>
 800b8a8:	9900      	ldr	r1, [sp, #0]
 800b8aa:	4605      	mov	r5, r0
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	f7ff fbbb 	bl	800b028 <_malloc_r>
 800b8b2:	b948      	cbnz	r0, 800b8c8 <__smakebuf_r+0x44>
 800b8b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b8b8:	059a      	lsls	r2, r3, #22
 800b8ba:	d4ef      	bmi.n	800b89c <__smakebuf_r+0x18>
 800b8bc:	f023 0303 	bic.w	r3, r3, #3
 800b8c0:	f043 0302 	orr.w	r3, r3, #2
 800b8c4:	81a3      	strh	r3, [r4, #12]
 800b8c6:	e7e3      	b.n	800b890 <__smakebuf_r+0xc>
 800b8c8:	4b0d      	ldr	r3, [pc, #52]	; (800b900 <__smakebuf_r+0x7c>)
 800b8ca:	62b3      	str	r3, [r6, #40]	; 0x28
 800b8cc:	89a3      	ldrh	r3, [r4, #12]
 800b8ce:	6020      	str	r0, [r4, #0]
 800b8d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8d4:	81a3      	strh	r3, [r4, #12]
 800b8d6:	9b00      	ldr	r3, [sp, #0]
 800b8d8:	6163      	str	r3, [r4, #20]
 800b8da:	9b01      	ldr	r3, [sp, #4]
 800b8dc:	6120      	str	r0, [r4, #16]
 800b8de:	b15b      	cbz	r3, 800b8f8 <__smakebuf_r+0x74>
 800b8e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b8e4:	4630      	mov	r0, r6
 800b8e6:	f000 f863 	bl	800b9b0 <_isatty_r>
 800b8ea:	b128      	cbz	r0, 800b8f8 <__smakebuf_r+0x74>
 800b8ec:	89a3      	ldrh	r3, [r4, #12]
 800b8ee:	f023 0303 	bic.w	r3, r3, #3
 800b8f2:	f043 0301 	orr.w	r3, r3, #1
 800b8f6:	81a3      	strh	r3, [r4, #12]
 800b8f8:	89a0      	ldrh	r0, [r4, #12]
 800b8fa:	4305      	orrs	r5, r0
 800b8fc:	81a5      	strh	r5, [r4, #12]
 800b8fe:	e7cd      	b.n	800b89c <__smakebuf_r+0x18>
 800b900:	0800a63d 	.word	0x0800a63d

0800b904 <__ascii_mbtowc>:
 800b904:	b082      	sub	sp, #8
 800b906:	b901      	cbnz	r1, 800b90a <__ascii_mbtowc+0x6>
 800b908:	a901      	add	r1, sp, #4
 800b90a:	b142      	cbz	r2, 800b91e <__ascii_mbtowc+0x1a>
 800b90c:	b14b      	cbz	r3, 800b922 <__ascii_mbtowc+0x1e>
 800b90e:	7813      	ldrb	r3, [r2, #0]
 800b910:	600b      	str	r3, [r1, #0]
 800b912:	7812      	ldrb	r2, [r2, #0]
 800b914:	1e10      	subs	r0, r2, #0
 800b916:	bf18      	it	ne
 800b918:	2001      	movne	r0, #1
 800b91a:	b002      	add	sp, #8
 800b91c:	4770      	bx	lr
 800b91e:	4610      	mov	r0, r2
 800b920:	e7fb      	b.n	800b91a <__ascii_mbtowc+0x16>
 800b922:	f06f 0001 	mvn.w	r0, #1
 800b926:	e7f8      	b.n	800b91a <__ascii_mbtowc+0x16>

0800b928 <__malloc_lock>:
 800b928:	4801      	ldr	r0, [pc, #4]	; (800b930 <__malloc_lock+0x8>)
 800b92a:	f7fe bf5e 	b.w	800a7ea <__retarget_lock_acquire_recursive>
 800b92e:	bf00      	nop
 800b930:	20000520 	.word	0x20000520

0800b934 <__malloc_unlock>:
 800b934:	4801      	ldr	r0, [pc, #4]	; (800b93c <__malloc_unlock+0x8>)
 800b936:	f7fe bf59 	b.w	800a7ec <__retarget_lock_release_recursive>
 800b93a:	bf00      	nop
 800b93c:	20000520 	.word	0x20000520

0800b940 <_read_r>:
 800b940:	b538      	push	{r3, r4, r5, lr}
 800b942:	4d07      	ldr	r5, [pc, #28]	; (800b960 <_read_r+0x20>)
 800b944:	4604      	mov	r4, r0
 800b946:	4608      	mov	r0, r1
 800b948:	4611      	mov	r1, r2
 800b94a:	2200      	movs	r2, #0
 800b94c:	602a      	str	r2, [r5, #0]
 800b94e:	461a      	mov	r2, r3
 800b950:	f7f6 ff90 	bl	8002874 <_read>
 800b954:	1c43      	adds	r3, r0, #1
 800b956:	d102      	bne.n	800b95e <_read_r+0x1e>
 800b958:	682b      	ldr	r3, [r5, #0]
 800b95a:	b103      	cbz	r3, 800b95e <_read_r+0x1e>
 800b95c:	6023      	str	r3, [r4, #0]
 800b95e:	bd38      	pop	{r3, r4, r5, pc}
 800b960:	2000052c 	.word	0x2000052c

0800b964 <__ascii_wctomb>:
 800b964:	b149      	cbz	r1, 800b97a <__ascii_wctomb+0x16>
 800b966:	2aff      	cmp	r2, #255	; 0xff
 800b968:	bf85      	ittet	hi
 800b96a:	238a      	movhi	r3, #138	; 0x8a
 800b96c:	6003      	strhi	r3, [r0, #0]
 800b96e:	700a      	strbls	r2, [r1, #0]
 800b970:	f04f 30ff 	movhi.w	r0, #4294967295
 800b974:	bf98      	it	ls
 800b976:	2001      	movls	r0, #1
 800b978:	4770      	bx	lr
 800b97a:	4608      	mov	r0, r1
 800b97c:	4770      	bx	lr

0800b97e <abort>:
 800b97e:	b508      	push	{r3, lr}
 800b980:	2006      	movs	r0, #6
 800b982:	f000 f84d 	bl	800ba20 <raise>
 800b986:	2001      	movs	r0, #1
 800b988:	f7f6 ff6a 	bl	8002860 <_exit>

0800b98c <_fstat_r>:
 800b98c:	b538      	push	{r3, r4, r5, lr}
 800b98e:	4d07      	ldr	r5, [pc, #28]	; (800b9ac <_fstat_r+0x20>)
 800b990:	2300      	movs	r3, #0
 800b992:	4604      	mov	r4, r0
 800b994:	4608      	mov	r0, r1
 800b996:	4611      	mov	r1, r2
 800b998:	602b      	str	r3, [r5, #0]
 800b99a:	f7f6 ffb0 	bl	80028fe <_fstat>
 800b99e:	1c43      	adds	r3, r0, #1
 800b9a0:	d102      	bne.n	800b9a8 <_fstat_r+0x1c>
 800b9a2:	682b      	ldr	r3, [r5, #0]
 800b9a4:	b103      	cbz	r3, 800b9a8 <_fstat_r+0x1c>
 800b9a6:	6023      	str	r3, [r4, #0]
 800b9a8:	bd38      	pop	{r3, r4, r5, pc}
 800b9aa:	bf00      	nop
 800b9ac:	2000052c 	.word	0x2000052c

0800b9b0 <_isatty_r>:
 800b9b0:	b538      	push	{r3, r4, r5, lr}
 800b9b2:	4d06      	ldr	r5, [pc, #24]	; (800b9cc <_isatty_r+0x1c>)
 800b9b4:	2300      	movs	r3, #0
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	4608      	mov	r0, r1
 800b9ba:	602b      	str	r3, [r5, #0]
 800b9bc:	f7f6 ffaf 	bl	800291e <_isatty>
 800b9c0:	1c43      	adds	r3, r0, #1
 800b9c2:	d102      	bne.n	800b9ca <_isatty_r+0x1a>
 800b9c4:	682b      	ldr	r3, [r5, #0]
 800b9c6:	b103      	cbz	r3, 800b9ca <_isatty_r+0x1a>
 800b9c8:	6023      	str	r3, [r4, #0]
 800b9ca:	bd38      	pop	{r3, r4, r5, pc}
 800b9cc:	2000052c 	.word	0x2000052c

0800b9d0 <_raise_r>:
 800b9d0:	291f      	cmp	r1, #31
 800b9d2:	b538      	push	{r3, r4, r5, lr}
 800b9d4:	4604      	mov	r4, r0
 800b9d6:	460d      	mov	r5, r1
 800b9d8:	d904      	bls.n	800b9e4 <_raise_r+0x14>
 800b9da:	2316      	movs	r3, #22
 800b9dc:	6003      	str	r3, [r0, #0]
 800b9de:	f04f 30ff 	mov.w	r0, #4294967295
 800b9e2:	bd38      	pop	{r3, r4, r5, pc}
 800b9e4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800b9e6:	b112      	cbz	r2, 800b9ee <_raise_r+0x1e>
 800b9e8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b9ec:	b94b      	cbnz	r3, 800ba02 <_raise_r+0x32>
 800b9ee:	4620      	mov	r0, r4
 800b9f0:	f000 f830 	bl	800ba54 <_getpid_r>
 800b9f4:	462a      	mov	r2, r5
 800b9f6:	4601      	mov	r1, r0
 800b9f8:	4620      	mov	r0, r4
 800b9fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9fe:	f000 b817 	b.w	800ba30 <_kill_r>
 800ba02:	2b01      	cmp	r3, #1
 800ba04:	d00a      	beq.n	800ba1c <_raise_r+0x4c>
 800ba06:	1c59      	adds	r1, r3, #1
 800ba08:	d103      	bne.n	800ba12 <_raise_r+0x42>
 800ba0a:	2316      	movs	r3, #22
 800ba0c:	6003      	str	r3, [r0, #0]
 800ba0e:	2001      	movs	r0, #1
 800ba10:	e7e7      	b.n	800b9e2 <_raise_r+0x12>
 800ba12:	2400      	movs	r4, #0
 800ba14:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ba18:	4628      	mov	r0, r5
 800ba1a:	4798      	blx	r3
 800ba1c:	2000      	movs	r0, #0
 800ba1e:	e7e0      	b.n	800b9e2 <_raise_r+0x12>

0800ba20 <raise>:
 800ba20:	4b02      	ldr	r3, [pc, #8]	; (800ba2c <raise+0xc>)
 800ba22:	4601      	mov	r1, r0
 800ba24:	6818      	ldr	r0, [r3, #0]
 800ba26:	f7ff bfd3 	b.w	800b9d0 <_raise_r>
 800ba2a:	bf00      	nop
 800ba2c:	20000014 	.word	0x20000014

0800ba30 <_kill_r>:
 800ba30:	b538      	push	{r3, r4, r5, lr}
 800ba32:	4d07      	ldr	r5, [pc, #28]	; (800ba50 <_kill_r+0x20>)
 800ba34:	2300      	movs	r3, #0
 800ba36:	4604      	mov	r4, r0
 800ba38:	4608      	mov	r0, r1
 800ba3a:	4611      	mov	r1, r2
 800ba3c:	602b      	str	r3, [r5, #0]
 800ba3e:	f7f6 feff 	bl	8002840 <_kill>
 800ba42:	1c43      	adds	r3, r0, #1
 800ba44:	d102      	bne.n	800ba4c <_kill_r+0x1c>
 800ba46:	682b      	ldr	r3, [r5, #0]
 800ba48:	b103      	cbz	r3, 800ba4c <_kill_r+0x1c>
 800ba4a:	6023      	str	r3, [r4, #0]
 800ba4c:	bd38      	pop	{r3, r4, r5, pc}
 800ba4e:	bf00      	nop
 800ba50:	2000052c 	.word	0x2000052c

0800ba54 <_getpid_r>:
 800ba54:	f7f6 beec 	b.w	8002830 <_getpid>

0800ba58 <floor>:
 800ba58:	ec51 0b10 	vmov	r0, r1, d0
 800ba5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800ba64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800ba68:	2e13      	cmp	r6, #19
 800ba6a:	ee10 5a10 	vmov	r5, s0
 800ba6e:	ee10 8a10 	vmov	r8, s0
 800ba72:	460c      	mov	r4, r1
 800ba74:	dc32      	bgt.n	800badc <floor+0x84>
 800ba76:	2e00      	cmp	r6, #0
 800ba78:	da14      	bge.n	800baa4 <floor+0x4c>
 800ba7a:	a333      	add	r3, pc, #204	; (adr r3, 800bb48 <floor+0xf0>)
 800ba7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba80:	f7f4 fc0c 	bl	800029c <__adddf3>
 800ba84:	2200      	movs	r2, #0
 800ba86:	2300      	movs	r3, #0
 800ba88:	f7f5 f84e 	bl	8000b28 <__aeabi_dcmpgt>
 800ba8c:	b138      	cbz	r0, 800ba9e <floor+0x46>
 800ba8e:	2c00      	cmp	r4, #0
 800ba90:	da57      	bge.n	800bb42 <floor+0xea>
 800ba92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ba96:	431d      	orrs	r5, r3
 800ba98:	d001      	beq.n	800ba9e <floor+0x46>
 800ba9a:	4c2d      	ldr	r4, [pc, #180]	; (800bb50 <floor+0xf8>)
 800ba9c:	2500      	movs	r5, #0
 800ba9e:	4621      	mov	r1, r4
 800baa0:	4628      	mov	r0, r5
 800baa2:	e025      	b.n	800baf0 <floor+0x98>
 800baa4:	4f2b      	ldr	r7, [pc, #172]	; (800bb54 <floor+0xfc>)
 800baa6:	4137      	asrs	r7, r6
 800baa8:	ea01 0307 	and.w	r3, r1, r7
 800baac:	4303      	orrs	r3, r0
 800baae:	d01f      	beq.n	800baf0 <floor+0x98>
 800bab0:	a325      	add	r3, pc, #148	; (adr r3, 800bb48 <floor+0xf0>)
 800bab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bab6:	f7f4 fbf1 	bl	800029c <__adddf3>
 800baba:	2200      	movs	r2, #0
 800babc:	2300      	movs	r3, #0
 800babe:	f7f5 f833 	bl	8000b28 <__aeabi_dcmpgt>
 800bac2:	2800      	cmp	r0, #0
 800bac4:	d0eb      	beq.n	800ba9e <floor+0x46>
 800bac6:	2c00      	cmp	r4, #0
 800bac8:	bfbe      	ittt	lt
 800baca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800bace:	fa43 f606 	asrlt.w	r6, r3, r6
 800bad2:	19a4      	addlt	r4, r4, r6
 800bad4:	ea24 0407 	bic.w	r4, r4, r7
 800bad8:	2500      	movs	r5, #0
 800bada:	e7e0      	b.n	800ba9e <floor+0x46>
 800badc:	2e33      	cmp	r6, #51	; 0x33
 800bade:	dd0b      	ble.n	800baf8 <floor+0xa0>
 800bae0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800bae4:	d104      	bne.n	800baf0 <floor+0x98>
 800bae6:	ee10 2a10 	vmov	r2, s0
 800baea:	460b      	mov	r3, r1
 800baec:	f7f4 fbd6 	bl	800029c <__adddf3>
 800baf0:	ec41 0b10 	vmov	d0, r0, r1
 800baf4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800bafc:	f04f 33ff 	mov.w	r3, #4294967295
 800bb00:	fa23 f707 	lsr.w	r7, r3, r7
 800bb04:	4207      	tst	r7, r0
 800bb06:	d0f3      	beq.n	800baf0 <floor+0x98>
 800bb08:	a30f      	add	r3, pc, #60	; (adr r3, 800bb48 <floor+0xf0>)
 800bb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb0e:	f7f4 fbc5 	bl	800029c <__adddf3>
 800bb12:	2200      	movs	r2, #0
 800bb14:	2300      	movs	r3, #0
 800bb16:	f7f5 f807 	bl	8000b28 <__aeabi_dcmpgt>
 800bb1a:	2800      	cmp	r0, #0
 800bb1c:	d0bf      	beq.n	800ba9e <floor+0x46>
 800bb1e:	2c00      	cmp	r4, #0
 800bb20:	da02      	bge.n	800bb28 <floor+0xd0>
 800bb22:	2e14      	cmp	r6, #20
 800bb24:	d103      	bne.n	800bb2e <floor+0xd6>
 800bb26:	3401      	adds	r4, #1
 800bb28:	ea25 0507 	bic.w	r5, r5, r7
 800bb2c:	e7b7      	b.n	800ba9e <floor+0x46>
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800bb34:	fa03 f606 	lsl.w	r6, r3, r6
 800bb38:	4435      	add	r5, r6
 800bb3a:	4545      	cmp	r5, r8
 800bb3c:	bf38      	it	cc
 800bb3e:	18e4      	addcc	r4, r4, r3
 800bb40:	e7f2      	b.n	800bb28 <floor+0xd0>
 800bb42:	2500      	movs	r5, #0
 800bb44:	462c      	mov	r4, r5
 800bb46:	e7aa      	b.n	800ba9e <floor+0x46>
 800bb48:	8800759c 	.word	0x8800759c
 800bb4c:	7e37e43c 	.word	0x7e37e43c
 800bb50:	bff00000 	.word	0xbff00000
 800bb54:	000fffff 	.word	0x000fffff

0800bb58 <_init>:
 800bb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb5a:	bf00      	nop
 800bb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb5e:	bc08      	pop	{r3}
 800bb60:	469e      	mov	lr, r3
 800bb62:	4770      	bx	lr

0800bb64 <_fini>:
 800bb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bb66:	bf00      	nop
 800bb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bb6a:	bc08      	pop	{r3}
 800bb6c:	469e      	mov	lr, r3
 800bb6e:	4770      	bx	lr
